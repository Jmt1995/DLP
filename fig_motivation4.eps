%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP3390.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/14 ÐÇÆÚÈý, ÏÂÎç 9:34:47
%%BoundingBox: 0 0 340 192
%%HiResBoundingBox: 0 0 340 192
%%CropBox: 0 0 340 192
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 959 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-14T21:34:13+08:00"
   xmp:CreateDate="2019-08-14T21:34:13+08:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmpMM:DocumentID="uuid:5e95d322-aef5-48fc-a60b-2df10644fe2a"
   xmpMM:InstanceID="uuid:d768d020-a951-4244-a9b7-a2c4834dc79f">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivation3.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -192 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 192 li
340 192 li
340 0 li
cp
clp
.059998 191.547 mo
340.02 191.547 li
340.02 .453018 li
.059998 .453018 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
53.907 146.253 mo
332.907 146.253 li
332.907 7.65298 li
53.907 7.65298 li
cp
f
66.588 146.253 mo
66.588 149.753 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
66.588 146.253 mo
66.588 149.753 li
@
63.836 162.698 mo
66.09 162.698 li
66.09 154.914 li
63.64 155.404 li
63.64 154.144 li
66.076 153.654 li
67.462 153.654 li
67.462 162.698 li
69.716 162.698 li
69.716 163.86 li
63.836 163.86 li
63.836 162.698 li
ef
94.77 146.253 mo
94.77 149.753 li
f
94.77 146.253 mo
94.77 149.753 li
@
92.988 162.698 mo
97.804 162.698 li
97.804 163.86 li
91.322 163.86 li
91.322 162.698 li
91.84 162.166 92.554 161.438 93.464 160.514 cv
94.36 159.604 94.934 159.016 95.172 158.75 cv
95.62 158.26 95.928 157.84 96.096 157.49 cv
96.264 157.154 96.362 156.804 96.362 156.468 cv
96.362 155.936 96.166 155.488 95.788 155.152 cv
95.41 154.816 94.92 154.634 94.304 154.634 cv
93.87 154.634 93.408 154.718 92.932 154.858 cv
92.456 155.012 91.938 155.236 91.392 155.544 cv
91.392 154.144 li
91.952 153.92 92.47 153.752 92.946 153.64 cv
93.422 153.528 93.87 153.472 94.276 153.472 cv
95.326 153.472 96.166 153.738 96.796 154.27 cv
97.426 154.802 97.748 155.502 97.748 156.384 cv
97.748 156.804 97.664 157.21 97.51 157.574 cv
97.356 157.952 97.076 158.4 96.656 158.904 cv
96.544 159.044 96.18 159.422 95.564 160.052 cv
94.948 160.682 94.094 161.564 92.988 162.698 cv
ef
122.952 146.253 mo
122.952 149.753 li
f
122.952 146.253 mo
122.952 149.753 li
@
124.184 158.358 mo
124.842 158.498 125.36 158.792 125.724 159.24 cv
126.088 159.688 126.284 160.248 126.284 160.892 cv
126.284 161.9 125.934 162.684 125.248 163.23 cv
124.548 163.776 123.568 164.042 122.294 164.042 cv
121.86 164.042 121.412 164 120.964 163.916 cv
120.516 163.846 120.04 163.72 119.564 163.552 cv
119.564 162.222 li
119.942 162.446 120.362 162.614 120.824 162.726 cv
121.272 162.838 121.748 162.894 122.252 162.894 cv
123.12 162.894 123.778 162.726 124.226 162.39 cv
124.674 162.054 124.912 161.55 124.912 160.892 cv
124.912 160.304 124.702 159.828 124.282 159.492 cv
123.862 159.156 123.274 158.974 122.518 158.974 cv
121.328 158.974 li
121.328 157.84 li
122.574 157.84 li
123.246 157.84 123.764 157.714 124.128 157.434 cv
124.492 157.168 124.674 156.776 124.674 156.258 cv
124.674 155.74 124.478 155.334 124.114 155.054 cv
123.736 154.774 123.204 154.634 122.518 154.634 cv
122.14 154.634 121.734 154.676 121.3 154.76 cv
120.866 154.844 120.39 154.97 119.872 155.138 cv
119.872 153.906 li
120.39 153.766 120.88 153.654 121.342 153.584 cv
121.79 153.514 122.224 153.472 122.644 153.472 cv
123.68 153.472 124.506 153.71 125.122 154.186 cv
125.738 154.662 126.046 155.306 126.046 156.118 cv
126.046 156.678 125.878 157.154 125.556 157.546 cv
125.234 157.938 124.772 158.218 124.184 158.358 cv
ef
151.134 146.253 mo
151.134 149.753 li
f
151.134 146.253 mo
151.134 149.753 li
@
151.992 154.858 mo
148.506 160.304 li
151.992 160.304 li
151.992 154.858 li
151.628 153.654 mo
153.364 153.654 li
153.364 160.304 li
154.82 160.304 li
154.82 161.452 li
153.364 161.452 li
153.364 163.86 li
151.992 163.86 li
151.992 161.452 li
147.386 161.452 li
147.386 160.122 li
151.628 153.654 li
ef
179.316 146.253 mo
179.316 149.753 li
f
179.316 146.253 mo
179.316 149.753 li
@
176.412 153.654 mo
181.83 153.654 li
181.83 154.816 li
177.672 154.816 li
177.672 157.322 li
177.868 157.252 178.078 157.196 178.274 157.168 cv
178.47 157.14 178.68 157.112 178.876 157.112 cv
180.01 157.112 180.906 157.434 181.578 158.05 cv
182.25 158.68 182.586 159.52 182.586 160.584 cv
182.586 161.69 182.236 162.544 181.55 163.146 cv
180.864 163.748 179.898 164.042 178.666 164.042 cv
178.232 164.042 177.798 164 177.35 163.944 cv
176.902 163.874 176.454 163.776 175.978 163.622 cv
175.978 162.236 li
176.384 162.46 176.804 162.628 177.252 162.74 cv
177.686 162.852 178.148 162.894 178.638 162.894 cv
179.422 162.894 180.052 162.698 180.514 162.278 cv
180.962 161.858 181.2 161.298 181.2 160.584 cv
181.2 159.884 180.962 159.324 180.514 158.904 cv
180.052 158.484 179.422 158.274 178.638 158.274 cv
178.274 158.274 177.896 158.316 177.532 158.4 cv
177.168 158.484 176.79 158.61 176.412 158.778 cv
176.412 153.654 li
ef
207.497 146.253 mo
207.497 149.753 li
f
207.497 146.253 mo
207.497 149.753 li
@
207.72 158.204 mo
207.104 158.204 206.614 158.428 206.25 158.848 cv
205.886 159.268 205.704 159.856 205.704 160.584 cv
205.704 161.326 205.886 161.914 206.25 162.334 cv
206.614 162.754 207.104 162.964 207.72 162.964 cv
208.336 162.964 208.826 162.754 209.19 162.334 cv
209.554 161.914 209.736 161.326 209.736 160.584 cv
209.736 159.856 209.554 159.268 209.19 158.848 cv
208.826 158.428 208.336 158.204 207.72 158.204 cv
210.464 153.878 mo
210.464 155.138 li
210.114 154.97 209.764 154.844 209.414 154.76 cv
209.05 154.676 208.7 154.634 208.364 154.634 cv
207.44 154.634 206.74 154.942 206.264 155.558 cv
205.788 156.174 205.508 157.112 205.452 158.344 cv
205.718 157.952 206.054 157.644 206.46 157.434 cv
206.866 157.224 207.314 157.112 207.804 157.112 cv
208.826 157.112 209.638 157.434 210.226 158.05 cv
210.814 158.666 211.122 159.52 211.122 160.584 cv
211.122 161.634 210.8 162.474 210.184 163.104 cv
209.568 163.734 208.742 164.042 207.72 164.042 cv
206.544 164.042 205.634 163.594 205.018 162.698 cv
204.388 161.802 204.08 160.486 204.08 158.764 cv
204.08 157.154 204.458 155.866 205.228 154.914 cv
205.984 153.962 207.02 153.472 208.308 153.472 cv
208.644 153.472 208.994 153.514 209.358 153.57 cv
209.708 153.64 210.072 153.738 210.464 153.878 cv
ef
235.679 146.253 mo
235.679 149.753 li
f
235.679 146.253 mo
235.679 149.753 li
@
232.328 153.654 mo
238.894 153.654 li
238.894 154.242 li
235.184 163.86 li
233.742 163.86 li
237.228 154.816 li
232.328 154.816 li
232.328 153.654 li
ef
263.861 146.253 mo
263.861 149.753 li
f
263.861 146.253 mo
263.861 149.753 li
@
263.832 159.016 mo
263.174 159.016 262.656 159.198 262.278 159.548 cv
261.9 159.898 261.718 160.374 261.718 160.99 cv
261.718 161.606 261.9 162.096 262.278 162.446 cv
262.656 162.796 263.174 162.964 263.832 162.964 cv
264.476 162.964 264.994 162.796 265.372 162.432 cv
265.75 162.082 265.946 161.606 265.946 160.99 cv
265.946 160.374 265.75 159.898 265.386 159.548 cv
265.008 159.198 264.49 159.016 263.832 159.016 cv
262.446 158.428 mo
261.858 158.288 261.396 158.008 261.06 157.602 cv
260.724 157.196 260.57 156.706 260.57 156.118 cv
260.57 155.306 260.85 154.662 261.438 154.186 cv
262.012 153.71 262.81 153.472 263.832 153.472 cv
264.84 153.472 265.638 153.71 266.226 154.186 cv
266.8 154.662 267.094 155.306 267.094 156.118 cv
267.094 156.706 266.926 157.196 266.59 157.602 cv
266.254 158.008 265.806 158.288 265.218 158.428 cv
265.876 158.582 266.394 158.89 266.772 159.338 cv
267.136 159.786 267.332 160.346 267.332 160.99 cv
267.332 161.984 267.024 162.74 266.422 163.258 cv
265.806 163.79 264.952 164.042 263.832 164.042 cv
262.698 164.042 261.83 163.79 261.228 163.258 cv
260.626 162.74 260.332 161.984 260.332 160.99 cv
260.332 160.346 260.514 159.786 260.892 159.338 cv
261.256 158.89 261.774 158.582 262.446 158.428 cv
261.942 156.244 mo
261.942 156.776 262.096 157.196 262.432 157.49 cv
262.768 157.784 263.23 157.924 263.832 157.924 cv
264.42 157.924 264.882 157.784 265.218 157.49 cv
265.554 157.196 265.722 156.776 265.722 156.244 cv
265.722 155.712 265.554 155.306 265.218 155.012 cv
264.882 154.718 264.42 154.564 263.832 154.564 cv
263.23 154.564 262.768 154.718 262.432 155.012 cv
262.096 155.306 261.942 155.712 261.942 156.244 cv
ef
292.043 146.253 mo
292.043 149.753 li
f
292.043 146.253 mo
292.043 149.753 li
@
289.12 163.65 mo
289.12 162.39 li
289.456 162.558 289.806 162.684 290.17 162.768 cv
290.52 162.852 290.87 162.894 291.22 162.894 cv
292.116 162.894 292.816 162.6 293.292 161.984 cv
293.768 161.368 294.048 160.444 294.132 159.184 cv
293.852 159.576 293.516 159.884 293.124 160.094 cv
292.718 160.304 292.27 160.402 291.78 160.402 cv
290.744 160.402 289.932 160.094 289.344 159.478 cv
288.756 158.862 288.462 158.022 288.462 156.944 cv
288.462 155.908 288.77 155.068 289.386 154.424 cv
290.002 153.794 290.828 153.472 291.864 153.472 cv
293.04 153.472 293.95 153.934 294.566 154.83 cv
295.182 155.74 295.504 157.056 295.504 158.764 cv
295.504 160.388 295.112 161.662 294.356 162.614 cv
293.586 163.566 292.564 164.042 291.276 164.042 cv
290.926 164.042 290.576 164 290.226 163.944 cv
289.862 163.888 289.498 163.79 289.12 163.65 cv
291.864 159.324 mo
292.48 159.324 292.97 159.114 293.334 158.694 cv
293.698 158.274 293.88 157.686 293.88 156.944 cv
293.88 156.216 293.698 155.628 293.334 155.208 cv
292.97 154.788 292.48 154.564 291.864 154.564 cv
291.248 154.564 290.758 154.788 290.394 155.208 cv
290.03 155.628 289.848 156.216 289.848 156.944 cv
289.848 157.686 290.03 158.274 290.394 158.694 cv
290.758 159.114 291.248 159.324 291.864 159.324 cv
ef
320.225 146.253 mo
320.225 149.753 li
f
320.225 146.253 mo
320.225 149.753 li
@
313.076 162.698 mo
315.33 162.698 li
315.33 154.914 li
312.88 155.404 li
312.88 154.144 li
315.316 153.654 li
316.702 153.654 li
316.702 162.698 li
318.956 162.698 li
318.956 163.86 li
313.076 163.86 li
313.076 162.698 li
ef
324.672 154.564 mo
323.958 154.564 323.426 154.914 323.062 155.614 cv
322.698 156.314 322.53 157.364 322.53 158.764 cv
322.53 160.164 322.698 161.214 323.062 161.914 cv
323.426 162.614 323.958 162.964 324.672 162.964 cv
325.386 162.964 325.918 162.614 326.282 161.914 cv
326.632 161.214 326.814 160.164 326.814 158.764 cv
326.814 157.364 326.632 156.314 326.282 155.614 cv
325.918 154.914 325.386 154.564 324.672 154.564 cv
324.672 153.472 mo
325.806 153.472 326.674 153.934 327.29 154.83 cv
327.892 155.74 328.2 157.056 328.2 158.764 cv
328.2 160.486 327.892 161.802 327.29 162.698 cv
326.674 163.594 325.806 164.042 324.672 164.042 cv
323.524 164.042 322.642 163.594 322.04 162.698 cv
321.438 161.802 321.144 160.486 321.144 158.764 cv
321.144 157.056 321.438 155.74 322.04 154.83 cv
322.642 153.934 323.524 153.472 324.672 153.472 cv
ef
157.912 171.294 mo
163.778 171.294 li
163.778 172.456 li
159.298 172.456 li
159.298 175.466 li
163.344 175.466 li
163.344 176.628 li
159.298 176.628 li
159.298 181.5 li
157.912 181.5 li
157.912 171.294 li
ef
170.334 175.018 mo
170.194 174.934 170.04 174.878 169.872 174.836 cv
169.704 174.808 169.522 174.78 169.326 174.78 cv
168.612 174.78 168.066 175.018 167.688 175.48 cv
167.296 175.942 167.114 176.6 167.114 177.468 cv
167.114 181.5 li
165.854 181.5 li
165.854 173.842 li
167.114 173.842 li
167.114 175.032 li
167.366 174.57 167.716 174.22 168.136 173.996 cv
168.556 173.772 169.074 173.66 169.69 173.66 cv
169.774 173.66 169.872 173.674 169.984 173.674 cv
170.082 173.688 170.194 173.702 170.334 173.73 cv
170.334 175.018 li
ef
178.208 177.356 mo
178.208 177.972 li
172.426 177.972 li
172.482 178.84 172.734 179.512 173.21 179.96 cv
173.672 180.408 174.316 180.632 175.156 180.632 cv
175.632 180.632 176.108 180.576 176.556 180.464 cv
177.004 180.352 177.466 180.17 177.914 179.918 cv
177.914 181.108 li
177.466 181.304 177.004 181.458 176.528 181.542 cv
176.052 181.626 175.562 181.682 175.086 181.682 cv
173.854 181.682 172.888 181.332 172.174 180.632 cv
171.46 179.932 171.11 178.966 171.11 177.748 cv
171.11 176.502 171.446 175.508 172.118 174.766 cv
172.79 174.038 173.714 173.66 174.862 173.66 cv
175.898 173.66 176.71 173.996 177.312 174.654 cv
177.9 175.326 178.208 176.222 178.208 177.356 cv
176.948 176.992 mo
176.934 176.306 176.738 175.76 176.374 175.34 cv
175.996 174.934 175.492 174.724 174.876 174.724 cv
174.176 174.724 173.616 174.934 173.196 175.326 cv
172.776 175.718 172.524 176.278 172.468 176.992 cv
176.948 176.992 li
ef
181.052 177.678 mo
181.052 178.602 181.234 179.33 181.612 179.862 cv
181.99 180.394 182.522 180.646 183.194 180.646 cv
183.852 180.646 184.37 180.394 184.762 179.862 cv
185.14 179.33 185.336 178.602 185.336 177.678 cv
185.336 176.754 185.14 176.04 184.762 175.508 cv
184.37 174.976 183.852 174.71 183.194 174.71 cv
182.522 174.71 181.99 174.976 181.612 175.508 cv
181.234 176.04 181.052 176.754 181.052 177.678 cv
185.336 180.352 mo
185.07 180.814 184.734 181.15 184.328 181.36 cv
183.922 181.57 183.446 181.682 182.886 181.682 cv
181.962 181.682 181.206 181.318 180.618 180.59 cv
180.03 179.862 179.75 178.882 179.75 177.678 cv
179.75 176.474 180.03 175.508 180.618 174.766 cv
181.206 174.038 181.962 173.66 182.886 173.66 cv
183.446 173.66 183.922 173.772 184.328 173.996 cv
184.734 174.22 185.07 174.556 185.336 175.004 cv
185.336 173.842 li
186.596 173.842 li
186.596 184.398 li
185.336 184.398 li
185.336 180.352 li
ef
189.05 178.476 mo
189.05 173.842 li
190.31 173.842 li
190.31 178.434 li
190.31 179.162 190.45 179.694 190.73 180.058 cv
191.01 180.422 191.43 180.604 192.004 180.604 cv
192.676 180.604 193.222 180.394 193.614 179.96 cv
194.006 179.526 194.202 178.938 194.202 178.182 cv
194.202 173.842 li
195.462 173.842 li
195.462 181.5 li
194.202 181.5 li
194.202 180.324 li
193.894 180.8 193.53 181.136 193.138 181.36 cv
192.732 181.57 192.27 181.682 191.738 181.682 cv
190.856 181.682 190.184 181.416 189.736 180.87 cv
189.274 180.338 189.05 179.54 189.05 178.476 cv
192.214 173.66 mo
192.214 173.66 li
ef
204.608 177.356 mo
204.608 177.972 li
198.826 177.972 li
198.882 178.84 199.134 179.512 199.61 179.96 cv
200.072 180.408 200.716 180.632 201.556 180.632 cv
202.032 180.632 202.508 180.576 202.956 180.464 cv
203.404 180.352 203.866 180.17 204.314 179.918 cv
204.314 181.108 li
203.866 181.304 203.404 181.458 202.928 181.542 cv
202.452 181.626 201.962 181.682 201.486 181.682 cv
200.254 181.682 199.288 181.332 198.574 180.632 cv
197.86 179.932 197.51 178.966 197.51 177.748 cv
197.51 176.502 197.846 175.508 198.518 174.766 cv
199.19 174.038 200.114 173.66 201.262 173.66 cv
202.298 173.66 203.11 173.996 203.712 174.654 cv
204.3 175.326 204.608 176.222 204.608 177.356 cv
203.348 176.992 mo
203.334 176.306 203.138 175.76 202.774 175.34 cv
202.396 174.934 201.892 174.724 201.276 174.724 cv
200.576 174.724 200.016 174.934 199.596 175.326 cv
199.176 175.718 198.924 176.278 198.868 176.992 cv
203.348 176.992 li
ef
213.066 176.88 mo
213.066 181.5 li
211.806 181.5 li
211.806 176.922 li
211.806 176.194 211.652 175.662 211.372 175.298 cv
211.092 174.934 210.672 174.752 210.112 174.752 cv
209.426 174.752 208.894 174.976 208.502 175.41 cv
208.11 175.844 207.914 176.432 207.914 177.174 cv
207.914 181.5 li
206.654 181.5 li
206.654 173.842 li
207.914 173.842 li
207.914 175.032 li
208.208 174.584 208.558 174.234 208.978 174.01 cv
209.384 173.786 209.86 173.66 210.392 173.66 cv
211.26 173.66 211.932 173.94 212.38 174.486 cv
212.828 175.032 213.066 175.83 213.066 176.88 cv
ef
221.092 174.136 mo
221.092 175.312 li
220.728 175.116 220.378 174.976 220.014 174.878 cv
219.65 174.78 219.3 174.724 218.936 174.724 cv
218.124 174.724 217.48 174.99 217.032 175.508 cv
216.584 176.026 216.36 176.754 216.36 177.678 cv
216.36 178.616 216.584 179.344 217.032 179.862 cv
217.48 180.38 218.124 180.632 218.936 180.632 cv
219.3 180.632 219.65 180.59 220.014 180.492 cv
220.378 180.394 220.728 180.24 221.092 180.044 cv
221.092 181.206 li
220.728 181.374 220.364 181.5 220 181.57 cv
219.622 181.64 219.216 181.682 218.796 181.682 cv
217.648 181.682 216.724 181.332 216.052 180.604 cv
215.366 179.89 215.03 178.91 215.03 177.678 cv
215.03 176.432 215.366 175.452 216.052 174.738 cv
216.738 174.024 217.676 173.66 218.88 173.66 cv
219.272 173.66 219.65 173.702 220.014 173.786 cv
220.378 173.87 220.742 173.982 221.092 174.136 cv
ef
226.448 182.2 mo
226.084 183.096 225.734 183.698 225.398 183.978 cv
225.062 184.258 224.614 184.398 224.054 184.398 cv
223.046 184.398 li
223.046 183.348 li
223.788 183.348 li
224.124 183.348 224.39 183.264 224.586 183.096 cv
224.782 182.928 224.992 182.55 225.23 181.934 cv
225.454 181.374 li
222.36 173.842 li
223.69 173.842 li
226.084 179.834 li
228.478 173.842 li
229.808 173.842 li
226.448 182.2 li
ef
53.907 133.178 mo
50.407 133.178 li
f
53.907 133.178 mo
50.407 133.178 li
@
29.112 129.244 mo
28.398 129.244 27.866 129.594 27.502 130.294 cv
27.138 130.994 26.97 132.044 26.97 133.444 cv
26.97 134.844 27.138 135.894 27.502 136.594 cv
27.866 137.294 28.398 137.644 29.112 137.644 cv
29.826 137.644 30.358 137.294 30.722 136.594 cv
31.072 135.894 31.254 134.844 31.254 133.444 cv
31.254 132.044 31.072 130.994 30.722 130.294 cv
30.358 129.594 29.826 129.244 29.112 129.244 cv
29.112 128.152 mo
30.246 128.152 31.114 128.614 31.73 129.51 cv
32.332 130.42 32.64 131.736 32.64 133.444 cv
32.64 135.166 32.332 136.482 31.73 137.378 cv
31.114 138.274 30.246 138.722 29.112 138.722 cv
27.964 138.722 27.082 138.274 26.48 137.378 cv
25.878 136.482 25.584 135.166 25.584 133.444 cv
25.584 131.736 25.878 130.42 26.48 129.51 cv
27.082 128.614 27.964 128.152 29.112 128.152 cv
ef
35.038 138.54 mo
36.48 138.54 li
36.48 136.804 li
35.038 136.804 li
cp
f
39.716 137.378 mo
41.97 137.378 li
41.97 129.594 li
39.52 130.084 li
39.52 128.824 li
41.956 128.334 li
43.342 128.334 li
43.342 137.378 li
45.596 137.378 li
45.596 138.54 li
39.716 138.54 li
39.716 137.378 li
ef
53.907 107.027 mo
50.407 107.027 li
f
53.907 107.027 mo
50.407 107.027 li
@
29.112 103.084 mo
28.398 103.084 27.866 103.434 27.502 104.134 cv
27.138 104.834 26.97 105.884 26.97 107.284 cv
26.97 108.684 27.138 109.734 27.502 110.434 cv
27.866 111.134 28.398 111.484 29.112 111.484 cv
29.826 111.484 30.358 111.134 30.722 110.434 cv
31.072 109.734 31.254 108.684 31.254 107.284 cv
31.254 105.884 31.072 104.834 30.722 104.134 cv
30.358 103.434 29.826 103.084 29.112 103.084 cv
29.112 101.992 mo
30.246 101.992 31.114 102.454 31.73 103.35 cv
32.332 104.26 32.64 105.576 32.64 107.284 cv
32.64 109.006 32.332 110.322 31.73 111.218 cv
31.114 112.114 30.246 112.562 29.112 112.562 cv
27.964 112.562 27.082 112.114 26.48 111.218 cv
25.878 110.322 25.584 109.006 25.584 107.284 cv
25.584 105.576 25.878 104.26 26.48 103.35 cv
27.082 102.454 27.964 101.992 29.112 101.992 cv
ef
35.038 112.38 mo
36.48 112.38 li
36.48 110.644 li
35.038 110.644 li
cp
f
40.668 111.218 mo
45.484 111.218 li
45.484 112.38 li
39.002 112.38 li
39.002 111.218 li
39.52 110.686 40.234 109.958 41.144 109.034 cv
42.04 108.124 42.614 107.536 42.852 107.27 cv
43.3 106.78 43.608 106.36 43.776 106.01 cv
43.944 105.674 44.042 105.324 44.042 104.988 cv
44.042 104.456 43.846 104.008 43.468 103.672 cv
43.09 103.336 42.6 103.154 41.984 103.154 cv
41.55 103.154 41.088 103.238 40.612 103.378 cv
40.136 103.532 39.618 103.756 39.072 104.064 cv
39.072 102.664 li
39.632 102.44 40.15 102.272 40.626 102.16 cv
41.102 102.048 41.55 101.992 41.956 101.992 cv
43.006 101.992 43.846 102.258 44.476 102.79 cv
45.106 103.322 45.428 104.022 45.428 104.904 cv
45.428 105.324 45.344 105.73 45.19 106.094 cv
45.036 106.472 44.756 106.92 44.336 107.424 cv
44.224 107.564 43.86 107.942 43.244 108.572 cv
42.628 109.202 41.774 110.084 40.668 111.218 cv
ef
53.907 80.876 mo
50.407 80.876 li
f
53.907 80.876 mo
50.407 80.876 li
@
29.112 76.924 mo
28.398 76.924 27.866 77.274 27.502 77.974 cv
27.138 78.674 26.97 79.724 26.97 81.124 cv
26.97 82.524 27.138 83.574 27.502 84.274 cv
27.866 84.974 28.398 85.324 29.112 85.324 cv
29.826 85.324 30.358 84.974 30.722 84.274 cv
31.072 83.574 31.254 82.524 31.254 81.124 cv
31.254 79.724 31.072 78.674 30.722 77.974 cv
30.358 77.274 29.826 76.924 29.112 76.924 cv
29.112 75.832 mo
30.246 75.832 31.114 76.294 31.73 77.19 cv
32.332 78.1 32.64 79.416 32.64 81.124 cv
32.64 82.846 32.332 84.162 31.73 85.058 cv
31.114 85.954 30.246 86.402 29.112 86.402 cv
27.964 86.402 27.082 85.954 26.48 85.058 cv
25.878 84.162 25.584 82.846 25.584 81.124 cv
25.584 79.416 25.878 78.1 26.48 77.19 cv
27.082 76.294 27.964 75.832 29.112 75.832 cv
ef
35.038 86.22 mo
36.48 86.22 li
36.48 84.484 li
35.038 84.484 li
cp
f
43.664 80.718 mo
44.322 80.858 44.84 81.152 45.204 81.6 cv
45.568 82.048 45.764 82.608 45.764 83.252 cv
45.764 84.26 45.414 85.044 44.728 85.59 cv
44.028 86.136 43.048 86.402 41.774 86.402 cv
41.34 86.402 40.892 86.36 40.444 86.276 cv
39.996 86.206 39.52 86.08 39.044 85.912 cv
39.044 84.582 li
39.422 84.806 39.842 84.974 40.304 85.086 cv
40.752 85.198 41.228 85.254 41.732 85.254 cv
42.6 85.254 43.258 85.086 43.706 84.75 cv
44.154 84.414 44.392 83.91 44.392 83.252 cv
44.392 82.664 44.182 82.188 43.762 81.852 cv
43.342 81.516 42.754 81.334 41.998 81.334 cv
40.808 81.334 li
40.808 80.2 li
42.054 80.2 li
42.726 80.2 43.244 80.074 43.608 79.794 cv
43.972 79.528 44.154 79.136 44.154 78.618 cv
44.154 78.1 43.958 77.694 43.594 77.414 cv
43.216 77.134 42.684 76.994 41.998 76.994 cv
41.62 76.994 41.214 77.036 40.78 77.12 cv
40.346 77.204 39.87 77.33 39.352 77.498 cv
39.352 76.266 li
39.87 76.126 40.36 76.014 40.822 75.944 cv
41.27 75.874 41.704 75.832 42.124 75.832 cv
43.16 75.832 43.986 76.07 44.602 76.546 cv
45.218 77.022 45.526 77.666 45.526 78.478 cv
45.526 79.038 45.358 79.514 45.036 79.906 cv
44.714 80.298 44.252 80.578 43.664 80.718 cv
ef
53.907 54.725 mo
50.407 54.725 li
f
53.907 54.725 mo
50.407 54.725 li
@
29.112 50.764 mo
28.398 50.764 27.866 51.114 27.502 51.814 cv
27.138 52.514 26.97 53.564 26.97 54.964 cv
26.97 56.364 27.138 57.414 27.502 58.114 cv
27.866 58.814 28.398 59.164 29.112 59.164 cv
29.826 59.164 30.358 58.814 30.722 58.114 cv
31.072 57.414 31.254 56.364 31.254 54.964 cv
31.254 53.564 31.072 52.514 30.722 51.814 cv
30.358 51.114 29.826 50.764 29.112 50.764 cv
29.112 49.672 mo
30.246 49.672 31.114 50.134 31.73 51.03 cv
32.332 51.94 32.64 53.256 32.64 54.964 cv
32.64 56.686 32.332 58.002 31.73 58.898 cv
31.114 59.794 30.246 60.242 29.112 60.242 cv
27.964 60.242 27.082 59.794 26.48 58.898 cv
25.878 58.002 25.584 56.686 25.584 54.964 cv
25.584 53.256 25.878 51.94 26.48 51.03 cv
27.082 50.134 27.964 49.672 29.112 49.672 cv
ef
35.038 60.06 mo
36.48 60.06 li
36.48 58.324 li
35.038 58.324 li
cp
f
43.272 51.058 mo
39.786 56.504 li
43.272 56.504 li
43.272 51.058 li
42.908 49.854 mo
44.644 49.854 li
44.644 56.504 li
46.1 56.504 li
46.1 57.652 li
44.644 57.652 li
44.644 60.06 li
43.272 60.06 li
43.272 57.652 li
38.666 57.652 li
38.666 56.322 li
42.908 49.854 li
ef
53.907 28.574 mo
50.407 28.574 li
f
53.907 28.574 mo
50.407 28.574 li
@
29.112 24.604 mo
28.398 24.604 27.866 24.954 27.502 25.654 cv
27.138 26.354 26.97 27.404 26.97 28.804 cv
26.97 30.204 27.138 31.254 27.502 31.954 cv
27.866 32.654 28.398 33.004 29.112 33.004 cv
29.826 33.004 30.358 32.654 30.722 31.954 cv
31.072 31.254 31.254 30.204 31.254 28.804 cv
31.254 27.404 31.072 26.354 30.722 25.654 cv
30.358 24.954 29.826 24.604 29.112 24.604 cv
29.112 23.512 mo
30.246 23.512 31.114 23.974 31.73 24.87 cv
32.332 25.78 32.64 27.096 32.64 28.804 cv
32.64 30.526 32.332 31.842 31.73 32.738 cv
31.114 33.634 30.246 34.082 29.112 34.082 cv
27.964 34.082 27.082 33.634 26.48 32.738 cv
25.878 31.842 25.584 30.526 25.584 28.804 cv
25.584 27.096 25.878 25.78 26.48 24.87 cv
27.082 23.974 27.964 23.512 29.112 23.512 cv
ef
35.038 33.9 mo
36.48 33.9 li
36.48 32.164 li
35.038 32.164 li
cp
f
39.492 23.694 mo
44.91 23.694 li
44.91 24.856 li
40.752 24.856 li
40.752 27.362 li
40.948 27.292 41.158 27.236 41.354 27.208 cv
41.55 27.18 41.76 27.152 41.956 27.152 cv
43.09 27.152 43.986 27.474 44.658 28.09 cv
45.33 28.72 45.666 29.56 45.666 30.624 cv
45.666 31.73 45.316 32.584 44.63 33.186 cv
43.944 33.788 42.978 34.082 41.746 34.082 cv
41.312 34.082 40.878 34.04 40.43 33.984 cv
39.982 33.914 39.534 33.816 39.058 33.662 cv
39.058 32.276 li
39.464 32.5 39.884 32.668 40.332 32.78 cv
40.766 32.892 41.228 32.934 41.718 32.934 cv
42.502 32.934 43.132 32.738 43.594 32.318 cv
44.042 31.898 44.28 31.338 44.28 30.624 cv
44.28 29.924 44.042 29.364 43.594 28.944 cv
43.132 28.524 42.502 28.314 41.718 28.314 cv
41.354 28.314 40.976 28.356 40.612 28.44 cv
40.248 28.524 39.87 28.65 39.492 28.818 cv
39.492 23.694 li
ef
7.494 105.688 mo
7.494 97.064 li
8.656 97.064 li
8.656 100.69 li
17.7 100.69 li
17.7 102.076 li
8.656 102.076 li
8.656 105.688 li
7.494 105.688 li
ef
10.042 95.824 mo
10.042 94.564 li
17.7 94.564 li
17.7 95.824 li
10.042 95.824 li
7.06 95.824 mo
8.656 95.824 mo
7.06 95.824 li
7.06 94.564 li
8.656 94.564 li
cp
ef
11.512 85.9 mo
10.952 85.592 10.546 85.214 10.266 84.78 cv
10 84.346 9.86 83.828 9.86 83.226 cv
9.86 82.442 10.14 81.826 10.7 81.392 cv
11.26 80.958 12.058 80.734 13.08 80.734 cv
17.7 80.734 li
17.7 81.994 li
13.122 81.994 li
12.394 81.994 11.848 82.134 11.484 82.386 cv
11.134 82.652 10.952 83.044 10.952 83.576 cv
10.952 84.234 11.176 84.752 11.61 85.13 cv
12.044 85.508 12.632 85.69 13.374 85.69 cv
17.7 85.69 li
17.7 86.95 li
13.122 86.95 li
12.394 86.95 11.848 87.09 11.484 87.342 cv
11.134 87.608 10.952 88.014 10.952 88.546 cv
10.952 89.19 11.176 89.708 11.61 90.086 cv
12.044 90.464 12.632 90.646 13.374 90.646 cv
17.7 90.646 li
17.7 91.906 li
10.042 91.906 li
10.042 90.646 li
11.232 90.646 li
10.77 90.366 10.42 90.016 10.196 89.61 cv
9.972 89.218 9.86 88.742 9.86 88.182 cv
9.86 87.622 10 87.16 10.28 86.768 cv
10.56 86.376 10.98 86.096 11.512 85.9 cv
ef
13.556 71.752 mo
14.172 71.752 li
14.172 77.534 li
15.04 77.478 15.712 77.226 16.16 76.75 cv
16.608 76.288 16.832 75.644 16.832 74.804 cv
16.832 74.328 16.776 73.852 16.664 73.404 cv
16.552 72.956 16.37 72.494 16.118 72.046 cv
17.308 72.046 li
17.504 72.494 17.658 72.956 17.742 73.432 cv
17.826 73.908 17.882 74.398 17.882 74.874 cv
17.882 76.106 17.532 77.072 16.832 77.786 cv
16.132 78.5 15.166 78.85 13.948 78.85 cv
12.702 78.85 11.708 78.514 10.966 77.842 cv
10.238 77.17 9.86 76.246 9.86 75.098 cv
9.86 74.062 10.196 73.25 10.854 72.648 cv
11.526 72.06 12.422 71.752 13.556 71.752 cv
13.192 73.012 mo
12.506 73.026 11.96 73.222 11.54 73.586 cv
11.134 73.964 10.924 74.468 10.924 75.084 cv
10.924 75.784 11.134 76.344 11.526 76.764 cv
11.918 77.184 12.478 77.436 13.192 77.492 cv
13.192 73.012 li
ef
7.074 62.2 mo
8.138 62.816 9.174 63.264 10.196 63.558 cv
11.218 63.866 12.254 64.006 13.304 64.006 cv
14.368 64.006 15.404 63.866 16.426 63.558 cv
17.462 63.264 18.484 62.816 19.534 62.2 cv
19.534 63.292 li
18.456 63.978 17.42 64.496 16.384 64.832 cv
15.348 65.168 14.326 65.336 13.304 65.336 cv
12.296 65.336 11.274 65.168 10.238 64.832 cv
9.202 64.496 8.152 63.992 7.074 63.292 cv
7.074 62.2 li
ef
10.266 54.818 mo
11.456 54.818 li
11.288 55.182 11.148 55.546 11.05 55.924 cv
10.966 56.316 10.91 56.708 10.91 57.114 cv
10.91 57.744 11.008 58.22 11.204 58.528 cv
11.4 58.836 11.68 58.99 12.058 58.99 cv
12.352 58.99 12.576 58.878 12.744 58.654 cv
12.912 58.43 13.08 57.982 13.22 57.31 cv
13.318 56.876 li
13.514 55.98 13.794 55.35 14.13 54.972 cv
14.48 54.608 14.97 54.412 15.586 54.412 cv
16.3 54.412 16.86 54.692 17.266 55.252 cv
17.686 55.812 17.882 56.596 17.882 57.576 cv
17.882 57.996 17.84 58.416 17.77 58.864 cv
17.7 59.312 17.588 59.774 17.42 60.264 cv
16.118 60.264 li
16.37 59.802 16.552 59.34 16.664 58.892 cv
16.79 58.444 16.846 57.996 16.846 57.548 cv
16.846 56.96 16.748 56.498 16.552 56.176 cv
16.356 55.868 16.062 55.7 15.684 55.7 cv
15.348 55.7 15.082 55.826 14.9 56.05 cv
14.718 56.274 14.536 56.778 14.368 57.562 cv
14.27 57.996 li
14.102 58.78 13.85 59.354 13.514 59.69 cv
13.178 60.04 12.716 60.208 12.114 60.208 cv
11.4 60.208 10.84 59.956 10.448 59.452 cv
10.056 58.948 9.86 58.22 9.86 57.268 cv
9.86 56.806 9.902 56.372 9.972 55.952 cv
10.042 55.546 10.14 55.168 10.266 54.818 cv
ef
7.074 52.58 mo
7.074 51.488 li
8.152 50.816 9.202 50.298 10.238 49.962 cv
11.274 49.626 12.296 49.444 13.304 49.444 cv
14.326 49.444 15.348 49.626 16.384 49.962 cv
17.42 50.298 18.456 50.816 19.534 51.488 cv
19.534 52.58 li
18.484 51.978 17.462 51.53 16.426 51.222 cv
15.404 50.928 14.368 50.774 13.304 50.774 cv
12.254 50.774 11.218 50.928 10.196 51.222 cv
9.174 51.53 8.138 51.978 7.074 52.58 cv
ef
1.5 lw
2 lc
66.588 126.731 mo
94.77 121.831 li
122.952 125.37 li
151.133 121.068 li
179.315 118.002 li
207.497 117.936 li
235.679 118.111 li
263.861 127.966 li
292.043 126.536 li
320.224 118.603 li
.905547 .71957 0 0 cmyk
@
63.588 129.731 mo
69.588 129.731 li
69.588 123.731 li
63.588 123.731 li
cp
f
1 lw
0 lc
0 lj
63.588 129.731 mo
69.588 129.731 li
69.588 123.731 li
63.588 123.731 li
cp
@
91.77 124.832 mo
97.77 124.832 li
97.77 118.832 li
91.77 118.832 li
cp
f
91.77 124.832 mo
97.77 124.832 li
97.77 118.832 li
91.77 118.832 li
cp
@
119.952 128.371 mo
125.952 128.371 li
125.952 122.371 li
119.952 122.371 li
cp
f
119.952 128.371 mo
125.952 128.371 li
125.952 122.371 li
119.952 122.371 li
cp
@
148.134 124.068 mo
154.134 124.068 li
154.134 118.068 li
148.134 118.068 li
cp
f
148.134 124.068 mo
154.134 124.068 li
154.134 118.068 li
148.134 118.068 li
cp
@
176.316 121.002 mo
182.316 121.002 li
182.316 115.002 li
176.316 115.002 li
cp
f
176.316 121.002 mo
182.316 121.002 li
182.316 115.002 li
176.316 115.002 li
cp
@
204.497 120.937 mo
210.497 120.937 li
210.497 114.937 li
204.497 114.937 li
cp
f
204.497 120.937 mo
210.497 120.937 li
210.497 114.937 li
204.497 114.937 li
cp
@
232.679 121.112 mo
238.679 121.112 li
238.679 115.112 li
232.679 115.112 li
cp
f
232.679 121.112 mo
238.679 121.112 li
238.679 115.112 li
232.679 115.112 li
cp
@
260.861 130.966 mo
266.861 130.966 li
266.861 124.966 li
260.861 124.966 li
cp
f
260.861 130.966 mo
266.861 130.966 li
266.861 124.966 li
260.861 124.966 li
cp
@
289.043 129.536 mo
295.043 129.536 li
295.043 123.536 li
289.043 123.536 li
cp
f
289.043 129.536 mo
295.043 129.536 li
295.043 123.536 li
289.043 123.536 li
cp
@
317.225 121.603 mo
323.225 121.603 li
323.225 115.603 li
317.225 115.603 li
cp
f
317.225 121.603 mo
323.225 121.603 li
323.225 115.603 li
317.225 115.603 li
cp
@
1.5 lw
2 lc
1 lj
66.588 88.088 mo
94.77 92.697 li
122.952 83.59 li
151.133 88.356 li
179.315 95.021 li
207.497 92.266 li
235.679 95.028 li
263.861 93.517 li
292.043 95.035 li
320.224 88.356 li
@
66.588 91.088 mo
67.384 91.088 68.147 90.772 68.709 90.209 cv
69.272 89.647 69.588 88.884 69.588 88.088 cv
69.588 87.292 69.272 86.529 68.709 85.967 cv
68.147 85.404 67.384 85.088 66.588 85.088 cv
65.792 85.088 65.029 85.404 64.467 85.967 cv
63.904 86.529 63.588 87.292 63.588 88.088 cv
63.588 88.884 63.904 89.647 64.467 90.209 cv
65.029 90.772 65.792 91.088 66.588 91.088 cv
cp
f
1 lw
0 lc
66.588 91.088 mo
67.384 91.088 68.147 90.772 68.709 90.209 cv
69.272 89.647 69.588 88.884 69.588 88.088 cv
69.588 87.292 69.272 86.529 68.709 85.967 cv
68.147 85.404 67.384 85.088 66.588 85.088 cv
65.792 85.088 65.029 85.404 64.467 85.967 cv
63.904 86.529 63.588 87.292 63.588 88.088 cv
63.588 88.884 63.904 89.647 64.467 90.209 cv
65.029 90.772 65.792 91.088 66.588 91.088 cv
cp
@
94.77 95.697 mo
95.566 95.697 96.329 95.381 96.891 94.818 cv
97.454 94.256 97.77 93.493 97.77 92.697 cv
97.77 91.901 97.454 91.138 96.891 90.576 cv
96.329 90.013 95.566 89.697 94.77 89.697 cv
93.974 89.697 93.211 90.013 92.649 90.576 cv
92.086 91.138 91.77 91.901 91.77 92.697 cv
91.77 93.493 92.086 94.256 92.649 94.818 cv
93.211 95.381 93.974 95.697 94.77 95.697 cv
cp
f
94.77 95.697 mo
95.566 95.697 96.329 95.381 96.891 94.818 cv
97.454 94.256 97.77 93.493 97.77 92.697 cv
97.77 91.901 97.454 91.138 96.891 90.576 cv
96.329 90.013 95.566 89.697 94.77 89.697 cv
93.974 89.697 93.211 90.013 92.649 90.576 cv
92.086 91.138 91.77 91.901 91.77 92.697 cv
91.77 93.493 92.086 94.256 92.649 94.818 cv
93.211 95.381 93.974 95.697 94.77 95.697 cv
cp
@
122.952 86.59 mo
123.748 86.59 124.511 86.274 125.073 85.711 cv
125.636 85.149 125.952 84.386 125.952 83.59 cv
125.952 82.794 125.636 82.031 125.073 81.469 cv
124.511 80.906 123.748 80.59 122.952 80.59 cv
122.156 80.59 121.393 80.906 120.831 81.469 cv
120.268 82.031 119.952 82.794 119.952 83.59 cv
119.952 84.386 120.268 85.149 120.831 85.711 cv
121.393 86.274 122.156 86.59 122.952 86.59 cv
cp
f
122.952 86.59 mo
123.748 86.59 124.511 86.274 125.073 85.711 cv
125.636 85.149 125.952 84.386 125.952 83.59 cv
125.952 82.794 125.636 82.031 125.073 81.469 cv
124.511 80.906 123.748 80.59 122.952 80.59 cv
122.156 80.59 121.393 80.906 120.831 81.469 cv
120.268 82.031 119.952 82.794 119.952 83.59 cv
119.952 84.386 120.268 85.149 120.831 85.711 cv
121.393 86.274 122.156 86.59 122.952 86.59 cv
cp
@
151.134 91.356 mo
151.93 91.356 152.693 91.04 153.255 90.477 cv
153.818 89.915 154.134 89.152 154.134 88.356 cv
154.134 87.56 153.818 86.797 153.255 86.235 cv
152.693 85.672 151.93 85.356 151.134 85.356 cv
150.338 85.356 149.575 85.672 149.013 86.235 cv
148.45 86.797 148.134 87.56 148.134 88.356 cv
148.134 89.152 148.45 89.915 149.013 90.477 cv
149.575 91.04 150.338 91.356 151.134 91.356 cv
cp
f
151.134 91.356 mo
151.93 91.356 152.693 91.04 153.255 90.477 cv
153.818 89.915 154.134 89.152 154.134 88.356 cv
154.134 87.56 153.818 86.797 153.255 86.235 cv
152.693 85.672 151.93 85.356 151.134 85.356 cv
150.338 85.356 149.575 85.672 149.013 86.235 cv
148.45 86.797 148.134 87.56 148.134 88.356 cv
148.134 89.152 148.45 89.915 149.013 90.477 cv
149.575 91.04 150.338 91.356 151.134 91.356 cv
cp
@
179.316 98.022 mo
180.112 98.022 180.875 97.706 181.437 97.143 cv
182 96.581 182.316 95.818 182.316 95.022 cv
182.316 94.226 182 93.463 181.437 92.901 cv
180.875 92.338 180.112 92.022 179.316 92.022 cv
178.52 92.022 177.757 92.338 177.195 92.901 cv
176.632 93.463 176.316 94.226 176.316 95.022 cv
176.316 95.818 176.632 96.581 177.195 97.143 cv
177.757 97.706 178.52 98.022 179.316 98.022 cv
cp
f
179.316 98.022 mo
180.112 98.022 180.875 97.706 181.437 97.143 cv
182 96.581 182.316 95.818 182.316 95.022 cv
182.316 94.226 182 93.463 181.437 92.901 cv
180.875 92.338 180.112 92.022 179.316 92.022 cv
178.52 92.022 177.757 92.338 177.195 92.901 cv
176.632 93.463 176.316 94.226 176.316 95.022 cv
176.316 95.818 176.632 96.581 177.195 97.143 cv
177.757 97.706 178.52 98.022 179.316 98.022 cv
cp
@
207.497 95.266 mo
208.293 95.266 209.056 94.95 209.618 94.387 cv
210.181 93.825 210.497 93.062 210.497 92.266 cv
210.497 91.47 210.181 90.707 209.618 90.145 cv
209.056 89.582 208.293 89.266 207.497 89.266 cv
206.701 89.266 205.938 89.582 205.376 90.145 cv
204.813 90.707 204.497 91.47 204.497 92.266 cv
204.497 93.062 204.813 93.825 205.376 94.387 cv
205.938 94.95 206.701 95.266 207.497 95.266 cv
cp
f
207.497 95.266 mo
208.293 95.266 209.056 94.95 209.618 94.387 cv
210.181 93.825 210.497 93.062 210.497 92.266 cv
210.497 91.47 210.181 90.707 209.618 90.145 cv
209.056 89.582 208.293 89.266 207.497 89.266 cv
206.701 89.266 205.938 89.582 205.376 90.145 cv
204.813 90.707 204.497 91.47 204.497 92.266 cv
204.497 93.062 204.813 93.825 205.376 94.387 cv
205.938 94.95 206.701 95.266 207.497 95.266 cv
cp
@
235.679 98.028 mo
236.475 98.028 237.238 97.712 237.8 97.149 cv
238.363 96.587 238.679 95.824 238.679 95.028 cv
238.679 94.232 238.363 93.469 237.8 92.907 cv
237.238 92.344 236.475 92.028 235.679 92.028 cv
234.883 92.028 234.12 92.344 233.558 92.907 cv
232.995 93.469 232.679 94.232 232.679 95.028 cv
232.679 95.824 232.995 96.587 233.558 97.149 cv
234.12 97.712 234.883 98.028 235.679 98.028 cv
cp
f
235.679 98.028 mo
236.475 98.028 237.238 97.712 237.8 97.149 cv
238.363 96.587 238.679 95.824 238.679 95.028 cv
238.679 94.232 238.363 93.469 237.8 92.907 cv
237.238 92.344 236.475 92.028 235.679 92.028 cv
234.883 92.028 234.12 92.344 233.558 92.907 cv
232.995 93.469 232.679 94.232 232.679 95.028 cv
232.679 95.824 232.995 96.587 233.558 97.149 cv
234.12 97.712 234.883 98.028 235.679 98.028 cv
cp
@
263.861 96.517 mo
264.657 96.517 265.42 96.201 265.982 95.638 cv
266.545 95.076 266.861 94.313 266.861 93.517 cv
266.861 92.721 266.545 91.958 265.982 91.396 cv
265.42 90.833 264.657 90.517 263.861 90.517 cv
263.065 90.517 262.302 90.833 261.74 91.396 cv
261.177 91.958 260.861 92.721 260.861 93.517 cv
260.861 94.313 261.177 95.076 261.74 95.638 cv
262.302 96.201 263.065 96.517 263.861 96.517 cv
cp
f
263.861 96.517 mo
264.657 96.517 265.42 96.201 265.982 95.638 cv
266.545 95.076 266.861 94.313 266.861 93.517 cv
266.861 92.721 266.545 91.958 265.982 91.396 cv
265.42 90.833 264.657 90.517 263.861 90.517 cv
263.065 90.517 262.302 90.833 261.74 91.396 cv
261.177 91.958 260.861 92.721 260.861 93.517 cv
260.861 94.313 261.177 95.076 261.74 95.638 cv
262.302 96.201 263.065 96.517 263.861 96.517 cv
cp
@
292.043 98.035 mo
292.839 98.035 293.602 97.719 294.164 97.156 cv
294.727 96.594 295.043 95.831 295.043 95.035 cv
295.043 94.239 294.727 93.476 294.164 92.914 cv
293.602 92.351 292.839 92.035 292.043 92.035 cv
291.247 92.035 290.484 92.351 289.922 92.914 cv
289.359 93.476 289.043 94.239 289.043 95.035 cv
289.043 95.831 289.359 96.594 289.922 97.156 cv
290.484 97.719 291.247 98.035 292.043 98.035 cv
cp
f
292.043 98.035 mo
292.839 98.035 293.602 97.719 294.164 97.156 cv
294.727 96.594 295.043 95.831 295.043 95.035 cv
295.043 94.239 294.727 93.476 294.164 92.914 cv
293.602 92.351 292.839 92.035 292.043 92.035 cv
291.247 92.035 290.484 92.351 289.922 92.914 cv
289.359 93.476 289.043 94.239 289.043 95.035 cv
289.043 95.831 289.359 96.594 289.922 97.156 cv
290.484 97.719 291.247 98.035 292.043 98.035 cv
cp
@
320.225 91.356 mo
321.021 91.356 321.784 91.04 322.346 90.477 cv
322.909 89.915 323.225 89.152 323.225 88.356 cv
323.225 87.56 322.909 86.797 322.346 86.235 cv
321.784 85.672 321.021 85.356 320.225 85.356 cv
319.429 85.356 318.666 85.672 318.104 86.235 cv
317.541 86.797 317.225 87.56 317.225 88.356 cv
317.225 89.152 317.541 89.915 318.104 90.477 cv
318.666 91.04 319.429 91.356 320.225 91.356 cv
cp
f
320.225 91.356 mo
321.021 91.356 321.784 91.04 322.346 90.477 cv
322.909 89.915 323.225 89.152 323.225 88.356 cv
323.225 87.56 322.909 86.797 322.346 86.235 cv
321.784 85.672 321.021 85.356 320.225 85.356 cv
319.429 85.356 318.666 85.672 318.104 86.235 cv
317.541 86.797 317.225 87.56 317.225 88.356 cv
317.225 89.152 317.541 89.915 318.104 90.477 cv
318.666 91.04 319.429 91.356 320.225 91.356 cv
cp
@
1.5 lw
2 lc
66.588 106.467 mo
94.77 101.382 li
122.952 103.538 li
151.133 104.923 li
179.315 108.797 li
207.497 102.139 li
235.679 103.627 li
263.861 110.733 li
292.043 104.923 li
320.224 103.538 li
0 .9617 .904814 0 cmyk
@
63.588 109.467 mo
69.588 109.467 li
69.588 103.467 li
63.588 103.467 li
cp
f
1 lw
0 lc
0 lj
63.588 109.467 mo
69.588 109.467 li
69.588 103.467 li
63.588 103.467 li
cp
@
91.77 104.382 mo
97.77 104.382 li
97.77 98.382 li
91.77 98.382 li
cp
f
91.77 104.382 mo
97.77 104.382 li
97.77 98.382 li
91.77 98.382 li
cp
@
119.952 106.538 mo
125.952 106.538 li
125.952 100.538 li
119.952 100.538 li
cp
f
119.952 106.538 mo
125.952 106.538 li
125.952 100.538 li
119.952 100.538 li
cp
@
148.134 107.924 mo
154.134 107.924 li
154.134 101.924 li
148.134 101.924 li
cp
f
148.134 107.924 mo
154.134 107.924 li
154.134 101.924 li
148.134 101.924 li
cp
@
176.316 111.798 mo
182.316 111.798 li
182.316 105.798 li
176.316 105.798 li
cp
f
176.316 111.798 mo
182.316 111.798 li
182.316 105.798 li
176.316 105.798 li
cp
@
204.497 105.139 mo
210.497 105.139 li
210.497 99.139 li
204.497 99.139 li
cp
f
204.497 105.139 mo
210.497 105.139 li
210.497 99.139 li
204.497 99.139 li
cp
@
232.679 106.627 mo
238.679 106.627 li
238.679 100.627 li
232.679 100.627 li
cp
f
232.679 106.627 mo
238.679 106.627 li
238.679 100.627 li
232.679 100.627 li
cp
@
260.861 113.733 mo
266.861 113.733 li
266.861 107.733 li
260.861 107.733 li
cp
f
260.861 113.733 mo
266.861 113.733 li
266.861 107.733 li
260.861 107.733 li
cp
@
289.043 107.924 mo
295.043 107.924 li
295.043 101.924 li
289.043 101.924 li
cp
f
289.043 107.924 mo
295.043 107.924 li
295.043 101.924 li
289.043 101.924 li
cp
@
317.225 106.538 mo
323.225 106.538 li
323.225 100.538 li
317.225 100.538 li
cp
f
317.225 106.538 mo
323.225 106.538 li
323.225 100.538 li
317.225 100.538 li
cp
@
1.5 lw
2 lc
1 lj
66.588 34.58 mo
94.77 50.464 li
122.952 52.132 li
151.133 54.141 li
179.315 54.87 li
207.497 48.255 li
235.679 44.276 li
263.861 51.816 li
292.043 47.16 li
320.224 45.855 li
@
66.588 37.58 mo
67.384 37.58 68.147 37.264 68.709 36.701 cv
69.272 36.139 69.588 35.376 69.588 34.58 cv
69.588 33.784 69.272 33.021 68.709 32.459 cv
68.147 31.896 67.384 31.58 66.588 31.58 cv
65.792 31.58 65.029 31.896 64.467 32.459 cv
63.904 33.021 63.588 33.784 63.588 34.58 cv
63.588 35.376 63.904 36.139 64.467 36.701 cv
65.029 37.264 65.792 37.58 66.588 37.58 cv
cp
f
1 lw
0 lc
66.588 37.58 mo
67.384 37.58 68.147 37.264 68.709 36.701 cv
69.272 36.139 69.588 35.376 69.588 34.58 cv
69.588 33.784 69.272 33.021 68.709 32.459 cv
68.147 31.896 67.384 31.58 66.588 31.58 cv
65.792 31.58 65.029 31.896 64.467 32.459 cv
63.904 33.021 63.588 33.784 63.588 34.58 cv
63.588 35.376 63.904 36.139 64.467 36.701 cv
65.029 37.264 65.792 37.58 66.588 37.58 cv
cp
@
94.77 53.464 mo
95.566 53.464 96.329 53.148 96.891 52.585 cv
97.454 52.023 97.77 51.26 97.77 50.464 cv
97.77 49.668 97.454 48.905 96.891 48.343 cv
96.329 47.78 95.566 47.464 94.77 47.464 cv
93.974 47.464 93.211 47.78 92.649 48.343 cv
92.086 48.905 91.77 49.668 91.77 50.464 cv
91.77 51.26 92.086 52.023 92.649 52.585 cv
93.211 53.148 93.974 53.464 94.77 53.464 cv
cp
f
94.77 53.464 mo
95.566 53.464 96.329 53.148 96.891 52.585 cv
97.454 52.023 97.77 51.26 97.77 50.464 cv
97.77 49.668 97.454 48.905 96.891 48.343 cv
96.329 47.78 95.566 47.464 94.77 47.464 cv
93.974 47.464 93.211 47.78 92.649 48.343 cv
92.086 48.905 91.77 49.668 91.77 50.464 cv
91.77 51.26 92.086 52.023 92.649 52.585 cv
93.211 53.148 93.974 53.464 94.77 53.464 cv
cp
@
122.952 55.132 mo
123.748 55.132 124.511 54.816 125.073 54.253 cv
125.636 53.691 125.952 52.928 125.952 52.132 cv
125.952 51.336 125.636 50.573 125.073 50.011 cv
124.511 49.448 123.748 49.132 122.952 49.132 cv
122.156 49.132 121.393 49.448 120.831 50.011 cv
120.268 50.573 119.952 51.336 119.952 52.132 cv
119.952 52.928 120.268 53.691 120.831 54.253 cv
121.393 54.816 122.156 55.132 122.952 55.132 cv
cp
f
122.952 55.132 mo
123.748 55.132 124.511 54.816 125.073 54.253 cv
125.636 53.691 125.952 52.928 125.952 52.132 cv
125.952 51.336 125.636 50.573 125.073 50.011 cv
124.511 49.448 123.748 49.132 122.952 49.132 cv
122.156 49.132 121.393 49.448 120.831 50.011 cv
120.268 50.573 119.952 51.336 119.952 52.132 cv
119.952 52.928 120.268 53.691 120.831 54.253 cv
121.393 54.816 122.156 55.132 122.952 55.132 cv
cp
@
151.134 57.14 mo
151.93 57.14 152.693 56.824 153.255 56.261 cv
153.818 55.699 154.134 54.936 154.134 54.14 cv
154.134 53.344 153.818 52.581 153.255 52.019 cv
152.693 51.456 151.93 51.14 151.134 51.14 cv
150.338 51.14 149.575 51.456 149.013 52.019 cv
148.45 52.581 148.134 53.344 148.134 54.14 cv
148.134 54.936 148.45 55.699 149.013 56.261 cv
149.575 56.824 150.338 57.14 151.134 57.14 cv
cp
f
151.134 57.14 mo
151.93 57.14 152.693 56.824 153.255 56.261 cv
153.818 55.699 154.134 54.936 154.134 54.14 cv
154.134 53.344 153.818 52.581 153.255 52.019 cv
152.693 51.456 151.93 51.14 151.134 51.14 cv
150.338 51.14 149.575 51.456 149.013 52.019 cv
148.45 52.581 148.134 53.344 148.134 54.14 cv
148.134 54.936 148.45 55.699 149.013 56.261 cv
149.575 56.824 150.338 57.14 151.134 57.14 cv
cp
@
179.316 57.87 mo
180.112 57.87 180.875 57.554 181.437 56.991 cv
182 56.429 182.316 55.666 182.316 54.87 cv
182.316 54.074 182 53.311 181.437 52.749 cv
180.875 52.186 180.112 51.87 179.316 51.87 cv
178.52 51.87 177.757 52.186 177.195 52.749 cv
176.632 53.311 176.316 54.074 176.316 54.87 cv
176.316 55.666 176.632 56.429 177.195 56.991 cv
177.757 57.554 178.52 57.87 179.316 57.87 cv
cp
f
179.316 57.87 mo
180.112 57.87 180.875 57.554 181.437 56.991 cv
182 56.429 182.316 55.666 182.316 54.87 cv
182.316 54.074 182 53.311 181.437 52.749 cv
180.875 52.186 180.112 51.87 179.316 51.87 cv
178.52 51.87 177.757 52.186 177.195 52.749 cv
176.632 53.311 176.316 54.074 176.316 54.87 cv
176.316 55.666 176.632 56.429 177.195 56.991 cv
177.757 57.554 178.52 57.87 179.316 57.87 cv
cp
@
207.497 51.255 mo
208.293 51.255 209.056 50.939 209.618 50.376 cv
210.181 49.814 210.497 49.051 210.497 48.255 cv
210.497 47.459 210.181 46.696 209.618 46.134 cv
209.056 45.571 208.293 45.255 207.497 45.255 cv
206.701 45.255 205.938 45.571 205.376 46.134 cv
204.813 46.696 204.497 47.459 204.497 48.255 cv
204.497 49.051 204.813 49.814 205.376 50.376 cv
205.938 50.939 206.701 51.255 207.497 51.255 cv
cp
f
207.497 51.255 mo
208.293 51.255 209.056 50.939 209.618 50.376 cv
210.181 49.814 210.497 49.051 210.497 48.255 cv
210.497 47.459 210.181 46.696 209.618 46.134 cv
209.056 45.571 208.293 45.255 207.497 45.255 cv
206.701 45.255 205.938 45.571 205.376 46.134 cv
204.813 46.696 204.497 47.459 204.497 48.255 cv
204.497 49.051 204.813 49.814 205.376 50.376 cv
205.938 50.939 206.701 51.255 207.497 51.255 cv
cp
@
235.679 47.276 mo
236.475 47.276 237.238 46.96 237.8 46.397 cv
238.363 45.835 238.679 45.072 238.679 44.276 cv
238.679 43.48 238.363 42.717 237.8 42.155 cv
237.238 41.592 236.475 41.276 235.679 41.276 cv
234.883 41.276 234.12 41.592 233.558 42.155 cv
232.995 42.717 232.679 43.48 232.679 44.276 cv
232.679 45.072 232.995 45.835 233.558 46.397 cv
234.12 46.96 234.883 47.276 235.679 47.276 cv
cp
f
235.679 47.276 mo
236.475 47.276 237.238 46.96 237.8 46.397 cv
238.363 45.835 238.679 45.072 238.679 44.276 cv
238.679 43.48 238.363 42.717 237.8 42.155 cv
237.238 41.592 236.475 41.276 235.679 41.276 cv
234.883 41.276 234.12 41.592 233.558 42.155 cv
232.995 42.717 232.679 43.48 232.679 44.276 cv
232.679 45.072 232.995 45.835 233.558 46.397 cv
234.12 46.96 234.883 47.276 235.679 47.276 cv
cp
@
263.861 54.816 mo
264.657 54.816 265.42 54.5 265.982 53.937 cv
266.545 53.375 266.861 52.612 266.861 51.816 cv
266.861 51.02 266.545 50.257 265.982 49.695 cv
265.42 49.132 264.657 48.816 263.861 48.816 cv
263.065 48.816 262.302 49.132 261.74 49.695 cv
261.177 50.257 260.861 51.02 260.861 51.816 cv
260.861 52.612 261.177 53.375 261.74 53.937 cv
262.302 54.5 263.065 54.816 263.861 54.816 cv
cp
f
263.861 54.816 mo
264.657 54.816 265.42 54.5 265.982 53.937 cv
266.545 53.375 266.861 52.612 266.861 51.816 cv
266.861 51.02 266.545 50.257 265.982 49.695 cv
265.42 49.132 264.657 48.816 263.861 48.816 cv
263.065 48.816 262.302 49.132 261.74 49.695 cv
261.177 50.257 260.861 51.02 260.861 51.816 cv
260.861 52.612 261.177 53.375 261.74 53.937 cv
262.302 54.5 263.065 54.816 263.861 54.816 cv
cp
@
292.043 50.16 mo
292.839 50.16 293.602 49.844 294.164 49.281 cv
294.727 48.719 295.043 47.956 295.043 47.16 cv
295.043 46.364 294.727 45.601 294.164 45.039 cv
293.602 44.476 292.839 44.16 292.043 44.16 cv
291.247 44.16 290.484 44.476 289.922 45.039 cv
289.359 45.601 289.043 46.364 289.043 47.16 cv
289.043 47.956 289.359 48.719 289.922 49.281 cv
290.484 49.844 291.247 50.16 292.043 50.16 cv
cp
f
292.043 50.16 mo
292.839 50.16 293.602 49.844 294.164 49.281 cv
294.727 48.719 295.043 47.956 295.043 47.16 cv
295.043 46.364 294.727 45.601 294.164 45.039 cv
293.602 44.476 292.839 44.16 292.043 44.16 cv
291.247 44.16 290.484 44.476 289.922 45.039 cv
289.359 45.601 289.043 46.364 289.043 47.16 cv
289.043 47.956 289.359 48.719 289.922 49.281 cv
290.484 49.844 291.247 50.16 292.043 50.16 cv
cp
@
320.225 48.855 mo
321.021 48.855 321.784 48.539 322.346 47.976 cv
322.909 47.414 323.225 46.651 323.225 45.855 cv
323.225 45.059 322.909 44.296 322.346 43.734 cv
321.784 43.171 321.021 42.855 320.225 42.855 cv
319.429 42.855 318.666 43.171 318.104 43.734 cv
317.541 44.296 317.225 45.059 317.225 45.855 cv
317.225 46.651 317.541 47.414 318.104 47.976 cv
318.666 48.539 319.429 48.855 320.225 48.855 cv
cp
f
320.225 48.855 mo
321.021 48.855 321.784 48.539 322.346 47.976 cv
322.909 47.414 323.225 46.651 323.225 45.855 cv
323.225 45.059 322.909 44.296 322.346 43.734 cv
321.784 43.171 321.021 42.855 320.225 42.855 cv
319.429 42.855 318.666 43.171 318.104 43.734 cv
317.541 44.296 317.225 45.059 317.225 45.855 cv
317.225 46.651 317.541 47.414 318.104 47.976 cv
318.666 48.539 319.429 48.855 320.225 48.855 cv
cp
@
.8 lw
2 lc
0 lj
53.907 146.253 mo
53.907 7.65298 li
1 /0 /CSD get_res sepcs
1 sep
@
332.907 146.253 mo
332.907 7.65298 li
@
53.907 146.253 mo
332.907 146.253 li
@
53.907 7.65298 mo
332.907 7.65298 li
@
188.225 33.785 mo
328.006 33.785 li
328.94 33.785 329.406 33.318 329.406 32.385 cv
329.406 12.554 li
329.406 11.62 328.94 11.154 328.006 11.154 cv
188.225 11.154 li
187.292 11.154 186.825 11.62 186.825 12.554 cv
186.825 32.385 li
186.825 33.318 187.292 33.785 188.225 33.785 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
188.225 33.785 mo
328.006 33.785 li
328.94 33.785 329.406 33.318 329.406 32.385 cv
329.406 12.554 li
329.406 11.62 328.94 11.154 328.006 11.154 cv
188.225 11.154 li
187.292 11.154 186.825 11.62 186.825 12.554 cv
186.825 32.385 li
186.825 33.318 187.292 33.785 188.225 33.785 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
189.625 16.816 mo
203.625 16.816 li
.905547 .71957 0 0 cmyk
@
193.625 19.816 mo
199.625 19.816 li
199.625 13.816 li
193.625 13.816 li
cp
f
1 lw
0 lc
0 lj
193.625 19.816 mo
199.625 19.816 li
199.625 13.816 li
193.625 13.816 li
cp
@
212.965 14.325 mo
212.965 14.997 li
212.699 14.871 212.454 14.78 212.223 14.717 cv
211.985 14.661 211.761 14.626 211.551 14.626 cv
211.173 14.626 210.879 14.703 210.676 14.843 cv
210.473 14.99 210.375 15.2 210.375 15.466 cv
210.375 15.69 210.438 15.865 210.578 15.977 cv
210.711 16.096 210.97 16.187 211.348 16.257 cv
211.768 16.341 li
212.279 16.439 212.657 16.614 212.902 16.859 cv
213.147 17.111 213.273 17.44 213.273 17.853 cv
213.273 18.35 213.105 18.721 212.776 18.973 cv
212.44 19.225 211.957 19.351 211.32 19.351 cv
211.075 19.351 210.816 19.323 210.543 19.274 cv
210.27 19.225 209.99 19.148 209.703 19.036 cv
209.703 18.322 li
209.983 18.483 210.256 18.602 210.522 18.679 cv
210.788 18.763 211.054 18.798 211.32 18.798 cv
211.712 18.798 212.013 18.721 212.23 18.567 cv
212.44 18.413 212.552 18.196 212.552 17.902 cv
212.552 17.65 212.475 17.454 212.321 17.314 cv
212.167 17.174 211.915 17.069 211.565 16.999 cv
211.145 16.915 li
210.627 16.817 210.256 16.656 210.025 16.432 cv
209.794 16.215 209.682 15.914 209.682 15.522 cv
209.682 15.074 209.836 14.717 210.158 14.458 cv
210.473 14.199 210.914 14.066 211.474 14.066 cv
211.712 14.066 211.95 14.087 212.202 14.129 cv
212.447 14.171 212.699 14.241 212.965 14.325 cv
1 /0 /CSD get_res sepcs
1 sep
ef
217.405 14.325 mo
217.405 14.997 li
217.139 14.871 216.894 14.78 216.663 14.717 cv
216.425 14.661 216.201 14.626 215.991 14.626 cv
215.613 14.626 215.319 14.703 215.116 14.843 cv
214.913 14.99 214.815 15.2 214.815 15.466 cv
214.815 15.69 214.878 15.865 215.018 15.977 cv
215.151 16.096 215.41 16.187 215.788 16.257 cv
216.208 16.341 li
216.719 16.439 217.097 16.614 217.342 16.859 cv
217.587 17.111 217.713 17.44 217.713 17.853 cv
217.713 18.35 217.545 18.721 217.216 18.973 cv
216.88 19.225 216.397 19.351 215.76 19.351 cv
215.515 19.351 215.256 19.323 214.983 19.274 cv
214.71 19.225 214.43 19.148 214.143 19.036 cv
214.143 18.322 li
214.423 18.483 214.696 18.602 214.962 18.679 cv
215.228 18.763 215.494 18.798 215.76 18.798 cv
216.152 18.798 216.453 18.721 216.67 18.567 cv
216.88 18.413 216.992 18.196 216.992 17.902 cv
216.992 17.65 216.915 17.454 216.761 17.314 cv
216.607 17.174 216.355 17.069 216.005 16.999 cv
215.585 16.915 li
215.067 16.817 214.696 16.656 214.465 16.432 cv
214.234 16.215 214.122 15.914 214.122 15.522 cv
214.122 15.074 214.276 14.717 214.598 14.458 cv
214.913 14.199 215.354 14.066 215.914 14.066 cv
216.152 14.066 216.39 14.087 216.642 14.129 cv
216.887 14.171 217.139 14.241 217.405 14.325 cv
ef
219.479 14.724 mo
219.479 18.693 li
220.312 18.693 li
221.012 18.693 221.53 18.539 221.859 18.217 cv
222.181 17.895 222.349 17.391 222.349 16.705 cv
222.349 16.019 222.181 15.522 221.859 15.2 cv
221.53 14.885 221.012 14.724 220.312 14.724 cv
219.479 14.724 li
218.786 14.157 mo
220.207 14.157 li
221.194 14.157 221.922 14.367 222.384 14.773 cv
222.846 15.186 223.077 15.83 223.077 16.705 cv
223.077 17.587 222.839 18.231 222.377 18.644 cv
221.915 19.057 221.187 19.26 220.207 19.26 cv
218.786 19.26 li
218.786 14.157 li
ef
223.843 17.622 mo
225.684 17.622 li
225.684 17.062 li
223.843 17.062 li
cp
f
228.33 16.432 mo
228.022 16.432 227.777 16.544 227.595 16.754 cv
227.413 16.964 227.322 17.258 227.322 17.622 cv
227.322 17.993 227.413 18.287 227.595 18.497 cv
227.777 18.707 228.022 18.812 228.33 18.812 cv
228.638 18.812 228.883 18.707 229.065 18.497 cv
229.247 18.287 229.338 17.993 229.338 17.622 cv
229.338 17.258 229.247 16.964 229.065 16.754 cv
228.883 16.544 228.638 16.432 228.33 16.432 cv
229.702 14.269 mo
229.702 14.899 li
229.527 14.815 229.352 14.752 229.177 14.71 cv
228.995 14.668 228.82 14.647 228.652 14.647 cv
228.19 14.647 227.84 14.801 227.602 15.109 cv
227.364 15.417 227.224 15.886 227.196 16.502 cv
227.329 16.306 227.497 16.152 227.7 16.047 cv
227.903 15.942 228.127 15.886 228.372 15.886 cv
228.883 15.886 229.289 16.047 229.583 16.355 cv
229.877 16.663 230.031 17.09 230.031 17.622 cv
230.031 18.147 229.87 18.567 229.562 18.882 cv
229.254 19.197 228.841 19.351 228.33 19.351 cv
227.742 19.351 227.287 19.127 226.979 18.679 cv
226.664 18.231 226.51 17.573 226.51 16.712 cv
226.51 15.907 226.699 15.263 227.084 14.787 cv
227.462 14.311 227.98 14.066 228.624 14.066 cv
228.792 14.066 228.967 14.087 229.149 14.115 cv
229.324 14.15 229.506 14.199 229.702 14.269 cv
ef
233.106 14.759 mo
231.363 17.482 li
233.106 17.482 li
233.106 14.759 li
232.924 14.157 mo
233.792 14.157 li
233.792 17.482 li
234.52 17.482 li
234.52 18.056 li
233.792 18.056 li
233.792 19.26 li
233.106 19.26 li
233.106 18.056 li
230.803 18.056 li
230.803 17.391 li
232.924 14.157 li
ef
235.586 14.157 mo
236.615 14.157 li
237.917 17.629 li
239.226 14.157 li
240.255 14.157 li
240.255 19.26 li
239.583 19.26 li
239.583 14.78 li
238.267 18.28 li
237.574 18.28 li
236.258 14.78 li
236.258 19.26 li
235.586 19.26 li
235.586 14.157 li
ef
242.399 16.824 mo
242.399 18.693 li
243.505 18.693 li
243.876 18.693 244.149 18.616 244.331 18.462 cv
244.506 18.308 244.597 18.077 244.597 17.755 cv
244.597 17.44 244.506 17.209 244.331 17.055 cv
244.149 16.901 243.876 16.824 243.505 16.824 cv
242.399 16.824 li
242.399 14.724 mo
242.399 16.264 li
243.421 16.264 li
243.757 16.264 244.002 16.201 244.17 16.075 cv
244.338 15.949 244.422 15.76 244.422 15.494 cv
244.422 15.242 244.338 15.046 244.17 14.92 cv
244.002 14.794 243.757 14.724 243.421 14.724 cv
242.399 14.724 li
241.706 14.157 mo
243.47 14.157 li
243.995 14.157 244.401 14.269 244.688 14.486 cv
244.968 14.71 245.115 15.018 245.115 15.417 cv
245.115 15.732 245.038 15.984 244.891 16.166 cv
244.744 16.348 244.534 16.467 244.254 16.509 cv
244.59 16.586 244.856 16.74 245.045 16.971 cv
245.227 17.202 245.325 17.489 245.325 17.832 cv
245.325 18.294 245.164 18.644 244.856 18.889 cv
244.548 19.141 244.107 19.26 243.54 19.26 cv
241.706 19.26 li
241.706 14.157 li
ef
1.5 lw
2 lc
1 lj
189.625 27.081 mo
203.625 27.081 li
.905547 .71957 0 0 cmyk
@
196.625 30.081 mo
197.421 30.081 198.184 29.765 198.746 29.202 cv
199.309 28.64 199.625 27.877 199.625 27.081 cv
199.625 26.285 199.309 25.522 198.746 24.96 cv
198.184 24.397 197.421 24.081 196.625 24.081 cv
195.829 24.081 195.066 24.397 194.504 24.96 cv
193.941 25.522 193.625 26.285 193.625 27.081 cv
193.625 27.877 193.941 28.64 194.504 29.202 cv
195.066 29.765 195.829 30.081 196.625 30.081 cv
cp
f
1 lw
0 lc
196.625 30.081 mo
197.421 30.081 198.184 29.765 198.746 29.202 cv
199.309 28.64 199.625 27.877 199.625 27.081 cv
199.625 26.285 199.309 25.522 198.746 24.96 cv
198.184 24.397 197.421 24.081 196.625 24.081 cv
195.829 24.081 195.066 24.397 194.504 24.96 cv
193.941 25.522 193.625 26.285 193.625 27.081 cv
193.625 27.877 193.941 28.64 194.504 29.202 cv
195.066 29.765 195.829 30.081 196.625 30.081 cv
cp
@
212.965 24.645 mo
212.965 25.317 li
212.699 25.191 212.454 25.1 212.223 25.037 cv
211.985 24.981 211.761 24.946 211.551 24.946 cv
211.173 24.946 210.879 25.023 210.676 25.163 cv
210.473 25.31 210.375 25.52 210.375 25.786 cv
210.375 26.01 210.438 26.185 210.578 26.297 cv
210.711 26.416 210.97 26.507 211.348 26.577 cv
211.768 26.661 li
212.279 26.759 212.657 26.934 212.902 27.179 cv
213.147 27.431 213.273 27.76 213.273 28.173 cv
213.273 28.67 213.105 29.041 212.776 29.293 cv
212.44 29.545 211.957 29.671 211.32 29.671 cv
211.075 29.671 210.816 29.643 210.543 29.594 cv
210.27 29.545 209.99 29.468 209.703 29.356 cv
209.703 28.642 li
209.983 28.803 210.256 28.922 210.522 28.999 cv
210.788 29.083 211.054 29.118 211.32 29.118 cv
211.712 29.118 212.013 29.041 212.23 28.887 cv
212.44 28.733 212.552 28.516 212.552 28.222 cv
212.552 27.97 212.475 27.774 212.321 27.634 cv
212.167 27.494 211.915 27.389 211.565 27.319 cv
211.145 27.235 li
210.627 27.137 210.256 26.976 210.025 26.752 cv
209.794 26.535 209.682 26.234 209.682 25.842 cv
209.682 25.394 209.836 25.037 210.158 24.778 cv
210.473 24.519 210.914 24.386 211.474 24.386 cv
211.712 24.386 211.95 24.407 212.202 24.449 cv
212.447 24.491 212.699 24.561 212.965 24.645 cv
1 /0 /CSD get_res sepcs
1 sep
ef
217.405 24.645 mo
217.405 25.317 li
217.139 25.191 216.894 25.1 216.663 25.037 cv
216.425 24.981 216.201 24.946 215.991 24.946 cv
215.613 24.946 215.319 25.023 215.116 25.163 cv
214.913 25.31 214.815 25.52 214.815 25.786 cv
214.815 26.01 214.878 26.185 215.018 26.297 cv
215.151 26.416 215.41 26.507 215.788 26.577 cv
216.208 26.661 li
216.719 26.759 217.097 26.934 217.342 27.179 cv
217.587 27.431 217.713 27.76 217.713 28.173 cv
217.713 28.67 217.545 29.041 217.216 29.293 cv
216.88 29.545 216.397 29.671 215.76 29.671 cv
215.515 29.671 215.256 29.643 214.983 29.594 cv
214.71 29.545 214.43 29.468 214.143 29.356 cv
214.143 28.642 li
214.423 28.803 214.696 28.922 214.962 28.999 cv
215.228 29.083 215.494 29.118 215.76 29.118 cv
216.152 29.118 216.453 29.041 216.67 28.887 cv
216.88 28.733 216.992 28.516 216.992 28.222 cv
216.992 27.97 216.915 27.774 216.761 27.634 cv
216.607 27.494 216.355 27.389 216.005 27.319 cv
215.585 27.235 li
215.067 27.137 214.696 26.976 214.465 26.752 cv
214.234 26.535 214.122 26.234 214.122 25.842 cv
214.122 25.394 214.276 25.037 214.598 24.778 cv
214.913 24.519 215.354 24.386 215.914 24.386 cv
216.152 24.386 216.39 24.407 216.642 24.449 cv
216.887 24.491 217.139 24.561 217.405 24.645 cv
ef
219.479 25.044 mo
219.479 29.013 li
220.312 29.013 li
221.012 29.013 221.53 28.859 221.859 28.537 cv
222.181 28.215 222.349 27.711 222.349 27.025 cv
222.349 26.339 222.181 25.842 221.859 25.52 cv
221.53 25.205 221.012 25.044 220.312 25.044 cv
219.479 25.044 li
218.786 24.477 mo
220.207 24.477 li
221.194 24.477 221.922 24.687 222.384 25.093 cv
222.846 25.506 223.077 26.15 223.077 27.025 cv
223.077 27.907 222.839 28.551 222.377 28.964 cv
221.915 29.377 221.187 29.58 220.207 29.58 cv
218.786 29.58 li
218.786 24.477 li
ef
223.843 27.942 mo
225.684 27.942 li
225.684 27.382 li
223.843 27.382 li
cp
f
226.888 28.999 mo
228.015 28.999 li
228.015 25.107 li
226.79 25.352 li
226.79 24.722 li
228.008 24.477 li
228.701 24.477 li
228.701 28.999 li
229.828 28.999 li
229.828 29.58 li
226.888 29.58 li
226.888 28.999 li
ef
231.804 28.999 mo
234.212 28.999 li
234.212 29.58 li
230.971 29.58 li
230.971 28.999 li
231.23 28.733 231.587 28.369 232.042 27.907 cv
232.49 27.452 232.777 27.158 232.896 27.025 cv
233.12 26.78 233.274 26.57 233.358 26.395 cv
233.442 26.227 233.491 26.052 233.491 25.884 cv
233.491 25.618 233.393 25.394 233.204 25.226 cv
233.015 25.058 232.77 24.967 232.462 24.967 cv
232.245 24.967 232.014 25.009 231.776 25.079 cv
231.538 25.156 231.279 25.268 231.006 25.422 cv
231.006 24.722 li
231.286 24.61 231.545 24.526 231.783 24.47 cv
232.021 24.414 232.245 24.386 232.448 24.386 cv
232.973 24.386 233.393 24.519 233.708 24.785 cv
234.023 25.051 234.184 25.401 234.184 25.842 cv
234.184 26.052 234.142 26.255 234.065 26.437 cv
233.988 26.626 233.848 26.85 233.638 27.102 cv
233.582 27.172 233.4 27.361 233.092 27.676 cv
232.784 27.991 232.357 28.432 231.804 28.999 cv
ef
237.126 27.158 mo
236.797 27.158 236.538 27.249 236.349 27.424 cv
236.16 27.599 236.069 27.837 236.069 28.145 cv
236.069 28.453 236.16 28.698 236.349 28.873 cv
236.538 29.048 236.797 29.132 237.126 29.132 cv
237.448 29.132 237.707 29.048 237.896 28.866 cv
238.085 28.691 238.183 28.453 238.183 28.145 cv
238.183 27.837 238.085 27.599 237.903 27.424 cv
237.714 27.249 237.455 27.158 237.126 27.158 cv
236.433 26.864 mo
236.139 26.794 235.908 26.654 235.74 26.451 cv
235.572 26.248 235.495 26.003 235.495 25.709 cv
235.495 25.303 235.635 24.981 235.929 24.743 cv
236.216 24.505 236.615 24.386 237.126 24.386 cv
237.63 24.386 238.029 24.505 238.323 24.743 cv
238.61 24.981 238.757 25.303 238.757 25.709 cv
238.757 26.003 238.673 26.248 238.505 26.451 cv
238.337 26.654 238.113 26.794 237.819 26.864 cv
238.148 26.941 238.407 27.095 238.596 27.319 cv
238.778 27.543 238.876 27.823 238.876 28.145 cv
238.876 28.642 238.722 29.02 238.421 29.279 cv
238.113 29.545 237.686 29.671 237.126 29.671 cv
236.559 29.671 236.125 29.545 235.824 29.279 cv
235.523 29.02 235.376 28.642 235.376 28.145 cv
235.376 27.823 235.467 27.543 235.656 27.319 cv
235.838 27.095 236.097 26.941 236.433 26.864 cv
236.181 25.772 mo
236.181 26.038 236.258 26.248 236.426 26.395 cv
236.594 26.542 236.825 26.612 237.126 26.612 cv
237.42 26.612 237.651 26.542 237.819 26.395 cv
237.987 26.248 238.071 26.038 238.071 25.772 cv
238.071 25.506 237.987 25.303 237.819 25.156 cv
237.651 25.009 237.42 24.932 237.126 24.932 cv
236.825 24.932 236.594 25.009 236.426 25.156 cv
236.258 25.303 236.181 25.506 236.181 25.772 cv
ef
240.026 24.477 mo
241.055 24.477 li
242.357 27.949 li
243.666 24.477 li
244.695 24.477 li
244.695 29.58 li
244.023 29.58 li
244.023 25.1 li
242.707 28.6 li
242.014 28.6 li
240.698 25.1 li
240.698 29.58 li
240.026 29.58 li
240.026 24.477 li
ef
246.839 27.144 mo
246.839 29.013 li
247.945 29.013 li
248.316 29.013 248.589 28.936 248.771 28.782 cv
248.946 28.628 249.037 28.397 249.037 28.075 cv
249.037 27.76 248.946 27.529 248.771 27.375 cv
248.589 27.221 248.316 27.144 247.945 27.144 cv
246.839 27.144 li
246.839 25.044 mo
246.839 26.584 li
247.861 26.584 li
248.197 26.584 248.442 26.521 248.61 26.395 cv
248.778 26.269 248.862 26.08 248.862 25.814 cv
248.862 25.562 248.778 25.366 248.61 25.24 cv
248.442 25.114 248.197 25.044 247.861 25.044 cv
246.839 25.044 li
246.146 24.477 mo
247.91 24.477 li
248.435 24.477 248.841 24.589 249.128 24.806 cv
249.408 25.03 249.555 25.338 249.555 25.737 cv
249.555 26.052 249.478 26.304 249.331 26.486 cv
249.184 26.668 248.974 26.787 248.694 26.829 cv
249.03 26.906 249.296 27.06 249.485 27.291 cv
249.667 27.522 249.765 27.809 249.765 28.152 cv
249.765 28.614 249.604 28.964 249.296 29.209 cv
248.988 29.461 248.547 29.58 247.98 29.58 cv
246.146 29.58 li
246.146 24.477 li
ef
1.5 lw
2 lc
264.225 16.816 mo
278.225 16.816 li
0 .9617 .904814 0 cmyk
@
268.225 19.816 mo
274.225 19.816 li
274.225 13.816 li
268.225 13.816 li
cp
f
1 lw
0 lc
0 lj
268.225 19.816 mo
274.225 19.816 li
274.225 13.816 li
268.225 13.816 li
cp
@
284.546 14.157 mo
285.239 14.157 li
285.239 16.25 li
287.745 16.25 li
287.745 14.157 li
288.438 14.157 li
288.438 19.26 li
287.745 19.26 li
287.745 16.831 li
285.239 16.831 li
285.239 19.26 li
284.546 19.26 li
284.546 14.157 li
1 /0 /CSD get_res sepcs
1 sep
ef
290.519 14.724 mo
290.519 18.693 li
291.352 18.693 li
292.052 18.693 292.57 18.539 292.899 18.217 cv
293.221 17.895 293.389 17.391 293.389 16.705 cv
293.389 16.019 293.221 15.522 292.899 15.2 cv
292.57 14.885 292.052 14.724 291.352 14.724 cv
290.519 14.724 li
289.826 14.157 mo
291.247 14.157 li
292.234 14.157 292.962 14.367 293.424 14.773 cv
293.886 15.186 294.117 15.83 294.117 16.705 cv
294.117 17.587 293.879 18.231 293.417 18.644 cv
292.955 19.057 292.227 19.26 291.247 19.26 cv
289.826 19.26 li
289.826 14.157 li
ef
295.799 14.724 mo
295.799 18.693 li
296.632 18.693 li
297.332 18.693 297.85 18.539 298.179 18.217 cv
298.501 17.895 298.669 17.391 298.669 16.705 cv
298.669 16.019 298.501 15.522 298.179 15.2 cv
297.85 14.885 297.332 14.724 296.632 14.724 cv
295.799 14.724 li
295.106 14.157 mo
296.527 14.157 li
297.514 14.157 298.242 14.367 298.704 14.773 cv
299.166 15.186 299.397 15.83 299.397 16.705 cv
299.397 17.587 299.159 18.231 298.697 18.644 cv
298.235 19.057 297.507 19.26 296.527 19.26 cv
295.106 19.26 li
295.106 14.157 li
ef
300.163 17.622 mo
302.004 17.622 li
302.004 17.062 li
300.163 17.062 li
cp
f
304.65 16.432 mo
304.342 16.432 304.097 16.544 303.915 16.754 cv
303.733 16.964 303.642 17.258 303.642 17.622 cv
303.642 17.993 303.733 18.287 303.915 18.497 cv
304.097 18.707 304.342 18.812 304.65 18.812 cv
304.958 18.812 305.203 18.707 305.385 18.497 cv
305.567 18.287 305.658 17.993 305.658 17.622 cv
305.658 17.258 305.567 16.964 305.385 16.754 cv
305.203 16.544 304.958 16.432 304.65 16.432 cv
306.022 14.269 mo
306.022 14.899 li
305.847 14.815 305.672 14.752 305.497 14.71 cv
305.315 14.668 305.14 14.647 304.972 14.647 cv
304.51 14.647 304.16 14.801 303.922 15.109 cv
303.684 15.417 303.544 15.886 303.516 16.502 cv
303.649 16.306 303.817 16.152 304.02 16.047 cv
304.223 15.942 304.447 15.886 304.692 15.886 cv
305.203 15.886 305.609 16.047 305.903 16.355 cv
306.197 16.663 306.351 17.09 306.351 17.622 cv
306.351 18.147 306.19 18.567 305.882 18.882 cv
305.574 19.197 305.161 19.351 304.65 19.351 cv
304.062 19.351 303.607 19.127 303.299 18.679 cv
302.984 18.231 302.83 17.573 302.83 16.712 cv
302.83 15.907 303.019 15.263 303.404 14.787 cv
303.782 14.311 304.3 14.066 304.944 14.066 cv
305.112 14.066 305.287 14.087 305.469 14.115 cv
305.644 14.15 305.826 14.199 306.022 14.269 cv
ef
309.546 14.759 mo
307.803 17.482 li
309.546 17.482 li
309.546 14.759 li
309.364 14.157 mo
310.232 14.157 li
310.232 17.482 li
310.96 17.482 li
310.96 18.056 li
310.232 18.056 li
310.232 19.26 li
309.546 19.26 li
309.546 18.056 li
307.243 18.056 li
307.243 17.391 li
309.364 14.157 li
ef
312.026 14.157 mo
313.055 14.157 li
314.357 17.629 li
315.666 14.157 li
316.695 14.157 li
316.695 19.26 li
316.023 19.26 li
316.023 14.78 li
314.707 18.28 li
314.014 18.28 li
312.698 14.78 li
312.698 19.26 li
312.026 19.26 li
312.026 14.157 li
ef
318.719 16.824 mo
318.719 18.693 li
319.825 18.693 li
320.196 18.693 320.469 18.616 320.651 18.462 cv
320.826 18.308 320.917 18.077 320.917 17.755 cv
320.917 17.44 320.826 17.209 320.651 17.055 cv
320.469 16.901 320.196 16.824 319.825 16.824 cv
318.719 16.824 li
318.719 14.724 mo
318.719 16.264 li
319.741 16.264 li
320.077 16.264 320.322 16.201 320.49 16.075 cv
320.658 15.949 320.742 15.76 320.742 15.494 cv
320.742 15.242 320.658 15.046 320.49 14.92 cv
320.322 14.794 320.077 14.724 319.741 14.724 cv
318.719 14.724 li
318.026 14.157 mo
319.79 14.157 li
320.315 14.157 320.721 14.269 321.008 14.486 cv
321.288 14.71 321.435 15.018 321.435 15.417 cv
321.435 15.732 321.358 15.984 321.211 16.166 cv
321.064 16.348 320.854 16.467 320.574 16.509 cv
320.91 16.586 321.176 16.74 321.365 16.971 cv
321.547 17.202 321.645 17.489 321.645 17.832 cv
321.645 18.294 321.484 18.644 321.176 18.889 cv
320.868 19.141 320.427 19.26 319.86 19.26 cv
318.026 19.26 li
318.026 14.157 li
ef
1.5 lw
2 lc
1 lj
264.225 27.081 mo
278.225 27.081 li
0 .9617 .904814 0 cmyk
@
271.225 30.081 mo
272.021 30.081 272.784 29.765 273.346 29.202 cv
273.909 28.64 274.225 27.877 274.225 27.081 cv
274.225 26.285 273.909 25.522 273.346 24.96 cv
272.784 24.397 272.021 24.081 271.225 24.081 cv
270.429 24.081 269.666 24.397 269.104 24.96 cv
268.541 25.522 268.225 26.285 268.225 27.081 cv
268.225 27.877 268.541 28.64 269.104 29.202 cv
269.666 29.765 270.429 30.081 271.225 30.081 cv
cp
f
1 lw
0 lc
271.225 30.081 mo
272.021 30.081 272.784 29.765 273.346 29.202 cv
273.909 28.64 274.225 27.877 274.225 27.081 cv
274.225 26.285 273.909 25.522 273.346 24.96 cv
272.784 24.397 272.021 24.081 271.225 24.081 cv
270.429 24.081 269.666 24.397 269.104 24.96 cv
268.541 25.522 268.225 26.285 268.225 27.081 cv
268.225 27.877 268.541 28.64 269.104 29.202 cv
269.666 29.765 270.429 30.081 271.225 30.081 cv
cp
@
284.546 24.477 mo
285.239 24.477 li
285.239 26.57 li
287.745 26.57 li
287.745 24.477 li
288.438 24.477 li
288.438 29.58 li
287.745 29.58 li
287.745 27.151 li
285.239 27.151 li
285.239 29.58 li
284.546 29.58 li
284.546 24.477 li
1 /0 /CSD get_res sepcs
1 sep
ef
290.519 25.044 mo
290.519 29.013 li
291.352 29.013 li
292.052 29.013 292.57 28.859 292.899 28.537 cv
293.221 28.215 293.389 27.711 293.389 27.025 cv
293.389 26.339 293.221 25.842 292.899 25.52 cv
292.57 25.205 292.052 25.044 291.352 25.044 cv
290.519 25.044 li
289.826 24.477 mo
291.247 24.477 li
292.234 24.477 292.962 24.687 293.424 25.093 cv
293.886 25.506 294.117 26.15 294.117 27.025 cv
294.117 27.907 293.879 28.551 293.417 28.964 cv
292.955 29.377 292.227 29.58 291.247 29.58 cv
289.826 29.58 li
289.826 24.477 li
ef
295.799 25.044 mo
295.799 29.013 li
296.632 29.013 li
297.332 29.013 297.85 28.859 298.179 28.537 cv
298.501 28.215 298.669 27.711 298.669 27.025 cv
298.669 26.339 298.501 25.842 298.179 25.52 cv
297.85 25.205 297.332 25.044 296.632 25.044 cv
295.799 25.044 li
295.106 24.477 mo
296.527 24.477 li
297.514 24.477 298.242 24.687 298.704 25.093 cv
299.166 25.506 299.397 26.15 299.397 27.025 cv
299.397 27.907 299.159 28.551 298.697 28.964 cv
298.235 29.377 297.507 29.58 296.527 29.58 cv
295.106 29.58 li
295.106 24.477 li
ef
300.163 27.942 mo
302.004 27.942 li
302.004 27.382 li
300.163 27.382 li
cp
f
303.208 28.999 mo
304.335 28.999 li
304.335 25.107 li
303.11 25.352 li
303.11 24.722 li
304.328 24.477 li
305.021 24.477 li
305.021 28.999 li
306.148 28.999 li
306.148 29.58 li
303.208 29.58 li
303.208 28.999 li
ef
308.244 28.999 mo
310.652 28.999 li
310.652 29.58 li
307.411 29.58 li
307.411 28.999 li
307.67 28.733 308.027 28.369 308.482 27.907 cv
308.93 27.452 309.217 27.158 309.336 27.025 cv
309.56 26.78 309.714 26.57 309.798 26.395 cv
309.882 26.227 309.931 26.052 309.931 25.884 cv
309.931 25.618 309.833 25.394 309.644 25.226 cv
309.455 25.058 309.21 24.967 308.902 24.967 cv
308.685 24.967 308.454 25.009 308.216 25.079 cv
307.978 25.156 307.719 25.268 307.446 25.422 cv
307.446 24.722 li
307.726 24.61 307.985 24.526 308.223 24.47 cv
308.461 24.414 308.685 24.386 308.888 24.386 cv
309.413 24.386 309.833 24.519 310.148 24.785 cv
310.463 25.051 310.624 25.401 310.624 25.842 cv
310.624 26.052 310.582 26.255 310.505 26.437 cv
310.428 26.626 310.288 26.85 310.078 27.102 cv
310.022 27.172 309.84 27.361 309.532 27.676 cv
309.224 27.991 308.797 28.432 308.244 28.999 cv
ef
313.566 27.158 mo
313.237 27.158 312.978 27.249 312.789 27.424 cv
312.6 27.599 312.509 27.837 312.509 28.145 cv
312.509 28.453 312.6 28.698 312.789 28.873 cv
312.978 29.048 313.237 29.132 313.566 29.132 cv
313.888 29.132 314.147 29.048 314.336 28.866 cv
314.525 28.691 314.623 28.453 314.623 28.145 cv
314.623 27.837 314.525 27.599 314.343 27.424 cv
314.154 27.249 313.895 27.158 313.566 27.158 cv
312.873 26.864 mo
312.579 26.794 312.348 26.654 312.18 26.451 cv
312.012 26.248 311.935 26.003 311.935 25.709 cv
311.935 25.303 312.075 24.981 312.369 24.743 cv
312.656 24.505 313.055 24.386 313.566 24.386 cv
314.07 24.386 314.469 24.505 314.763 24.743 cv
315.05 24.981 315.197 25.303 315.197 25.709 cv
315.197 26.003 315.113 26.248 314.945 26.451 cv
314.777 26.654 314.553 26.794 314.259 26.864 cv
314.588 26.941 314.847 27.095 315.036 27.319 cv
315.218 27.543 315.316 27.823 315.316 28.145 cv
315.316 28.642 315.162 29.02 314.861 29.279 cv
314.553 29.545 314.126 29.671 313.566 29.671 cv
312.999 29.671 312.565 29.545 312.264 29.279 cv
311.963 29.02 311.816 28.642 311.816 28.145 cv
311.816 27.823 311.907 27.543 312.096 27.319 cv
312.278 27.095 312.537 26.941 312.873 26.864 cv
312.621 25.772 mo
312.621 26.038 312.698 26.248 312.866 26.395 cv
313.034 26.542 313.265 26.612 313.566 26.612 cv
313.86 26.612 314.091 26.542 314.259 26.395 cv
314.427 26.248 314.511 26.038 314.511 25.772 cv
314.511 25.506 314.427 25.303 314.259 25.156 cv
314.091 25.009 313.86 24.932 313.566 24.932 cv
313.265 24.932 313.034 25.009 312.866 25.156 cv
312.698 25.303 312.621 25.506 312.621 25.772 cv
ef
316.466 24.477 mo
317.495 24.477 li
318.797 27.949 li
320.106 24.477 li
321.135 24.477 li
321.135 29.58 li
320.463 29.58 li
320.463 25.1 li
319.147 28.6 li
318.454 28.6 li
317.138 25.1 li
317.138 29.58 li
316.466 29.58 li
316.466 24.477 li
ef
323.159 27.144 mo
323.159 29.013 li
324.265 29.013 li
324.636 29.013 324.909 28.936 325.091 28.782 cv
325.266 28.628 325.357 28.397 325.357 28.075 cv
325.357 27.76 325.266 27.529 325.091 27.375 cv
324.909 27.221 324.636 27.144 324.265 27.144 cv
323.159 27.144 li
323.159 25.044 mo
323.159 26.584 li
324.181 26.584 li
324.517 26.584 324.762 26.521 324.93 26.395 cv
325.098 26.269 325.182 26.08 325.182 25.814 cv
325.182 25.562 325.098 25.366 324.93 25.24 cv
324.762 25.114 324.517 25.044 324.181 25.044 cv
323.159 25.044 li
322.466 24.477 mo
324.23 24.477 li
324.755 24.477 325.161 24.589 325.448 24.806 cv
325.728 25.03 325.875 25.338 325.875 25.737 cv
325.875 26.052 325.798 26.304 325.651 26.486 cv
325.504 26.668 325.294 26.787 325.014 26.829 cv
325.35 26.906 325.616 27.06 325.805 27.291 cv
325.987 27.522 326.085 27.809 326.085 28.152 cv
326.085 28.614 325.924 28.964 325.616 29.209 cv
325.308 29.461 324.867 29.58 324.3 29.58 cv
322.466 29.58 li
322.466 24.477 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
