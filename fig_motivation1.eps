%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP9B23.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/13 ÐÇÆÚ¶þ, ÉÏÎç 8:47:20
%%BoundingBox: 0 0 418 318
%%HiResBoundingBox: 0 0 418 318
%%CropBox: 0 0 418 318
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 959 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-08-13T08:47:03+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-13T08:47:03+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:a94650ad-dc8f-4c6b-b930-acf251c75067"
   xmpMM:InstanceID="uuid:f18b25e8-57f3-48d9-b833-329b1fb3534c">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivation1.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -318 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 318 li
418 318 li
418 0 li
cp
clp
.059998 317.94 mo
418.02 317.94 li
418.02 -.0600281 li
.059998 -.0600281 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
53.846 273.009 mo
410.966 273.009 li
410.966 6.897 li
53.846 6.897 li
cp
f
70.079 273.009 mo
70.079 276.509 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
70.079 273.009 mo
70.079 276.509 li
@
67.316 289.538 mo
69.57 289.538 li
69.57 281.754 li
67.12 282.244 li
67.12 280.984 li
69.556 280.494 li
70.942 280.494 li
70.942 289.538 li
73.196 289.538 li
73.196 290.7 li
67.316 290.7 li
67.316 289.538 li
ef
106.152 273.009 mo
106.152 276.509 li
f
106.152 273.009 mo
106.152 276.509 li
@
104.388 289.538 mo
109.204 289.538 li
109.204 290.7 li
102.722 290.7 li
102.722 289.538 li
103.24 289.006 103.954 288.278 104.864 287.354 cv
105.76 286.444 106.334 285.856 106.572 285.59 cv
107.02 285.1 107.328 284.68 107.496 284.33 cv
107.664 283.994 107.762 283.644 107.762 283.308 cv
107.762 282.776 107.566 282.328 107.188 281.992 cv
106.81 281.656 106.32 281.474 105.704 281.474 cv
105.27 281.474 104.808 281.558 104.332 281.698 cv
103.856 281.852 103.338 282.076 102.792 282.384 cv
102.792 280.984 li
103.352 280.76 103.87 280.592 104.346 280.48 cv
104.822 280.368 105.27 280.312 105.676 280.312 cv
106.726 280.312 107.566 280.578 108.196 281.11 cv
108.826 281.642 109.148 282.342 109.148 283.224 cv
109.148 283.644 109.064 284.05 108.91 284.414 cv
108.756 284.792 108.476 285.24 108.056 285.744 cv
107.944 285.884 107.58 286.262 106.964 286.892 cv
106.348 287.522 105.494 288.404 104.388 289.538 cv
ef
142.225 273.009 mo
142.225 276.509 li
f
142.225 273.009 mo
142.225 276.509 li
@
143.504 285.198 mo
144.162 285.338 144.68 285.632 145.044 286.08 cv
145.408 286.528 145.604 287.088 145.604 287.732 cv
145.604 288.74 145.254 289.524 144.568 290.07 cv
143.868 290.616 142.888 290.882 141.614 290.882 cv
141.18 290.882 140.732 290.84 140.284 290.756 cv
139.836 290.686 139.36 290.56 138.884 290.392 cv
138.884 289.062 li
139.262 289.286 139.682 289.454 140.144 289.566 cv
140.592 289.678 141.068 289.734 141.572 289.734 cv
142.44 289.734 143.098 289.566 143.546 289.23 cv
143.994 288.894 144.232 288.39 144.232 287.732 cv
144.232 287.144 144.022 286.668 143.602 286.332 cv
143.182 285.996 142.594 285.814 141.838 285.814 cv
140.648 285.814 li
140.648 284.68 li
141.894 284.68 li
142.566 284.68 143.084 284.554 143.448 284.274 cv
143.812 284.008 143.994 283.616 143.994 283.098 cv
143.994 282.58 143.798 282.174 143.434 281.894 cv
143.056 281.614 142.524 281.474 141.838 281.474 cv
141.46 281.474 141.054 281.516 140.62 281.6 cv
140.186 281.684 139.71 281.81 139.192 281.978 cv
139.192 280.746 li
139.71 280.606 140.2 280.494 140.662 280.424 cv
141.11 280.354 141.544 280.312 141.964 280.312 cv
143 280.312 143.826 280.55 144.442 281.026 cv
145.058 281.502 145.366 282.146 145.366 282.958 cv
145.366 283.518 145.198 283.994 144.876 284.386 cv
144.554 284.778 144.092 285.058 143.504 285.198 cv
ef
178.297 273.009 mo
178.297 276.509 li
f
178.297 273.009 mo
178.297 276.509 li
@
179.112 281.698 mo
175.626 287.144 li
179.112 287.144 li
179.112 281.698 li
178.748 280.494 mo
180.484 280.494 li
180.484 287.144 li
181.94 287.144 li
181.94 288.292 li
180.484 288.292 li
180.484 290.7 li
179.112 290.7 li
179.112 288.292 li
174.506 288.292 li
174.506 286.962 li
178.748 280.494 li
ef
214.37 273.009 mo
214.37 276.509 li
f
214.37 273.009 mo
214.37 276.509 li
@
211.452 280.494 mo
216.87 280.494 li
216.87 281.656 li
212.712 281.656 li
212.712 284.162 li
212.908 284.092 213.118 284.036 213.314 284.008 cv
213.51 283.98 213.72 283.952 213.916 283.952 cv
215.05 283.952 215.946 284.274 216.618 284.89 cv
217.29 285.52 217.626 286.36 217.626 287.424 cv
217.626 288.53 217.276 289.384 216.59 289.986 cv
215.904 290.588 214.938 290.882 213.706 290.882 cv
213.272 290.882 212.838 290.84 212.39 290.784 cv
211.942 290.714 211.494 290.616 211.018 290.462 cv
211.018 289.076 li
211.424 289.3 211.844 289.468 212.292 289.58 cv
212.726 289.692 213.188 289.734 213.678 289.734 cv
214.462 289.734 215.092 289.538 215.554 289.118 cv
216.002 288.698 216.24 288.138 216.24 287.424 cv
216.24 286.724 216.002 286.164 215.554 285.744 cv
215.092 285.324 214.462 285.114 213.678 285.114 cv
213.314 285.114 212.936 285.156 212.572 285.24 cv
212.208 285.324 211.83 285.45 211.452 285.618 cv
211.452 280.494 li
ef
250.443 273.009 mo
250.443 276.509 li
f
250.443 273.009 mo
250.443 276.509 li
@
250.56 285.044 mo
249.944 285.044 249.454 285.268 249.09 285.688 cv
248.726 286.108 248.544 286.696 248.544 287.424 cv
248.544 288.166 248.726 288.754 249.09 289.174 cv
249.454 289.594 249.944 289.804 250.56 289.804 cv
251.176 289.804 251.666 289.594 252.03 289.174 cv
252.394 288.754 252.576 288.166 252.576 287.424 cv
252.576 286.696 252.394 286.108 252.03 285.688 cv
251.666 285.268 251.176 285.044 250.56 285.044 cv
253.304 280.718 mo
253.304 281.978 li
252.954 281.81 252.604 281.684 252.254 281.6 cv
251.89 281.516 251.54 281.474 251.204 281.474 cv
250.28 281.474 249.58 281.782 249.104 282.398 cv
248.628 283.014 248.348 283.952 248.292 285.184 cv
248.558 284.792 248.894 284.484 249.3 284.274 cv
249.706 284.064 250.154 283.952 250.644 283.952 cv
251.666 283.952 252.478 284.274 253.066 284.89 cv
253.654 285.506 253.962 286.36 253.962 287.424 cv
253.962 288.474 253.64 289.314 253.024 289.944 cv
252.408 290.574 251.582 290.882 250.56 290.882 cv
249.384 290.882 248.474 290.434 247.858 289.538 cv
247.228 288.642 246.92 287.326 246.92 285.604 cv
246.92 283.994 247.298 282.706 248.068 281.754 cv
248.824 280.802 249.86 280.312 251.148 280.312 cv
251.484 280.312 251.834 280.354 252.198 280.41 cv
252.548 280.48 252.912 280.578 253.304 280.718 cv
ef
286.516 273.009 mo
286.516 276.509 li
f
286.516 273.009 mo
286.516 276.509 li
@
283.208 280.494 mo
289.774 280.494 li
289.774 281.082 li
286.064 290.7 li
284.622 290.7 li
288.108 281.656 li
283.208 281.656 li
283.208 280.494 li
ef
322.588 273.009 mo
322.588 276.509 li
f
322.588 273.009 mo
322.588 276.509 li
@
322.632 285.856 mo
321.974 285.856 321.456 286.038 321.078 286.388 cv
320.7 286.738 320.518 287.214 320.518 287.83 cv
320.518 288.446 320.7 288.936 321.078 289.286 cv
321.456 289.636 321.974 289.804 322.632 289.804 cv
323.276 289.804 323.794 289.636 324.172 289.272 cv
324.55 288.922 324.746 288.446 324.746 287.83 cv
324.746 287.214 324.55 286.738 324.186 286.388 cv
323.808 286.038 323.29 285.856 322.632 285.856 cv
321.246 285.268 mo
320.658 285.128 320.196 284.848 319.86 284.442 cv
319.524 284.036 319.37 283.546 319.37 282.958 cv
319.37 282.146 319.65 281.502 320.238 281.026 cv
320.812 280.55 321.61 280.312 322.632 280.312 cv
323.64 280.312 324.438 280.55 325.026 281.026 cv
325.6 281.502 325.894 282.146 325.894 282.958 cv
325.894 283.546 325.726 284.036 325.39 284.442 cv
325.054 284.848 324.606 285.128 324.018 285.268 cv
324.676 285.422 325.194 285.73 325.572 286.178 cv
325.936 286.626 326.132 287.186 326.132 287.83 cv
326.132 288.824 325.824 289.58 325.222 290.098 cv
324.606 290.63 323.752 290.882 322.632 290.882 cv
321.498 290.882 320.63 290.63 320.028 290.098 cv
319.426 289.58 319.132 288.824 319.132 287.83 cv
319.132 287.186 319.314 286.626 319.692 286.178 cv
320.056 285.73 320.574 285.422 321.246 285.268 cv
320.742 283.084 mo
320.742 283.616 320.896 284.036 321.232 284.33 cv
321.568 284.624 322.03 284.764 322.632 284.764 cv
323.22 284.764 323.682 284.624 324.018 284.33 cv
324.354 284.036 324.522 283.616 324.522 283.084 cv
324.522 282.552 324.354 282.146 324.018 281.852 cv
323.682 281.558 323.22 281.404 322.632 281.404 cv
322.03 281.404 321.568 281.558 321.232 281.852 cv
320.896 282.146 320.742 282.552 320.742 283.084 cv
ef
358.661 273.009 mo
358.661 276.509 li
f
358.661 273.009 mo
358.661 276.509 li
@
355.72 290.49 mo
355.72 289.23 li
356.056 289.398 356.406 289.524 356.77 289.608 cv
357.12 289.692 357.47 289.734 357.82 289.734 cv
358.716 289.734 359.416 289.44 359.892 288.824 cv
360.368 288.208 360.648 287.284 360.732 286.024 cv
360.452 286.416 360.116 286.724 359.724 286.934 cv
359.318 287.144 358.87 287.242 358.38 287.242 cv
357.344 287.242 356.532 286.934 355.944 286.318 cv
355.356 285.702 355.062 284.862 355.062 283.784 cv
355.062 282.748 355.37 281.908 355.986 281.264 cv
356.602 280.634 357.428 280.312 358.464 280.312 cv
359.64 280.312 360.55 280.774 361.166 281.67 cv
361.782 282.58 362.104 283.896 362.104 285.604 cv
362.104 287.228 361.712 288.502 360.956 289.454 cv
360.186 290.406 359.164 290.882 357.876 290.882 cv
357.526 290.882 357.176 290.84 356.826 290.784 cv
356.462 290.728 356.098 290.63 355.72 290.49 cv
358.464 286.164 mo
359.08 286.164 359.57 285.954 359.934 285.534 cv
360.298 285.114 360.48 284.526 360.48 283.784 cv
360.48 283.056 360.298 282.468 359.934 282.048 cv
359.57 281.628 359.08 281.404 358.464 281.404 cv
357.848 281.404 357.358 281.628 356.994 282.048 cv
356.63 282.468 356.448 283.056 356.448 283.784 cv
356.448 284.526 356.63 285.114 356.994 285.534 cv
357.358 285.954 357.848 286.164 358.464 286.164 cv
ef
394.734 273.009 mo
394.734 276.509 li
f
394.734 273.009 mo
394.734 276.509 li
@
387.596 289.538 mo
389.85 289.538 li
389.85 281.754 li
387.4 282.244 li
387.4 280.984 li
389.836 280.494 li
391.222 280.494 li
391.222 289.538 li
393.476 289.538 li
393.476 290.7 li
387.596 290.7 li
387.596 289.538 li
ef
399.192 281.404 mo
398.478 281.404 397.946 281.754 397.582 282.454 cv
397.218 283.154 397.05 284.204 397.05 285.604 cv
397.05 287.004 397.218 288.054 397.582 288.754 cv
397.946 289.454 398.478 289.804 399.192 289.804 cv
399.906 289.804 400.438 289.454 400.802 288.754 cv
401.152 288.054 401.334 287.004 401.334 285.604 cv
401.334 284.204 401.152 283.154 400.802 282.454 cv
400.438 281.754 399.906 281.404 399.192 281.404 cv
399.192 280.312 mo
400.326 280.312 401.194 280.774 401.81 281.67 cv
402.412 282.58 402.72 283.896 402.72 285.604 cv
402.72 287.326 402.412 288.642 401.81 289.538 cv
401.194 290.434 400.326 290.882 399.192 290.882 cv
398.044 290.882 397.162 290.434 396.56 289.538 cv
395.958 288.642 395.664 287.326 395.664 285.604 cv
395.664 283.896 395.958 282.58 396.56 281.67 cv
397.162 280.774 398.044 280.312 399.192 280.312 cv
ef
196.912 298.014 mo
202.778 298.014 li
202.778 299.176 li
198.298 299.176 li
198.298 302.186 li
202.344 302.186 li
202.344 303.348 li
198.298 303.348 li
198.298 308.22 li
196.912 308.22 li
196.912 298.014 li
ef
209.334 301.738 mo
209.194 301.654 209.04 301.598 208.872 301.556 cv
208.704 301.528 208.522 301.5 208.326 301.5 cv
207.612 301.5 207.066 301.738 206.688 302.2 cv
206.296 302.662 206.114 303.32 206.114 304.188 cv
206.114 308.22 li
204.854 308.22 li
204.854 300.562 li
206.114 300.562 li
206.114 301.752 li
206.366 301.29 206.716 300.94 207.136 300.716 cv
207.556 300.492 208.074 300.38 208.69 300.38 cv
208.774 300.38 208.872 300.394 208.984 300.394 cv
209.082 300.408 209.194 300.422 209.334 300.45 cv
209.334 301.738 li
ef
217.208 304.076 mo
217.208 304.692 li
211.426 304.692 li
211.482 305.56 211.734 306.232 212.21 306.68 cv
212.672 307.128 213.316 307.352 214.156 307.352 cv
214.632 307.352 215.108 307.296 215.556 307.184 cv
216.004 307.072 216.466 306.89 216.914 306.638 cv
216.914 307.828 li
216.466 308.024 216.004 308.178 215.528 308.262 cv
215.052 308.346 214.562 308.402 214.086 308.402 cv
212.854 308.402 211.888 308.052 211.174 307.352 cv
210.46 306.652 210.11 305.686 210.11 304.468 cv
210.11 303.222 210.446 302.228 211.118 301.486 cv
211.79 300.758 212.714 300.38 213.862 300.38 cv
214.898 300.38 215.71 300.716 216.312 301.374 cv
216.9 302.046 217.208 302.942 217.208 304.076 cv
215.948 303.712 mo
215.934 303.026 215.738 302.48 215.374 302.06 cv
214.996 301.654 214.492 301.444 213.876 301.444 cv
213.176 301.444 212.616 301.654 212.196 302.046 cv
211.776 302.438 211.524 302.998 211.468 303.712 cv
215.948 303.712 li
ef
220.052 304.398 mo
220.052 305.322 220.234 306.05 220.612 306.582 cv
220.99 307.114 221.522 307.366 222.194 307.366 cv
222.852 307.366 223.37 307.114 223.762 306.582 cv
224.14 306.05 224.336 305.322 224.336 304.398 cv
224.336 303.474 224.14 302.76 223.762 302.228 cv
223.37 301.696 222.852 301.43 222.194 301.43 cv
221.522 301.43 220.99 301.696 220.612 302.228 cv
220.234 302.76 220.052 303.474 220.052 304.398 cv
224.336 307.072 mo
224.07 307.534 223.734 307.87 223.328 308.08 cv
222.922 308.29 222.446 308.402 221.886 308.402 cv
220.962 308.402 220.206 308.038 219.618 307.31 cv
219.03 306.582 218.75 305.602 218.75 304.398 cv
218.75 303.194 219.03 302.228 219.618 301.486 cv
220.206 300.758 220.962 300.38 221.886 300.38 cv
222.446 300.38 222.922 300.492 223.328 300.716 cv
223.734 300.94 224.07 301.276 224.336 301.724 cv
224.336 300.562 li
225.596 300.562 li
225.596 311.118 li
224.336 311.118 li
224.336 307.072 li
ef
228.05 305.196 mo
228.05 300.562 li
229.31 300.562 li
229.31 305.154 li
229.31 305.882 229.45 306.414 229.73 306.778 cv
230.01 307.142 230.43 307.324 231.004 307.324 cv
231.676 307.324 232.222 307.114 232.614 306.68 cv
233.006 306.246 233.202 305.658 233.202 304.902 cv
233.202 300.562 li
234.462 300.562 li
234.462 308.22 li
233.202 308.22 li
233.202 307.044 li
232.894 307.52 232.53 307.856 232.138 308.08 cv
231.732 308.29 231.27 308.402 230.738 308.402 cv
229.856 308.402 229.184 308.136 228.736 307.59 cv
228.274 307.058 228.05 306.26 228.05 305.196 cv
231.214 300.38 mo
231.214 300.38 li
ef
243.608 304.076 mo
243.608 304.692 li
237.826 304.692 li
237.882 305.56 238.134 306.232 238.61 306.68 cv
239.072 307.128 239.716 307.352 240.556 307.352 cv
241.032 307.352 241.508 307.296 241.956 307.184 cv
242.404 307.072 242.866 306.89 243.314 306.638 cv
243.314 307.828 li
242.866 308.024 242.404 308.178 241.928 308.262 cv
241.452 308.346 240.962 308.402 240.486 308.402 cv
239.254 308.402 238.288 308.052 237.574 307.352 cv
236.86 306.652 236.51 305.686 236.51 304.468 cv
236.51 303.222 236.846 302.228 237.518 301.486 cv
238.19 300.758 239.114 300.38 240.262 300.38 cv
241.298 300.38 242.11 300.716 242.712 301.374 cv
243.3 302.046 243.608 302.942 243.608 304.076 cv
242.348 303.712 mo
242.334 303.026 242.138 302.48 241.774 302.06 cv
241.396 301.654 240.892 301.444 240.276 301.444 cv
239.576 301.444 239.016 301.654 238.596 302.046 cv
238.176 302.438 237.924 302.998 237.868 303.712 cv
242.348 303.712 li
ef
252.066 303.6 mo
252.066 308.22 li
250.806 308.22 li
250.806 303.642 li
250.806 302.914 250.652 302.382 250.372 302.018 cv
250.092 301.654 249.672 301.472 249.112 301.472 cv
248.426 301.472 247.894 301.696 247.502 302.13 cv
247.11 302.564 246.914 303.152 246.914 303.894 cv
246.914 308.22 li
245.654 308.22 li
245.654 300.562 li
246.914 300.562 li
246.914 301.752 li
247.208 301.304 247.558 300.954 247.978 300.73 cv
248.384 300.506 248.86 300.38 249.392 300.38 cv
250.26 300.38 250.932 300.66 251.38 301.206 cv
251.828 301.752 252.066 302.55 252.066 303.6 cv
ef
260.092 300.856 mo
260.092 302.032 li
259.728 301.836 259.378 301.696 259.014 301.598 cv
258.65 301.5 258.3 301.444 257.936 301.444 cv
257.124 301.444 256.48 301.71 256.032 302.228 cv
255.584 302.746 255.36 303.474 255.36 304.398 cv
255.36 305.336 255.584 306.064 256.032 306.582 cv
256.48 307.1 257.124 307.352 257.936 307.352 cv
258.3 307.352 258.65 307.31 259.014 307.212 cv
259.378 307.114 259.728 306.96 260.092 306.764 cv
260.092 307.926 li
259.728 308.094 259.364 308.22 259 308.29 cv
258.622 308.36 258.216 308.402 257.796 308.402 cv
256.648 308.402 255.724 308.052 255.052 307.324 cv
254.366 306.61 254.03 305.63 254.03 304.398 cv
254.03 303.152 254.366 302.172 255.052 301.458 cv
255.738 300.744 256.676 300.38 257.88 300.38 cv
258.272 300.38 258.65 300.422 259.014 300.506 cv
259.378 300.59 259.742 300.702 260.092 300.856 cv
ef
265.448 308.92 mo
265.084 309.816 264.734 310.418 264.398 310.698 cv
264.062 310.978 263.614 311.118 263.054 311.118 cv
262.046 311.118 li
262.046 310.068 li
262.788 310.068 li
263.124 310.068 263.39 309.984 263.586 309.816 cv
263.782 309.648 263.992 309.27 264.23 308.654 cv
264.454 308.094 li
261.36 300.562 li
262.69 300.562 li
265.084 306.554 li
267.478 300.562 li
268.808 300.562 li
265.448 308.92 li
ef
53.846 247.904 mo
50.346 247.904 li
f
53.846 247.904 mo
50.346 247.904 li
@
28.992 243.964 mo
28.278 243.964 27.746 244.314 27.382 245.014 cv
27.018 245.714 26.85 246.764 26.85 248.164 cv
26.85 249.564 27.018 250.614 27.382 251.314 cv
27.746 252.014 28.278 252.364 28.992 252.364 cv
29.706 252.364 30.238 252.014 30.602 251.314 cv
30.952 250.614 31.134 249.564 31.134 248.164 cv
31.134 246.764 30.952 245.714 30.602 245.014 cv
30.238 244.314 29.706 243.964 28.992 243.964 cv
28.992 242.872 mo
30.126 242.872 30.994 243.334 31.61 244.23 cv
32.212 245.14 32.52 246.456 32.52 248.164 cv
32.52 249.886 32.212 251.202 31.61 252.098 cv
30.994 252.994 30.126 253.442 28.992 253.442 cv
27.844 253.442 26.962 252.994 26.36 252.098 cv
25.758 251.202 25.464 249.886 25.464 248.164 cv
25.464 246.456 25.758 245.14 26.36 244.23 cv
26.962 243.334 27.844 242.872 28.992 242.872 cv
ef
35.038 253.26 mo
36.48 253.26 li
36.48 251.524 li
35.038 251.524 li
cp
f
39.716 252.098 mo
41.97 252.098 li
41.97 244.314 li
39.52 244.804 li
39.52 243.544 li
41.956 243.054 li
43.342 243.054 li
43.342 252.098 li
45.596 252.098 li
45.596 253.26 li
39.716 253.26 li
39.716 252.098 li
ef
53.846 197.695 mo
50.346 197.695 li
f
53.846 197.695 mo
50.346 197.695 li
@
28.992 193.684 mo
28.278 193.684 27.746 194.034 27.382 194.734 cv
27.018 195.434 26.85 196.484 26.85 197.884 cv
26.85 199.284 27.018 200.334 27.382 201.034 cv
27.746 201.734 28.278 202.084 28.992 202.084 cv
29.706 202.084 30.238 201.734 30.602 201.034 cv
30.952 200.334 31.134 199.284 31.134 197.884 cv
31.134 196.484 30.952 195.434 30.602 194.734 cv
30.238 194.034 29.706 193.684 28.992 193.684 cv
28.992 192.592 mo
30.126 192.592 30.994 193.054 31.61 193.95 cv
32.212 194.86 32.52 196.176 32.52 197.884 cv
32.52 199.606 32.212 200.922 31.61 201.818 cv
30.994 202.714 30.126 203.162 28.992 203.162 cv
27.844 203.162 26.962 202.714 26.36 201.818 cv
25.758 200.922 25.464 199.606 25.464 197.884 cv
25.464 196.176 25.758 194.86 26.36 193.95 cv
26.962 193.054 27.844 192.592 28.992 192.592 cv
ef
35.038 202.98 mo
36.48 202.98 li
36.48 201.244 li
35.038 201.244 li
cp
f
40.668 201.818 mo
45.484 201.818 li
45.484 202.98 li
39.002 202.98 li
39.002 201.818 li
39.52 201.286 40.234 200.558 41.144 199.634 cv
42.04 198.724 42.614 198.136 42.852 197.87 cv
43.3 197.38 43.608 196.96 43.776 196.61 cv
43.944 196.274 44.042 195.924 44.042 195.588 cv
44.042 195.056 43.846 194.608 43.468 194.272 cv
43.09 193.936 42.6 193.754 41.984 193.754 cv
41.55 193.754 41.088 193.838 40.612 193.978 cv
40.136 194.132 39.618 194.356 39.072 194.664 cv
39.072 193.264 li
39.632 193.04 40.15 192.872 40.626 192.76 cv
41.102 192.648 41.55 192.592 41.956 192.592 cv
43.006 192.592 43.846 192.858 44.476 193.39 cv
45.106 193.922 45.428 194.622 45.428 195.504 cv
45.428 195.924 45.344 196.33 45.19 196.694 cv
45.036 197.072 44.756 197.52 44.336 198.024 cv
44.224 198.164 43.86 198.542 43.244 199.172 cv
42.628 199.802 41.774 200.684 40.668 201.818 cv
ef
53.846 147.485 mo
50.346 147.485 li
f
53.846 147.485 mo
50.346 147.485 li
@
28.992 143.524 mo
28.278 143.524 27.746 143.874 27.382 144.574 cv
27.018 145.274 26.85 146.324 26.85 147.724 cv
26.85 149.124 27.018 150.174 27.382 150.874 cv
27.746 151.574 28.278 151.924 28.992 151.924 cv
29.706 151.924 30.238 151.574 30.602 150.874 cv
30.952 150.174 31.134 149.124 31.134 147.724 cv
31.134 146.324 30.952 145.274 30.602 144.574 cv
30.238 143.874 29.706 143.524 28.992 143.524 cv
28.992 142.432 mo
30.126 142.432 30.994 142.894 31.61 143.79 cv
32.212 144.7 32.52 146.016 32.52 147.724 cv
32.52 149.446 32.212 150.762 31.61 151.658 cv
30.994 152.554 30.126 153.002 28.992 153.002 cv
27.844 153.002 26.962 152.554 26.36 151.658 cv
25.758 150.762 25.464 149.446 25.464 147.724 cv
25.464 146.016 25.758 144.7 26.36 143.79 cv
26.962 142.894 27.844 142.432 28.992 142.432 cv
ef
35.038 152.82 mo
36.48 152.82 li
36.48 151.084 li
35.038 151.084 li
cp
f
43.664 147.318 mo
44.322 147.458 44.84 147.752 45.204 148.2 cv
45.568 148.648 45.764 149.208 45.764 149.852 cv
45.764 150.86 45.414 151.644 44.728 152.19 cv
44.028 152.736 43.048 153.002 41.774 153.002 cv
41.34 153.002 40.892 152.96 40.444 152.876 cv
39.996 152.806 39.52 152.68 39.044 152.512 cv
39.044 151.182 li
39.422 151.406 39.842 151.574 40.304 151.686 cv
40.752 151.798 41.228 151.854 41.732 151.854 cv
42.6 151.854 43.258 151.686 43.706 151.35 cv
44.154 151.014 44.392 150.51 44.392 149.852 cv
44.392 149.264 44.182 148.788 43.762 148.452 cv
43.342 148.116 42.754 147.934 41.998 147.934 cv
40.808 147.934 li
40.808 146.8 li
42.054 146.8 li
42.726 146.8 43.244 146.674 43.608 146.394 cv
43.972 146.128 44.154 145.736 44.154 145.218 cv
44.154 144.7 43.958 144.294 43.594 144.014 cv
43.216 143.734 42.684 143.594 41.998 143.594 cv
41.62 143.594 41.214 143.636 40.78 143.72 cv
40.346 143.804 39.87 143.93 39.352 144.098 cv
39.352 142.866 li
39.87 142.726 40.36 142.614 40.822 142.544 cv
41.27 142.474 41.704 142.432 42.124 142.432 cv
43.16 142.432 43.986 142.67 44.602 143.146 cv
45.218 143.622 45.526 144.266 45.526 145.078 cv
45.526 145.638 45.358 146.114 45.036 146.506 cv
44.714 146.898 44.252 147.178 43.664 147.318 cv
ef
53.846 97.275 mo
50.346 97.275 li
f
53.846 97.275 mo
50.346 97.275 li
@
28.992 93.244 mo
28.278 93.244 27.746 93.594 27.382 94.294 cv
27.018 94.994 26.85 96.044 26.85 97.444 cv
26.85 98.844 27.018 99.894 27.382 100.594 cv
27.746 101.294 28.278 101.644 28.992 101.644 cv
29.706 101.644 30.238 101.294 30.602 100.594 cv
30.952 99.894 31.134 98.844 31.134 97.444 cv
31.134 96.044 30.952 94.994 30.602 94.294 cv
30.238 93.594 29.706 93.244 28.992 93.244 cv
28.992 92.152 mo
30.126 92.152 30.994 92.614 31.61 93.51 cv
32.212 94.42 32.52 95.736 32.52 97.444 cv
32.52 99.166 32.212 100.482 31.61 101.378 cv
30.994 102.274 30.126 102.722 28.992 102.722 cv
27.844 102.722 26.962 102.274 26.36 101.378 cv
25.758 100.482 25.464 99.166 25.464 97.444 cv
25.464 95.736 25.758 94.42 26.36 93.51 cv
26.962 92.614 27.844 92.152 28.992 92.152 cv
ef
35.038 102.54 mo
36.48 102.54 li
36.48 100.804 li
35.038 100.804 li
cp
f
43.272 93.538 mo
39.786 98.984 li
43.272 98.984 li
43.272 93.538 li
42.908 92.334 mo
44.644 92.334 li
44.644 98.984 li
46.1 98.984 li
46.1 100.132 li
44.644 100.132 li
44.644 102.54 li
43.272 102.54 li
43.272 100.132 li
38.666 100.132 li
38.666 98.802 li
42.908 92.334 li
ef
53.846 47.065 mo
50.346 47.065 li
f
53.846 47.065 mo
50.346 47.065 li
@
28.992 43.084 mo
28.278 43.084 27.746 43.434 27.382 44.134 cv
27.018 44.834 26.85 45.884 26.85 47.284 cv
26.85 48.684 27.018 49.734 27.382 50.434 cv
27.746 51.134 28.278 51.484 28.992 51.484 cv
29.706 51.484 30.238 51.134 30.602 50.434 cv
30.952 49.734 31.134 48.684 31.134 47.284 cv
31.134 45.884 30.952 44.834 30.602 44.134 cv
30.238 43.434 29.706 43.084 28.992 43.084 cv
28.992 41.992 mo
30.126 41.992 30.994 42.454 31.61 43.35 cv
32.212 44.26 32.52 45.576 32.52 47.284 cv
32.52 49.006 32.212 50.322 31.61 51.218 cv
30.994 52.114 30.126 52.562 28.992 52.562 cv
27.844 52.562 26.962 52.114 26.36 51.218 cv
25.758 50.322 25.464 49.006 25.464 47.284 cv
25.464 45.576 25.758 44.26 26.36 43.35 cv
26.962 42.454 27.844 41.992 28.992 41.992 cv
ef
35.038 52.38 mo
36.48 52.38 li
36.48 50.644 li
35.038 50.644 li
cp
f
39.492 42.174 mo
44.91 42.174 li
44.91 43.336 li
40.752 43.336 li
40.752 45.842 li
40.948 45.772 41.158 45.716 41.354 45.688 cv
41.55 45.66 41.76 45.632 41.956 45.632 cv
43.09 45.632 43.986 45.954 44.658 46.57 cv
45.33 47.2 45.666 48.04 45.666 49.104 cv
45.666 50.21 45.316 51.064 44.63 51.666 cv
43.944 52.268 42.978 52.562 41.746 52.562 cv
41.312 52.562 40.878 52.52 40.43 52.464 cv
39.982 52.394 39.534 52.296 39.058 52.142 cv
39.058 50.756 li
39.464 50.98 39.884 51.148 40.332 51.26 cv
40.766 51.372 41.228 51.414 41.718 51.414 cv
42.502 51.414 43.132 51.218 43.594 50.798 cv
44.042 50.378 44.28 49.818 44.28 49.104 cv
44.28 48.404 44.042 47.844 43.594 47.424 cv
43.132 47.004 42.502 46.794 41.718 46.794 cv
41.354 46.794 40.976 46.836 40.612 46.92 cv
40.248 47.004 39.87 47.13 39.492 47.298 cv
39.492 42.174 li
ef
7.494 168.688 mo
7.494 160.064 li
8.656 160.064 li
8.656 163.69 li
17.7 163.69 li
17.7 165.076 li
8.656 165.076 li
8.656 168.688 li
7.494 168.688 li
ef
10.042 158.824 mo
10.042 157.564 li
17.7 157.564 li
17.7 158.824 li
10.042 158.824 li
7.06 158.824 mo
8.656 158.824 mo
7.06 158.824 li
7.06 157.564 li
8.656 157.564 li
cp
ef
11.512 148.9 mo
10.952 148.592 10.546 148.214 10.266 147.78 cv
10 147.346 9.86 146.828 9.86 146.226 cv
9.86 145.442 10.14 144.826 10.7 144.392 cv
11.26 143.958 12.058 143.734 13.08 143.734 cv
17.7 143.734 li
17.7 144.994 li
13.122 144.994 li
12.394 144.994 11.848 145.134 11.484 145.386 cv
11.134 145.652 10.952 146.044 10.952 146.576 cv
10.952 147.234 11.176 147.752 11.61 148.13 cv
12.044 148.508 12.632 148.69 13.374 148.69 cv
17.7 148.69 li
17.7 149.95 li
13.122 149.95 li
12.394 149.95 11.848 150.09 11.484 150.342 cv
11.134 150.608 10.952 151.014 10.952 151.546 cv
10.952 152.19 11.176 152.708 11.61 153.086 cv
12.044 153.464 12.632 153.646 13.374 153.646 cv
17.7 153.646 li
17.7 154.906 li
10.042 154.906 li
10.042 153.646 li
11.232 153.646 li
10.77 153.366 10.42 153.016 10.196 152.61 cv
9.972 152.218 9.86 151.742 9.86 151.182 cv
9.86 150.622 10 150.16 10.28 149.768 cv
10.56 149.376 10.98 149.096 11.512 148.9 cv
ef
13.556 134.752 mo
14.172 134.752 li
14.172 140.534 li
15.04 140.478 15.712 140.226 16.16 139.75 cv
16.608 139.288 16.832 138.644 16.832 137.804 cv
16.832 137.328 16.776 136.852 16.664 136.404 cv
16.552 135.956 16.37 135.494 16.118 135.046 cv
17.308 135.046 li
17.504 135.494 17.658 135.956 17.742 136.432 cv
17.826 136.908 17.882 137.398 17.882 137.874 cv
17.882 139.106 17.532 140.072 16.832 140.786 cv
16.132 141.5 15.166 141.85 13.948 141.85 cv
12.702 141.85 11.708 141.514 10.966 140.842 cv
10.238 140.17 9.86 139.246 9.86 138.098 cv
9.86 137.062 10.196 136.25 10.854 135.648 cv
11.526 135.06 12.422 134.752 13.556 134.752 cv
13.192 136.012 mo
12.506 136.026 11.96 136.222 11.54 136.586 cv
11.134 136.964 10.924 137.468 10.924 138.084 cv
10.924 138.784 11.134 139.344 11.526 139.764 cv
11.918 140.184 12.478 140.436 13.192 140.492 cv
13.192 136.012 li
ef
7.074 125.2 mo
8.138 125.816 9.174 126.264 10.196 126.558 cv
11.218 126.866 12.254 127.006 13.304 127.006 cv
14.368 127.006 15.404 126.866 16.426 126.558 cv
17.462 126.264 18.484 125.816 19.534 125.2 cv
19.534 126.292 li
18.456 126.978 17.42 127.496 16.384 127.832 cv
15.348 128.168 14.326 128.336 13.304 128.336 cv
12.296 128.336 11.274 128.168 10.238 127.832 cv
9.202 127.496 8.152 126.992 7.074 126.292 cv
7.074 125.2 li
ef
10.266 117.818 mo
11.456 117.818 li
11.288 118.182 11.148 118.546 11.05 118.924 cv
10.966 119.316 10.91 119.708 10.91 120.114 cv
10.91 120.744 11.008 121.22 11.204 121.528 cv
11.4 121.836 11.68 121.99 12.058 121.99 cv
12.352 121.99 12.576 121.878 12.744 121.654 cv
12.912 121.43 13.08 120.982 13.22 120.31 cv
13.318 119.876 li
13.514 118.98 13.794 118.35 14.13 117.972 cv
14.48 117.608 14.97 117.412 15.586 117.412 cv
16.3 117.412 16.86 117.692 17.266 118.252 cv
17.686 118.812 17.882 119.596 17.882 120.576 cv
17.882 120.996 17.84 121.416 17.77 121.864 cv
17.7 122.312 17.588 122.774 17.42 123.264 cv
16.118 123.264 li
16.37 122.802 16.552 122.34 16.664 121.892 cv
16.79 121.444 16.846 120.996 16.846 120.548 cv
16.846 119.96 16.748 119.498 16.552 119.176 cv
16.356 118.868 16.062 118.7 15.684 118.7 cv
15.348 118.7 15.082 118.826 14.9 119.05 cv
14.718 119.274 14.536 119.778 14.368 120.562 cv
14.27 120.996 li
14.102 121.78 13.85 122.354 13.514 122.69 cv
13.178 123.04 12.716 123.208 12.114 123.208 cv
11.4 123.208 10.84 122.956 10.448 122.452 cv
10.056 121.948 9.86 121.22 9.86 120.268 cv
9.86 119.806 9.902 119.372 9.972 118.952 cv
10.042 118.546 10.14 118.168 10.266 117.818 cv
ef
7.074 115.58 mo
7.074 114.488 li
8.152 113.816 9.202 113.298 10.238 112.962 cv
11.274 112.626 12.296 112.444 13.304 112.444 cv
14.326 112.444 15.348 112.626 16.384 112.962 cv
17.42 113.298 18.456 113.816 19.534 114.488 cv
19.534 115.58 li
18.484 114.978 17.462 114.53 16.426 114.222 cv
15.404 113.928 14.368 113.774 13.304 113.774 cv
12.254 113.774 11.218 113.928 10.196 114.222 cv
9.174 114.53 8.138 114.978 7.074 115.58 cv
ef
1.5 lw
2 lc
70.079 235.527 mo
106.152 226.12 li
142.224 232.915 li
178.297 224.654 li
214.37 218.766 li
250.443 218.641 li
286.515 218.977 li
322.588 237.898 li
358.661 235.152 li
394.734 219.921 li
.905547 .71957 0 0 cmyk
@
67.079 238.527 mo
73.079 238.527 li
73.079 232.527 li
67.079 232.527 li
cp
f
1 lw
0 lc
0 lj
67.079 238.527 mo
73.079 238.527 li
73.079 232.527 li
67.079 232.527 li
cp
@
103.152 229.12 mo
109.152 229.12 li
109.152 223.12 li
103.152 223.12 li
cp
f
103.152 229.12 mo
109.152 229.12 li
109.152 223.12 li
103.152 223.12 li
cp
@
139.225 235.915 mo
145.225 235.915 li
145.225 229.915 li
139.225 229.915 li
cp
f
139.225 235.915 mo
145.225 235.915 li
145.225 229.915 li
139.225 229.915 li
cp
@
175.297 227.654 mo
181.297 227.654 li
181.297 221.654 li
175.297 221.654 li
cp
f
175.297 227.654 mo
181.297 227.654 li
181.297 221.654 li
175.297 221.654 li
cp
@
211.37 221.767 mo
217.37 221.767 li
217.37 215.767 li
211.37 215.767 li
cp
f
211.37 221.767 mo
217.37 221.767 li
217.37 215.767 li
211.37 215.767 li
cp
@
247.443 221.642 mo
253.443 221.642 li
253.443 215.642 li
247.443 215.642 li
cp
f
247.443 221.642 mo
253.443 221.642 li
253.443 215.642 li
247.443 215.642 li
cp
@
283.516 221.977 mo
289.516 221.977 li
289.516 215.977 li
283.516 215.977 li
cp
f
283.516 221.977 mo
289.516 221.977 li
289.516 215.977 li
283.516 215.977 li
cp
@
319.588 240.898 mo
325.588 240.898 li
325.588 234.898 li
319.588 234.898 li
cp
f
319.588 240.898 mo
325.588 240.898 li
325.588 234.898 li
319.588 234.898 li
cp
@
355.661 238.152 mo
361.661 238.152 li
361.661 232.152 li
355.661 232.152 li
cp
f
355.661 238.152 mo
361.661 238.152 li
361.661 232.152 li
355.661 232.152 li
cp
@
391.734 222.921 mo
397.734 222.921 li
397.734 216.921 li
391.734 216.921 li
cp
f
391.734 222.921 mo
397.734 222.921 li
397.734 216.921 li
391.734 216.921 li
cp
@
1.5 lw
2 lc
1 lj
70.079 161.332 mo
106.152 170.182 li
142.224 152.695 li
178.297 161.847 li
214.37 174.644 li
250.443 169.353 li
286.515 174.657 li
322.588 171.755 li
358.661 174.671 li
394.734 161.847 li
@
70.079 164.332 mo
70.875 164.332 71.638 164.016 72.2 163.453 cv
72.763 162.891 73.079 162.128 73.079 161.332 cv
73.079 160.536 72.763 159.773 72.2 159.211 cv
71.638 158.648 70.875 158.332 70.079 158.332 cv
69.283 158.332 68.52 158.648 67.958 159.211 cv
67.395 159.773 67.079 160.536 67.079 161.332 cv
67.079 162.128 67.395 162.891 67.958 163.453 cv
68.52 164.016 69.283 164.332 70.079 164.332 cv
cp
f
1 lw
0 lc
70.079 164.332 mo
70.875 164.332 71.638 164.016 72.2 163.453 cv
72.763 162.891 73.079 162.128 73.079 161.332 cv
73.079 160.536 72.763 159.773 72.2 159.211 cv
71.638 158.648 70.875 158.332 70.079 158.332 cv
69.283 158.332 68.52 158.648 67.958 159.211 cv
67.395 159.773 67.079 160.536 67.079 161.332 cv
67.079 162.128 67.395 162.891 67.958 163.453 cv
68.52 164.016 69.283 164.332 70.079 164.332 cv
cp
@
106.152 173.182 mo
106.948 173.182 107.711 172.866 108.273 172.303 cv
108.836 171.741 109.152 170.978 109.152 170.182 cv
109.152 169.386 108.836 168.623 108.273 168.061 cv
107.711 167.498 106.948 167.182 106.152 167.182 cv
105.356 167.182 104.593 167.498 104.031 168.061 cv
103.468 168.623 103.152 169.386 103.152 170.182 cv
103.152 170.978 103.468 171.741 104.031 172.303 cv
104.593 172.866 105.356 173.182 106.152 173.182 cv
cp
f
106.152 173.182 mo
106.948 173.182 107.711 172.866 108.273 172.303 cv
108.836 171.741 109.152 170.978 109.152 170.182 cv
109.152 169.386 108.836 168.623 108.273 168.061 cv
107.711 167.498 106.948 167.182 106.152 167.182 cv
105.356 167.182 104.593 167.498 104.031 168.061 cv
103.468 168.623 103.152 169.386 103.152 170.182 cv
103.152 170.978 103.468 171.741 104.031 172.303 cv
104.593 172.866 105.356 173.182 106.152 173.182 cv
cp
@
142.225 155.695 mo
143.021 155.695 143.784 155.379 144.346 154.816 cv
144.909 154.254 145.225 153.491 145.225 152.695 cv
145.225 151.899 144.909 151.136 144.346 150.574 cv
143.784 150.011 143.021 149.695 142.225 149.695 cv
141.429 149.695 140.666 150.011 140.104 150.574 cv
139.541 151.136 139.225 151.899 139.225 152.695 cv
139.225 153.491 139.541 154.254 140.104 154.816 cv
140.666 155.379 141.429 155.695 142.225 155.695 cv
cp
f
142.225 155.695 mo
143.021 155.695 143.784 155.379 144.346 154.816 cv
144.909 154.254 145.225 153.491 145.225 152.695 cv
145.225 151.899 144.909 151.136 144.346 150.574 cv
143.784 150.011 143.021 149.695 142.225 149.695 cv
141.429 149.695 140.666 150.011 140.104 150.574 cv
139.541 151.136 139.225 151.899 139.225 152.695 cv
139.225 153.491 139.541 154.254 140.104 154.816 cv
140.666 155.379 141.429 155.695 142.225 155.695 cv
cp
@
178.297 164.847 mo
179.093 164.847 179.856 164.531 180.418 163.968 cv
180.981 163.406 181.297 162.643 181.297 161.847 cv
181.297 161.051 180.981 160.288 180.418 159.726 cv
179.856 159.163 179.093 158.847 178.297 158.847 cv
177.501 158.847 176.738 159.163 176.176 159.726 cv
175.613 160.288 175.297 161.051 175.297 161.847 cv
175.297 162.643 175.613 163.406 176.176 163.968 cv
176.738 164.531 177.501 164.847 178.297 164.847 cv
cp
f
178.297 164.847 mo
179.093 164.847 179.856 164.531 180.418 163.968 cv
180.981 163.406 181.297 162.643 181.297 161.847 cv
181.297 161.051 180.981 160.288 180.418 159.726 cv
179.856 159.163 179.093 158.847 178.297 158.847 cv
177.501 158.847 176.738 159.163 176.176 159.726 cv
175.613 160.288 175.297 161.051 175.297 161.847 cv
175.297 162.643 175.613 163.406 176.176 163.968 cv
176.738 164.531 177.501 164.847 178.297 164.847 cv
cp
@
214.37 177.644 mo
215.166 177.644 215.929 177.328 216.491 176.765 cv
217.054 176.203 217.37 175.44 217.37 174.644 cv
217.37 173.848 217.054 173.085 216.491 172.523 cv
215.929 171.96 215.166 171.644 214.37 171.644 cv
213.574 171.644 212.811 171.96 212.249 172.523 cv
211.686 173.085 211.37 173.848 211.37 174.644 cv
211.37 175.44 211.686 176.203 212.249 176.765 cv
212.811 177.328 213.574 177.644 214.37 177.644 cv
cp
f
214.37 177.644 mo
215.166 177.644 215.929 177.328 216.491 176.765 cv
217.054 176.203 217.37 175.44 217.37 174.644 cv
217.37 173.848 217.054 173.085 216.491 172.523 cv
215.929 171.96 215.166 171.644 214.37 171.644 cv
213.574 171.644 212.811 171.96 212.249 172.523 cv
211.686 173.085 211.37 173.848 211.37 174.644 cv
211.37 175.44 211.686 176.203 212.249 176.765 cv
212.811 177.328 213.574 177.644 214.37 177.644 cv
cp
@
250.443 172.353 mo
251.239 172.353 252.002 172.037 252.564 171.474 cv
253.127 170.912 253.443 170.149 253.443 169.353 cv
253.443 168.557 253.127 167.794 252.564 167.232 cv
252.002 166.669 251.239 166.353 250.443 166.353 cv
249.647 166.353 248.884 166.669 248.322 167.232 cv
247.759 167.794 247.443 168.557 247.443 169.353 cv
247.443 170.149 247.759 170.912 248.322 171.474 cv
248.884 172.037 249.647 172.353 250.443 172.353 cv
cp
f
250.443 172.353 mo
251.239 172.353 252.002 172.037 252.564 171.474 cv
253.127 170.912 253.443 170.149 253.443 169.353 cv
253.443 168.557 253.127 167.794 252.564 167.232 cv
252.002 166.669 251.239 166.353 250.443 166.353 cv
249.647 166.353 248.884 166.669 248.322 167.232 cv
247.759 167.794 247.443 168.557 247.443 169.353 cv
247.443 170.149 247.759 170.912 248.322 171.474 cv
248.884 172.037 249.647 172.353 250.443 172.353 cv
cp
@
286.516 177.657 mo
287.312 177.657 288.075 177.341 288.637 176.778 cv
289.2 176.216 289.516 175.453 289.516 174.657 cv
289.516 173.861 289.2 173.098 288.637 172.536 cv
288.075 171.973 287.312 171.657 286.516 171.657 cv
285.72 171.657 284.957 171.973 284.395 172.536 cv
283.832 173.098 283.516 173.861 283.516 174.657 cv
283.516 175.453 283.832 176.216 284.395 176.778 cv
284.957 177.341 285.72 177.657 286.516 177.657 cv
cp
f
286.516 177.657 mo
287.312 177.657 288.075 177.341 288.637 176.778 cv
289.2 176.216 289.516 175.453 289.516 174.657 cv
289.516 173.861 289.2 173.098 288.637 172.536 cv
288.075 171.973 287.312 171.657 286.516 171.657 cv
285.72 171.657 284.957 171.973 284.395 172.536 cv
283.832 173.098 283.516 173.861 283.516 174.657 cv
283.516 175.453 283.832 176.216 284.395 176.778 cv
284.957 177.341 285.72 177.657 286.516 177.657 cv
cp
@
322.588 174.755 mo
323.384 174.755 324.147 174.439 324.709 173.876 cv
325.272 173.314 325.588 172.551 325.588 171.755 cv
325.588 170.959 325.272 170.196 324.709 169.634 cv
324.147 169.071 323.384 168.755 322.588 168.755 cv
321.792 168.755 321.029 169.071 320.467 169.634 cv
319.904 170.196 319.588 170.959 319.588 171.755 cv
319.588 172.551 319.904 173.314 320.467 173.876 cv
321.029 174.439 321.792 174.755 322.588 174.755 cv
cp
f
322.588 174.755 mo
323.384 174.755 324.147 174.439 324.709 173.876 cv
325.272 173.314 325.588 172.551 325.588 171.755 cv
325.588 170.959 325.272 170.196 324.709 169.634 cv
324.147 169.071 323.384 168.755 322.588 168.755 cv
321.792 168.755 321.029 169.071 320.467 169.634 cv
319.904 170.196 319.588 170.959 319.588 171.755 cv
319.588 172.551 319.904 173.314 320.467 173.876 cv
321.029 174.439 321.792 174.755 322.588 174.755 cv
cp
@
358.661 177.671 mo
359.457 177.671 360.22 177.355 360.782 176.792 cv
361.345 176.23 361.661 175.467 361.661 174.671 cv
361.661 173.875 361.345 173.112 360.782 172.55 cv
360.22 171.987 359.457 171.671 358.661 171.671 cv
357.865 171.671 357.102 171.987 356.54 172.55 cv
355.977 173.112 355.661 173.875 355.661 174.671 cv
355.661 175.467 355.977 176.23 356.54 176.792 cv
357.102 177.355 357.865 177.671 358.661 177.671 cv
cp
f
358.661 177.671 mo
359.457 177.671 360.22 177.355 360.782 176.792 cv
361.345 176.23 361.661 175.467 361.661 174.671 cv
361.661 173.875 361.345 173.112 360.782 172.55 cv
360.22 171.987 359.457 171.671 358.661 171.671 cv
357.865 171.671 357.102 171.987 356.54 172.55 cv
355.977 173.112 355.661 173.875 355.661 174.671 cv
355.661 175.467 355.977 176.23 356.54 176.792 cv
357.102 177.355 357.865 177.671 358.661 177.671 cv
cp
@
394.734 164.847 mo
395.53 164.847 396.293 164.531 396.855 163.968 cv
397.418 163.406 397.734 162.643 397.734 161.847 cv
397.734 161.051 397.418 160.288 396.855 159.726 cv
396.293 159.163 395.53 158.847 394.734 158.847 cv
393.938 158.847 393.175 159.163 392.613 159.726 cv
392.05 160.288 391.734 161.051 391.734 161.847 cv
391.734 162.643 392.05 163.406 392.613 163.968 cv
393.175 164.531 393.938 164.847 394.734 164.847 cv
cp
f
394.734 164.847 mo
395.53 164.847 396.293 164.531 396.855 163.968 cv
397.418 163.406 397.734 162.643 397.734 161.847 cv
397.734 161.051 397.418 160.288 396.855 159.726 cv
396.293 159.163 395.53 158.847 394.734 158.847 cv
393.938 158.847 393.175 159.163 392.613 159.726 cv
392.05 160.288 391.734 161.051 391.734 161.847 cv
391.734 162.643 392.05 163.406 392.613 163.968 cv
393.175 164.531 393.938 164.847 394.734 164.847 cv
cp
@
1.5 lw
2 lc
70.079 196.62 mo
106.152 186.857 li
142.224 190.996 li
178.297 193.656 li
214.37 201.094 li
250.443 188.309 li
286.515 191.167 li
322.588 204.811 li
358.661 193.656 li
394.734 190.996 li
0 .9617 .904814 0 cmyk
@
67.079 199.62 mo
73.079 199.62 li
73.079 193.62 li
67.079 193.62 li
cp
f
1 lw
0 lc
0 lj
67.079 199.62 mo
73.079 199.62 li
73.079 193.62 li
67.079 193.62 li
cp
@
103.152 189.857 mo
109.152 189.857 li
109.152 183.857 li
103.152 183.857 li
cp
f
103.152 189.857 mo
109.152 189.857 li
109.152 183.857 li
103.152 183.857 li
cp
@
139.225 193.996 mo
145.225 193.996 li
145.225 187.996 li
139.225 187.996 li
cp
f
139.225 193.996 mo
145.225 193.996 li
145.225 187.996 li
139.225 187.996 li
cp
@
175.297 196.656 mo
181.297 196.656 li
181.297 190.656 li
175.297 190.656 li
cp
f
175.297 196.656 mo
181.297 196.656 li
181.297 190.656 li
175.297 190.656 li
cp
@
211.37 204.094 mo
217.37 204.094 li
217.37 198.094 li
211.37 198.094 li
cp
f
211.37 204.094 mo
217.37 204.094 li
217.37 198.094 li
211.37 198.094 li
cp
@
247.443 191.309 mo
253.443 191.309 li
253.443 185.309 li
247.443 185.309 li
cp
f
247.443 191.309 mo
253.443 191.309 li
253.443 185.309 li
247.443 185.309 li
cp
@
283.516 194.167 mo
289.516 194.167 li
289.516 188.167 li
283.516 188.167 li
cp
f
283.516 194.167 mo
289.516 194.167 li
289.516 188.167 li
283.516 188.167 li
cp
@
319.588 207.811 mo
325.588 207.811 li
325.588 201.811 li
319.588 201.811 li
cp
f
319.588 207.811 mo
325.588 207.811 li
325.588 201.811 li
319.588 201.811 li
cp
@
355.661 196.656 mo
361.661 196.656 li
361.661 190.656 li
355.661 190.656 li
cp
f
355.661 196.656 mo
361.661 196.656 li
361.661 190.656 li
355.661 190.656 li
cp
@
391.734 193.996 mo
397.734 193.996 li
397.734 187.996 li
391.734 187.996 li
cp
f
391.734 193.996 mo
397.734 193.996 li
397.734 187.996 li
391.734 187.996 li
cp
@
1.5 lw
2 lc
1 lj
70.079 58.596 mo
106.152 89.094 li
142.224 92.295 li
178.297 96.152 li
214.37 97.553 li
250.443 84.853 li
286.515 77.212 li
322.588 91.69 li
358.661 82.75 li
394.734 80.243 li
@
70.079 61.596 mo
70.875 61.596 71.638 61.28 72.2 60.717 cv
72.763 60.155 73.079 59.392 73.079 58.596 cv
73.079 57.8 72.763 57.037 72.2 56.475 cv
71.638 55.912 70.875 55.596 70.079 55.596 cv
69.283 55.596 68.52 55.912 67.958 56.475 cv
67.395 57.037 67.079 57.8 67.079 58.596 cv
67.079 59.392 67.395 60.155 67.958 60.717 cv
68.52 61.28 69.283 61.596 70.079 61.596 cv
cp
f
1 lw
0 lc
70.079 61.596 mo
70.875 61.596 71.638 61.28 72.2 60.717 cv
72.763 60.155 73.079 59.392 73.079 58.596 cv
73.079 57.8 72.763 57.037 72.2 56.475 cv
71.638 55.912 70.875 55.596 70.079 55.596 cv
69.283 55.596 68.52 55.912 67.958 56.475 cv
67.395 57.037 67.079 57.8 67.079 58.596 cv
67.079 59.392 67.395 60.155 67.958 60.717 cv
68.52 61.28 69.283 61.596 70.079 61.596 cv
cp
@
106.152 92.094 mo
106.948 92.094 107.711 91.778 108.273 91.215 cv
108.836 90.653 109.152 89.89 109.152 89.094 cv
109.152 88.298 108.836 87.535 108.273 86.973 cv
107.711 86.41 106.948 86.094 106.152 86.094 cv
105.356 86.094 104.593 86.41 104.031 86.973 cv
103.468 87.535 103.152 88.298 103.152 89.094 cv
103.152 89.89 103.468 90.653 104.031 91.215 cv
104.593 91.778 105.356 92.094 106.152 92.094 cv
cp
f
106.152 92.094 mo
106.948 92.094 107.711 91.778 108.273 91.215 cv
108.836 90.653 109.152 89.89 109.152 89.094 cv
109.152 88.298 108.836 87.535 108.273 86.973 cv
107.711 86.41 106.948 86.094 106.152 86.094 cv
105.356 86.094 104.593 86.41 104.031 86.973 cv
103.468 87.535 103.152 88.298 103.152 89.094 cv
103.152 89.89 103.468 90.653 104.031 91.215 cv
104.593 91.778 105.356 92.094 106.152 92.094 cv
cp
@
142.225 95.296 mo
143.021 95.296 143.784 94.98 144.346 94.417 cv
144.909 93.855 145.225 93.092 145.225 92.296 cv
145.225 91.5 144.909 90.737 144.346 90.175 cv
143.784 89.612 143.021 89.296 142.225 89.296 cv
141.429 89.296 140.666 89.612 140.104 90.175 cv
139.541 90.737 139.225 91.5 139.225 92.296 cv
139.225 93.092 139.541 93.855 140.104 94.417 cv
140.666 94.98 141.429 95.296 142.225 95.296 cv
cp
f
142.225 95.296 mo
143.021 95.296 143.784 94.98 144.346 94.417 cv
144.909 93.855 145.225 93.092 145.225 92.296 cv
145.225 91.5 144.909 90.737 144.346 90.175 cv
143.784 89.612 143.021 89.296 142.225 89.296 cv
141.429 89.296 140.666 89.612 140.104 90.175 cv
139.541 90.737 139.225 91.5 139.225 92.296 cv
139.225 93.092 139.541 93.855 140.104 94.417 cv
140.666 94.98 141.429 95.296 142.225 95.296 cv
cp
@
178.297 99.153 mo
179.093 99.153 179.856 98.837 180.418 98.274 cv
180.981 97.712 181.297 96.949 181.297 96.153 cv
181.297 95.357 180.981 94.594 180.418 94.032 cv
179.856 93.469 179.093 93.153 178.297 93.153 cv
177.501 93.153 176.738 93.469 176.176 94.032 cv
175.613 94.594 175.297 95.357 175.297 96.153 cv
175.297 96.949 175.613 97.712 176.176 98.274 cv
176.738 98.837 177.501 99.153 178.297 99.153 cv
cp
f
178.297 99.153 mo
179.093 99.153 179.856 98.837 180.418 98.274 cv
180.981 97.712 181.297 96.949 181.297 96.153 cv
181.297 95.357 180.981 94.594 180.418 94.032 cv
179.856 93.469 179.093 93.153 178.297 93.153 cv
177.501 93.153 176.738 93.469 176.176 94.032 cv
175.613 94.594 175.297 95.357 175.297 96.153 cv
175.297 96.949 175.613 97.712 176.176 98.274 cv
176.738 98.837 177.501 99.153 178.297 99.153 cv
cp
@
214.37 100.553 mo
215.166 100.553 215.929 100.237 216.491 99.674 cv
217.054 99.112 217.37 98.349 217.37 97.553 cv
217.37 96.757 217.054 95.994 216.491 95.432 cv
215.929 94.869 215.166 94.553 214.37 94.553 cv
213.574 94.553 212.811 94.869 212.249 95.432 cv
211.686 95.994 211.37 96.757 211.37 97.553 cv
211.37 98.349 211.686 99.112 212.249 99.674 cv
212.811 100.237 213.574 100.553 214.37 100.553 cv
cp
f
214.37 100.553 mo
215.166 100.553 215.929 100.237 216.491 99.674 cv
217.054 99.112 217.37 98.349 217.37 97.553 cv
217.37 96.757 217.054 95.994 216.491 95.432 cv
215.929 94.869 215.166 94.553 214.37 94.553 cv
213.574 94.553 212.811 94.869 212.249 95.432 cv
211.686 95.994 211.37 96.757 211.37 97.553 cv
211.37 98.349 211.686 99.112 212.249 99.674 cv
212.811 100.237 213.574 100.553 214.37 100.553 cv
cp
@
250.443 87.853 mo
251.239 87.853 252.002 87.537 252.564 86.974 cv
253.127 86.412 253.443 85.649 253.443 84.853 cv
253.443 84.057 253.127 83.294 252.564 82.732 cv
252.002 82.169 251.239 81.853 250.443 81.853 cv
249.647 81.853 248.884 82.169 248.322 82.732 cv
247.759 83.294 247.443 84.057 247.443 84.853 cv
247.443 85.649 247.759 86.412 248.322 86.974 cv
248.884 87.537 249.647 87.853 250.443 87.853 cv
cp
f
250.443 87.853 mo
251.239 87.853 252.002 87.537 252.564 86.974 cv
253.127 86.412 253.443 85.649 253.443 84.853 cv
253.443 84.057 253.127 83.294 252.564 82.732 cv
252.002 82.169 251.239 81.853 250.443 81.853 cv
249.647 81.853 248.884 82.169 248.322 82.732 cv
247.759 83.294 247.443 84.057 247.443 84.853 cv
247.443 85.649 247.759 86.412 248.322 86.974 cv
248.884 87.537 249.647 87.853 250.443 87.853 cv
cp
@
286.516 80.213 mo
287.312 80.213 288.075 79.897 288.637 79.334 cv
289.2 78.772 289.516 78.009 289.516 77.213 cv
289.516 76.417 289.2 75.654 288.637 75.092 cv
288.075 74.529 287.312 74.213 286.516 74.213 cv
285.72 74.213 284.957 74.529 284.395 75.092 cv
283.832 75.654 283.516 76.417 283.516 77.213 cv
283.516 78.009 283.832 78.772 284.395 79.334 cv
284.957 79.897 285.72 80.213 286.516 80.213 cv
cp
f
286.516 80.213 mo
287.312 80.213 288.075 79.897 288.637 79.334 cv
289.2 78.772 289.516 78.009 289.516 77.213 cv
289.516 76.417 289.2 75.654 288.637 75.092 cv
288.075 74.529 287.312 74.213 286.516 74.213 cv
285.72 74.213 284.957 74.529 284.395 75.092 cv
283.832 75.654 283.516 76.417 283.516 77.213 cv
283.516 78.009 283.832 78.772 284.395 79.334 cv
284.957 79.897 285.72 80.213 286.516 80.213 cv
cp
@
322.588 94.69 mo
323.384 94.69 324.147 94.374 324.709 93.811 cv
325.272 93.249 325.588 92.486 325.588 91.69 cv
325.588 90.894 325.272 90.131 324.709 89.569 cv
324.147 89.006 323.384 88.69 322.588 88.69 cv
321.792 88.69 321.029 89.006 320.467 89.569 cv
319.904 90.131 319.588 90.894 319.588 91.69 cv
319.588 92.486 319.904 93.249 320.467 93.811 cv
321.029 94.374 321.792 94.69 322.588 94.69 cv
cp
f
322.588 94.69 mo
323.384 94.69 324.147 94.374 324.709 93.811 cv
325.272 93.249 325.588 92.486 325.588 91.69 cv
325.588 90.894 325.272 90.131 324.709 89.569 cv
324.147 89.006 323.384 88.69 322.588 88.69 cv
321.792 88.69 321.029 89.006 320.467 89.569 cv
319.904 90.131 319.588 90.894 319.588 91.69 cv
319.588 92.486 319.904 93.249 320.467 93.811 cv
321.029 94.374 321.792 94.69 322.588 94.69 cv
cp
@
358.661 85.751 mo
359.457 85.751 360.22 85.435 360.782 84.872 cv
361.345 84.31 361.661 83.547 361.661 82.751 cv
361.661 81.955 361.345 81.192 360.782 80.63 cv
360.22 80.067 359.457 79.751 358.661 79.751 cv
357.865 79.751 357.102 80.067 356.54 80.63 cv
355.977 81.192 355.661 81.955 355.661 82.751 cv
355.661 83.547 355.977 84.31 356.54 84.872 cv
357.102 85.435 357.865 85.751 358.661 85.751 cv
cp
f
358.661 85.751 mo
359.457 85.751 360.22 85.435 360.782 84.872 cv
361.345 84.31 361.661 83.547 361.661 82.751 cv
361.661 81.955 361.345 81.192 360.782 80.63 cv
360.22 80.067 359.457 79.751 358.661 79.751 cv
357.865 79.751 357.102 80.067 356.54 80.63 cv
355.977 81.192 355.661 81.955 355.661 82.751 cv
355.661 83.547 355.977 84.31 356.54 84.872 cv
357.102 85.435 357.865 85.751 358.661 85.751 cv
cp
@
394.734 83.244 mo
395.53 83.244 396.293 82.928 396.855 82.365 cv
397.418 81.803 397.734 81.04 397.734 80.244 cv
397.734 79.448 397.418 78.685 396.855 78.123 cv
396.293 77.56 395.53 77.244 394.734 77.244 cv
393.938 77.244 393.175 77.56 392.613 78.123 cv
392.05 78.685 391.734 79.448 391.734 80.244 cv
391.734 81.04 392.05 81.803 392.613 82.365 cv
393.175 82.928 393.938 83.244 394.734 83.244 cv
cp
f
394.734 83.244 mo
395.53 83.244 396.293 82.928 396.855 82.365 cv
397.418 81.803 397.734 81.04 397.734 80.244 cv
397.734 79.448 397.418 78.685 396.855 78.123 cv
396.293 77.56 395.53 77.244 394.734 77.244 cv
393.938 77.244 393.175 77.56 392.613 78.123 cv
392.05 78.685 391.734 79.448 391.734 80.244 cv
391.734 81.04 392.05 81.803 392.613 82.365 cv
393.175 82.928 393.938 83.244 394.734 83.244 cv
cp
@
.8 lw
2 lc
0 lj
53.846 273.009 mo
53.846 6.897 li
1 /0 /CSD get_res sepcs
1 sep
@
410.966 273.009 mo
410.966 6.897 li
@
53.846 273.009 mo
410.966 273.009 li
@
53.846 6.897 mo
410.966 6.897 li
@
310.873 73.585 mo
403.967 73.585 li
405.3 73.585 405.967 72.918 405.967 71.585 cv
405.967 13.897 li
405.967 12.564 405.3 11.897 403.967 11.897 cv
310.873 11.897 li
309.54 11.897 308.873 12.564 308.873 13.897 cv
308.873 71.585 li
308.873 72.918 309.54 73.585 310.873 73.585 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
310.873 73.585 mo
403.967 73.585 li
405.3 73.585 405.967 72.918 405.967 71.585 cv
405.967 13.897 li
405.967 12.564 405.3 11.897 403.967 11.897 cv
310.873 11.897 li
309.54 11.897 308.873 12.564 308.873 13.897 cv
308.873 71.585 li
308.873 72.918 309.54 73.585 310.873 73.585 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
312.873 19.991 mo
332.873 19.991 li
.905547 .71957 0 0 cmyk
@
319.873 22.991 mo
325.873 22.991 li
325.873 16.991 li
319.873 16.991 li
cp
f
1 lw
0 lc
0 lj
319.873 22.991 mo
325.873 22.991 li
325.873 16.991 li
319.873 16.991 li
cp
@
346.21 16.41 mo
346.21 17.37 li
345.83 17.19 345.48 17.06 345.15 16.97 cv
344.81 16.89 344.49 16.84 344.19 16.84 cv
343.65 16.84 343.23 16.95 342.94 17.15 cv
342.65 17.36 342.51 17.66 342.51 18.04 cv
342.51 18.36 342.6 18.61 342.8 18.77 cv
342.99 18.94 343.36 19.07 343.9 19.17 cv
344.5 19.29 li
345.23 19.43 345.77 19.68 346.12 20.03 cv
346.47 20.39 346.65 20.86 346.65 21.45 cv
346.65 22.16 346.41 22.69 345.94 23.05 cv
345.46 23.41 344.77 23.59 343.86 23.59 cv
343.51 23.59 343.14 23.55 342.75 23.48 cv
342.36 23.41 341.96 23.3 341.55 23.14 cv
341.55 22.12 li
341.95 22.35 342.34 22.52 342.72 22.63 cv
343.1 22.75 343.48 22.8 343.86 22.8 cv
344.42 22.8 344.85 22.69 345.16 22.47 cv
345.46 22.25 345.62 21.94 345.62 21.52 cv
345.62 21.16 345.51 20.88 345.29 20.68 cv
345.07 20.48 344.71 20.33 344.21 20.23 cv
343.61 20.11 li
342.87 19.97 342.34 19.74 342.01 19.42 cv
341.68 19.11 341.52 18.68 341.52 18.12 cv
341.52 17.48 341.74 16.97 342.2 16.6 cv
342.65 16.23 343.28 16.04 344.08 16.04 cv
344.42 16.04 344.76 16.07 345.12 16.13 cv
345.47 16.19 345.83 16.29 346.21 16.41 cv
1 /0 /CSD get_res sepcs
1 sep
ef
352.57 16.41 mo
352.57 17.37 li
352.19 17.19 351.84 17.06 351.51 16.97 cv
351.17 16.89 350.85 16.84 350.55 16.84 cv
350.01 16.84 349.59 16.95 349.3 17.15 cv
349.01 17.36 348.87 17.66 348.87 18.04 cv
348.87 18.36 348.96 18.61 349.16 18.77 cv
349.35 18.94 349.72 19.07 350.26 19.17 cv
350.86 19.29 li
351.59 19.43 352.13 19.68 352.48 20.03 cv
352.83 20.39 353.01 20.86 353.01 21.45 cv
353.01 22.16 352.77 22.69 352.3 23.05 cv
351.82 23.41 351.13 23.59 350.22 23.59 cv
349.87 23.59 349.5 23.55 349.11 23.48 cv
348.72 23.41 348.32 23.3 347.91 23.14 cv
347.91 22.12 li
348.31 22.35 348.7 22.52 349.08 22.63 cv
349.46 22.75 349.84 22.8 350.22 22.8 cv
350.78 22.8 351.21 22.69 351.52 22.47 cv
351.82 22.25 351.98 21.94 351.98 21.52 cv
351.98 21.16 351.87 20.88 351.65 20.68 cv
351.43 20.48 351.07 20.33 350.57 20.23 cv
349.97 20.11 li
349.23 19.97 348.7 19.74 348.37 19.42 cv
348.04 19.11 347.88 18.68 347.88 18.12 cv
347.88 17.48 348.1 16.97 348.56 16.6 cv
349.01 16.23 349.64 16.04 350.44 16.04 cv
350.78 16.04 351.12 16.07 351.48 16.13 cv
351.83 16.19 352.19 16.29 352.57 16.41 cv
ef
355.55 16.98 mo
355.55 22.65 li
356.74 22.65 li
357.74 22.65 358.48 22.43 358.95 21.97 cv
359.41 21.51 359.65 20.79 359.65 19.81 cv
359.65 18.83 359.41 18.12 358.95 17.66 cv
358.48 17.21 357.74 16.98 356.74 16.98 cv
355.55 16.98 li
354.56 16.17 mo
356.59 16.17 li
358 16.17 359.04 16.47 359.7 17.05 cv
360.36 17.64 360.69 18.56 360.69 19.81 cv
360.69 21.07 360.35 21.99 359.69 22.58 cv
359.03 23.17 357.99 23.46 356.59 23.46 cv
354.56 23.46 li
354.56 16.17 li
ef
361.75 21.12 mo
364.38 21.12 li
364.38 20.32 li
361.75 20.32 li
cp
f
368.16 19.42 mo
367.72 19.42 367.37 19.58 367.11 19.88 cv
366.85 20.18 366.72 20.6 366.72 21.12 cv
366.72 21.65 366.85 22.07 367.11 22.37 cv
367.37 22.67 367.72 22.82 368.16 22.82 cv
368.6 22.82 368.95 22.67 369.21 22.37 cv
369.47 22.07 369.6 21.65 369.6 21.12 cv
369.6 20.6 369.47 20.18 369.21 19.88 cv
368.95 19.58 368.6 19.42 368.16 19.42 cv
370.12 16.33 mo
370.12 17.23 li
369.87 17.11 369.62 17.02 369.37 16.96 cv
369.11 16.9 368.86 16.87 368.62 16.87 cv
367.96 16.87 367.46 17.09 367.12 17.53 cv
366.78 17.97 366.58 18.64 366.54 19.52 cv
366.73 19.24 366.97 19.02 367.26 18.87 cv
367.55 18.72 367.87 18.64 368.22 18.64 cv
368.95 18.64 369.53 18.87 369.95 19.31 cv
370.37 19.75 370.59 20.36 370.59 21.12 cv
370.59 21.87 370.36 22.47 369.92 22.92 cv
369.48 23.37 368.89 23.59 368.16 23.59 cv
367.32 23.59 366.67 23.27 366.23 22.63 cv
365.78 21.99 365.56 21.05 365.56 19.82 cv
365.56 18.67 365.83 17.75 366.38 17.07 cv
366.92 16.39 367.66 16.04 368.58 16.04 cv
368.82 16.04 369.07 16.07 369.33 16.11 cv
369.58 16.16 369.84 16.23 370.12 16.33 cv
ef
375 17.03 mo
372.51 20.92 li
375 20.92 li
375 17.03 li
374.74 16.17 mo
375.98 16.17 li
375.98 20.92 li
377.02 20.92 li
377.02 21.74 li
375.98 21.74 li
375.98 23.46 li
375 23.46 li
375 21.74 li
371.71 21.74 li
371.71 20.79 li
374.74 16.17 li
ef
378.56 16.17 mo
380.03 16.17 li
381.89 21.13 li
383.76 16.17 li
385.23 16.17 li
385.23 23.46 li
384.27 23.46 li
384.27 17.06 li
382.39 22.06 li
381.4 22.06 li
379.52 17.06 li
379.52 23.46 li
378.56 23.46 li
378.56 16.17 li
ef
388.19 19.98 mo
388.19 22.65 li
389.77 22.65 li
390.3 22.65 390.69 22.54 390.95 22.32 cv
391.2 22.1 391.33 21.77 391.33 21.31 cv
391.33 20.86 391.2 20.53 390.95 20.31 cv
390.69 20.09 390.3 19.98 389.77 19.98 cv
388.19 19.98 li
388.19 16.98 mo
388.19 19.18 li
389.65 19.18 li
390.13 19.18 390.48 19.09 390.72 18.91 cv
390.96 18.73 391.08 18.46 391.08 18.08 cv
391.08 17.72 390.96 17.44 390.72 17.26 cv
390.48 17.08 390.13 16.98 389.65 16.98 cv
388.19 16.98 li
387.2 16.17 mo
389.72 16.17 li
390.47 16.17 391.05 16.33 391.46 16.64 cv
391.86 16.96 392.07 17.4 392.07 17.97 cv
392.07 18.42 391.96 18.78 391.75 19.04 cv
391.54 19.3 391.24 19.47 390.84 19.53 cv
391.32 19.64 391.7 19.86 391.97 20.19 cv
392.23 20.52 392.37 20.93 392.37 21.42 cv
392.37 22.08 392.14 22.58 391.7 22.93 cv
391.26 23.29 390.63 23.46 389.82 23.46 cv
387.2 23.46 li
387.2 16.17 li
ef
1.5 lw
2 lc
1 lj
312.873 34.663 mo
332.873 34.663 li
.905547 .71957 0 0 cmyk
@
322.873 37.663 mo
323.669 37.663 324.432 37.347 324.994 36.784 cv
325.557 36.222 325.873 35.459 325.873 34.663 cv
325.873 33.867 325.557 33.104 324.994 32.542 cv
324.432 31.979 323.669 31.663 322.873 31.663 cv
322.077 31.663 321.314 31.979 320.752 32.542 cv
320.189 33.104 319.873 33.867 319.873 34.663 cv
319.873 35.459 320.189 36.222 320.752 36.784 cv
321.314 37.347 322.077 37.663 322.873 37.663 cv
cp
f
1 lw
0 lc
322.873 37.663 mo
323.669 37.663 324.432 37.347 324.994 36.784 cv
325.557 36.222 325.873 35.459 325.873 34.663 cv
325.873 33.867 325.557 33.104 324.994 32.542 cv
324.432 31.979 323.669 31.663 322.873 31.663 cv
322.077 31.663 321.314 31.979 320.752 32.542 cv
320.189 33.104 319.873 33.867 319.873 34.663 cv
319.873 35.459 320.189 36.222 320.752 36.784 cv
321.314 37.347 322.077 37.663 322.873 37.663 cv
cp
@
346.21 31.17 mo
346.21 32.13 li
345.83 31.95 345.48 31.82 345.15 31.73 cv
344.81 31.65 344.49 31.6 344.19 31.6 cv
343.65 31.6 343.23 31.71 342.94 31.91 cv
342.65 32.12 342.51 32.42 342.51 32.8 cv
342.51 33.12 342.6 33.37 342.8 33.53 cv
342.99 33.7 343.36 33.83 343.9 33.93 cv
344.5 34.05 li
345.23 34.19 345.77 34.44 346.12 34.79 cv
346.47 35.15 346.65 35.62 346.65 36.21 cv
346.65 36.92 346.41 37.45 345.94 37.81 cv
345.46 38.17 344.77 38.35 343.86 38.35 cv
343.51 38.35 343.14 38.31 342.75 38.24 cv
342.36 38.17 341.96 38.06 341.55 37.9 cv
341.55 36.88 li
341.95 37.11 342.34 37.28 342.72 37.39 cv
343.1 37.51 343.48 37.56 343.86 37.56 cv
344.42 37.56 344.85 37.45 345.16 37.23 cv
345.46 37.01 345.62 36.7 345.62 36.28 cv
345.62 35.92 345.51 35.64 345.29 35.44 cv
345.07 35.24 344.71 35.09 344.21 34.99 cv
343.61 34.87 li
342.87 34.73 342.34 34.5 342.01 34.18 cv
341.68 33.87 341.52 33.44 341.52 32.88 cv
341.52 32.24 341.74 31.73 342.2 31.36 cv
342.65 30.99 343.28 30.8 344.08 30.8 cv
344.42 30.8 344.76 30.83 345.12 30.89 cv
345.47 30.95 345.83 31.05 346.21 31.17 cv
1 /0 /CSD get_res sepcs
1 sep
ef
352.57 31.17 mo
352.57 32.13 li
352.19 31.95 351.84 31.82 351.51 31.73 cv
351.17 31.65 350.85 31.6 350.55 31.6 cv
350.01 31.6 349.59 31.71 349.3 31.91 cv
349.01 32.12 348.87 32.42 348.87 32.8 cv
348.87 33.12 348.96 33.37 349.16 33.53 cv
349.35 33.7 349.72 33.83 350.26 33.93 cv
350.86 34.05 li
351.59 34.19 352.13 34.44 352.48 34.79 cv
352.83 35.15 353.01 35.62 353.01 36.21 cv
353.01 36.92 352.77 37.45 352.3 37.81 cv
351.82 38.17 351.13 38.35 350.22 38.35 cv
349.87 38.35 349.5 38.31 349.11 38.24 cv
348.72 38.17 348.32 38.06 347.91 37.9 cv
347.91 36.88 li
348.31 37.11 348.7 37.28 349.08 37.39 cv
349.46 37.51 349.84 37.56 350.22 37.56 cv
350.78 37.56 351.21 37.45 351.52 37.23 cv
351.82 37.01 351.98 36.7 351.98 36.28 cv
351.98 35.92 351.87 35.64 351.65 35.44 cv
351.43 35.24 351.07 35.09 350.57 34.99 cv
349.97 34.87 li
349.23 34.73 348.7 34.5 348.37 34.18 cv
348.04 33.87 347.88 33.44 347.88 32.88 cv
347.88 32.24 348.1 31.73 348.56 31.36 cv
349.01 30.99 349.64 30.8 350.44 30.8 cv
350.78 30.8 351.12 30.83 351.48 30.89 cv
351.83 30.95 352.19 31.05 352.57 31.17 cv
ef
355.55 31.74 mo
355.55 37.41 li
356.74 37.41 li
357.74 37.41 358.48 37.19 358.95 36.73 cv
359.41 36.27 359.65 35.55 359.65 34.57 cv
359.65 33.59 359.41 32.88 358.95 32.42 cv
358.48 31.97 357.74 31.74 356.74 31.74 cv
355.55 31.74 li
354.56 30.93 mo
356.59 30.93 li
358 30.93 359.04 31.23 359.7 31.81 cv
360.36 32.4 360.69 33.32 360.69 34.57 cv
360.69 35.83 360.35 36.75 359.69 37.34 cv
359.03 37.93 357.99 38.22 356.59 38.22 cv
354.56 38.22 li
354.56 30.93 li
ef
361.75 35.88 mo
364.38 35.88 li
364.38 35.08 li
361.75 35.08 li
cp
f
366.1 37.39 mo
367.71 37.39 li
367.71 31.83 li
365.96 32.18 li
365.96 31.28 li
367.7 30.93 li
368.69 30.93 li
368.69 37.39 li
370.3 37.39 li
370.3 38.22 li
366.1 38.22 li
366.1 37.39 li
ef
373.14 37.39 mo
376.58 37.39 li
376.58 38.22 li
371.95 38.22 li
371.95 37.39 li
372.32 37.01 372.83 36.49 373.48 35.83 cv
374.12 35.18 374.53 34.76 374.7 34.57 cv
375.02 34.22 375.24 33.92 375.36 33.67 cv
375.48 33.43 375.55 33.18 375.55 32.94 cv
375.55 32.56 375.41 32.24 375.14 32 cv
374.87 31.76 374.52 31.63 374.08 31.63 cv
373.77 31.63 373.44 31.69 373.1 31.79 cv
372.76 31.9 372.39 32.06 372 32.28 cv
372 31.28 li
372.4 31.12 372.77 31 373.11 30.92 cv
373.45 30.84 373.77 30.8 374.06 30.8 cv
374.81 30.8 375.41 30.99 375.86 31.37 cv
376.31 31.75 376.54 32.25 376.54 32.88 cv
376.54 33.18 376.48 33.47 376.37 33.73 cv
376.26 34 376.06 34.32 375.76 34.68 cv
375.68 34.78 375.42 35.05 374.98 35.5 cv
374.54 35.95 373.93 36.58 373.14 37.39 cv
ef
380.76 34.76 mo
380.29 34.76 379.92 34.89 379.65 35.14 cv
379.38 35.39 379.25 35.73 379.25 36.17 cv
379.25 36.61 379.38 36.96 379.65 37.21 cv
379.92 37.46 380.29 37.58 380.76 37.58 cv
381.22 37.58 381.59 37.46 381.86 37.2 cv
382.13 36.95 382.27 36.61 382.27 36.17 cv
382.27 35.73 382.13 35.39 381.87 35.14 cv
381.6 34.89 381.23 34.76 380.76 34.76 cv
379.77 34.34 mo
379.35 34.24 379.02 34.04 378.78 33.75 cv
378.54 33.46 378.43 33.11 378.43 32.69 cv
378.43 32.11 378.63 31.65 379.05 31.31 cv
379.46 30.97 380.03 30.8 380.76 30.8 cv
381.48 30.8 382.05 30.97 382.47 31.31 cv
382.88 31.65 383.09 32.11 383.09 32.69 cv
383.09 33.11 382.97 33.46 382.73 33.75 cv
382.49 34.04 382.17 34.24 381.75 34.34 cv
382.22 34.45 382.59 34.67 382.86 34.99 cv
383.12 35.31 383.26 35.71 383.26 36.17 cv
383.26 36.88 383.04 37.42 382.61 37.79 cv
382.17 38.17 381.56 38.35 380.76 38.35 cv
379.95 38.35 379.33 38.17 378.9 37.79 cv
378.47 37.42 378.26 36.88 378.26 36.17 cv
378.26 35.71 378.39 35.31 378.66 34.99 cv
378.92 34.67 379.29 34.45 379.77 34.34 cv
379.41 32.78 mo
379.41 33.16 379.52 33.46 379.76 33.67 cv
380 33.88 380.33 33.98 380.76 33.98 cv
381.18 33.98 381.51 33.88 381.75 33.67 cv
381.99 33.46 382.11 33.16 382.11 32.78 cv
382.11 32.4 381.99 32.11 381.75 31.9 cv
381.51 31.69 381.18 31.58 380.76 31.58 cv
380.33 31.58 380 31.69 379.76 31.9 cv
379.52 32.11 379.41 32.4 379.41 32.78 cv
ef
384.92 30.93 mo
386.39 30.93 li
388.25 35.89 li
390.12 30.93 li
391.59 30.93 li
391.59 38.22 li
390.63 38.22 li
390.63 31.82 li
388.75 36.82 li
387.76 36.82 li
385.88 31.82 li
385.88 38.22 li
384.92 38.22 li
384.92 30.93 li
ef
394.55 34.74 mo
394.55 37.41 li
396.13 37.41 li
396.66 37.41 397.05 37.3 397.31 37.08 cv
397.56 36.86 397.69 36.53 397.69 36.07 cv
397.69 35.62 397.56 35.29 397.31 35.07 cv
397.05 34.85 396.66 34.74 396.13 34.74 cv
394.55 34.74 li
394.55 31.74 mo
394.55 33.94 li
396.01 33.94 li
396.49 33.94 396.84 33.85 397.08 33.67 cv
397.32 33.49 397.44 33.22 397.44 32.84 cv
397.44 32.48 397.32 32.2 397.08 32.02 cv
396.84 31.84 396.49 31.74 396.01 31.74 cv
394.55 31.74 li
393.56 30.93 mo
396.08 30.93 li
396.83 30.93 397.41 31.09 397.82 31.4 cv
398.22 31.72 398.43 32.16 398.43 32.73 cv
398.43 33.18 398.32 33.54 398.11 33.8 cv
397.9 34.06 397.6 34.23 397.2 34.29 cv
397.68 34.4 398.06 34.62 398.33 34.95 cv
398.59 35.28 398.73 35.69 398.73 36.18 cv
398.73 36.84 398.5 37.34 398.06 37.69 cv
397.62 38.05 396.99 38.22 396.18 38.22 cv
393.56 38.22 li
393.56 30.93 li
ef
1.5 lw
2 lc
312.873 49.335 mo
332.873 49.335 li
0 .9617 .904814 0 cmyk
@
319.873 52.335 mo
325.873 52.335 li
325.873 46.335 li
319.873 46.335 li
cp
f
1 lw
0 lc
0 lj
319.873 52.335 mo
325.873 52.335 li
325.873 46.335 li
319.873 46.335 li
cp
@
341.84 45.57 mo
342.83 45.57 li
342.83 48.56 li
346.41 48.56 li
346.41 45.57 li
347.4 45.57 li
347.4 52.86 li
346.41 52.86 li
346.41 49.39 li
342.83 49.39 li
342.83 52.86 li
341.84 52.86 li
341.84 45.57 li
1 /0 /CSD get_res sepcs
1 sep
ef
350.39 46.38 mo
350.39 52.05 li
351.58 52.05 li
352.58 52.05 353.32 51.83 353.79 51.37 cv
354.25 50.91 354.49 50.19 354.49 49.21 cv
354.49 48.23 354.25 47.52 353.79 47.06 cv
353.32 46.61 352.58 46.38 351.58 46.38 cv
350.39 46.38 li
349.4 45.57 mo
351.43 45.57 li
352.84 45.57 353.88 45.87 354.54 46.45 cv
355.2 47.04 355.53 47.96 355.53 49.21 cv
355.53 50.47 355.19 51.39 354.53 51.98 cv
353.87 52.57 352.83 52.86 351.43 52.86 cv
349.4 52.86 li
349.4 45.57 li
ef
358.07 46.38 mo
358.07 52.05 li
359.26 52.05 li
360.26 52.05 361 51.83 361.47 51.37 cv
361.93 50.91 362.17 50.19 362.17 49.21 cv
362.17 48.23 361.93 47.52 361.47 47.06 cv
361 46.61 360.26 46.38 359.26 46.38 cv
358.07 46.38 li
357.08 45.57 mo
359.11 45.57 li
360.52 45.57 361.56 45.87 362.22 46.45 cv
362.88 47.04 363.21 47.96 363.21 49.21 cv
363.21 50.47 362.87 51.39 362.21 51.98 cv
361.55 52.57 360.51 52.86 359.11 52.86 cv
357.08 52.86 li
357.08 45.57 li
ef
364.27 50.52 mo
366.9 50.52 li
366.9 49.72 li
364.27 49.72 li
cp
f
370.68 48.82 mo
370.24 48.82 369.89 48.98 369.63 49.28 cv
369.37 49.58 369.24 50 369.24 50.52 cv
369.24 51.05 369.37 51.47 369.63 51.77 cv
369.89 52.07 370.24 52.22 370.68 52.22 cv
371.12 52.22 371.47 52.07 371.73 51.77 cv
371.99 51.47 372.12 51.05 372.12 50.52 cv
372.12 50 371.99 49.58 371.73 49.28 cv
371.47 48.98 371.12 48.82 370.68 48.82 cv
372.64 45.73 mo
372.64 46.63 li
372.39 46.51 372.14 46.42 371.89 46.36 cv
371.63 46.3 371.38 46.27 371.14 46.27 cv
370.48 46.27 369.98 46.49 369.64 46.93 cv
369.3 47.37 369.1 48.04 369.06 48.92 cv
369.25 48.64 369.49 48.42 369.78 48.27 cv
370.07 48.12 370.39 48.04 370.74 48.04 cv
371.47 48.04 372.05 48.27 372.47 48.71 cv
372.89 49.15 373.11 49.76 373.11 50.52 cv
373.11 51.27 372.88 51.87 372.44 52.32 cv
372 52.77 371.41 52.99 370.68 52.99 cv
369.84 52.99 369.19 52.67 368.75 52.03 cv
368.3 51.39 368.08 50.45 368.08 49.22 cv
368.08 48.07 368.35 47.15 368.9 46.47 cv
369.44 45.79 370.18 45.44 371.1 45.44 cv
371.34 45.44 371.59 45.47 371.85 45.51 cv
372.1 45.56 372.36 45.63 372.64 45.73 cv
ef
377.52 46.43 mo
375.03 50.32 li
377.52 50.32 li
377.52 46.43 li
377.26 45.57 mo
378.5 45.57 li
378.5 50.32 li
379.54 50.32 li
379.54 51.14 li
378.5 51.14 li
378.5 52.86 li
377.52 52.86 li
377.52 51.14 li
374.23 51.14 li
374.23 50.19 li
377.26 45.57 li
ef
381.08 45.57 mo
382.55 45.57 li
384.41 50.53 li
386.28 45.57 li
387.75 45.57 li
387.75 52.86 li
386.79 52.86 li
386.79 46.46 li
384.91 51.46 li
383.92 51.46 li
382.04 46.46 li
382.04 52.86 li
381.08 52.86 li
381.08 45.57 li
ef
390.71 49.38 mo
390.71 52.05 li
392.29 52.05 li
392.82 52.05 393.21 51.94 393.47 51.72 cv
393.72 51.5 393.85 51.17 393.85 50.71 cv
393.85 50.26 393.72 49.93 393.47 49.71 cv
393.21 49.49 392.82 49.38 392.29 49.38 cv
390.71 49.38 li
390.71 46.38 mo
390.71 48.58 li
392.17 48.58 li
392.65 48.58 393 48.49 393.24 48.31 cv
393.48 48.13 393.6 47.86 393.6 47.48 cv
393.6 47.12 393.48 46.84 393.24 46.66 cv
393 46.48 392.65 46.38 392.17 46.38 cv
390.71 46.38 li
389.72 45.57 mo
392.24 45.57 li
392.99 45.57 393.57 45.73 393.98 46.04 cv
394.38 46.36 394.59 46.8 394.59 47.37 cv
394.59 47.82 394.48 48.18 394.27 48.44 cv
394.06 48.7 393.76 48.87 393.36 48.93 cv
393.84 49.04 394.22 49.26 394.49 49.59 cv
394.75 49.92 394.89 50.33 394.89 50.82 cv
394.89 51.48 394.66 51.98 394.22 52.33 cv
393.78 52.69 393.15 52.86 392.34 52.86 cv
389.72 52.86 li
389.72 45.57 li
ef
1.5 lw
2 lc
1 lj
312.873 64.007 mo
332.873 64.007 li
0 .9617 .904814 0 cmyk
@
322.873 67.007 mo
323.669 67.007 324.432 66.691 324.994 66.128 cv
325.557 65.566 325.873 64.803 325.873 64.007 cv
325.873 63.211 325.557 62.448 324.994 61.886 cv
324.432 61.323 323.669 61.007 322.873 61.007 cv
322.077 61.007 321.314 61.323 320.752 61.886 cv
320.189 62.448 319.873 63.211 319.873 64.007 cv
319.873 64.803 320.189 65.566 320.752 66.128 cv
321.314 66.691 322.077 67.007 322.873 67.007 cv
cp
f
1 lw
0 lc
322.873 67.007 mo
323.669 67.007 324.432 66.691 324.994 66.128 cv
325.557 65.566 325.873 64.803 325.873 64.007 cv
325.873 63.211 325.557 62.448 324.994 61.886 cv
324.432 61.323 323.669 61.007 322.873 61.007 cv
322.077 61.007 321.314 61.323 320.752 61.886 cv
320.189 62.448 319.873 63.211 319.873 64.007 cv
319.873 64.803 320.189 65.566 320.752 66.128 cv
321.314 66.691 322.077 67.007 322.873 67.007 cv
cp
@
341.84 60.21 mo
342.83 60.21 li
342.83 63.2 li
346.41 63.2 li
346.41 60.21 li
347.4 60.21 li
347.4 67.5 li
346.41 67.5 li
346.41 64.03 li
342.83 64.03 li
342.83 67.5 li
341.84 67.5 li
341.84 60.21 li
1 /0 /CSD get_res sepcs
1 sep
ef
350.39 61.02 mo
350.39 66.69 li
351.58 66.69 li
352.58 66.69 353.32 66.47 353.79 66.01 cv
354.25 65.55 354.49 64.83 354.49 63.85 cv
354.49 62.87 354.25 62.16 353.79 61.7 cv
353.32 61.25 352.58 61.02 351.58 61.02 cv
350.39 61.02 li
349.4 60.21 mo
351.43 60.21 li
352.84 60.21 353.88 60.51 354.54 61.09 cv
355.2 61.68 355.53 62.6 355.53 63.85 cv
355.53 65.11 355.19 66.03 354.53 66.62 cv
353.87 67.21 352.83 67.5 351.43 67.5 cv
349.4 67.5 li
349.4 60.21 li
ef
358.07 61.02 mo
358.07 66.69 li
359.26 66.69 li
360.26 66.69 361 66.47 361.47 66.01 cv
361.93 65.55 362.17 64.83 362.17 63.85 cv
362.17 62.87 361.93 62.16 361.47 61.7 cv
361 61.25 360.26 61.02 359.26 61.02 cv
358.07 61.02 li
357.08 60.21 mo
359.11 60.21 li
360.52 60.21 361.56 60.51 362.22 61.09 cv
362.88 61.68 363.21 62.6 363.21 63.85 cv
363.21 65.11 362.87 66.03 362.21 66.62 cv
361.55 67.21 360.51 67.5 359.11 67.5 cv
357.08 67.5 li
357.08 60.21 li
ef
364.27 65.16 mo
366.9 65.16 li
366.9 64.36 li
364.27 64.36 li
cp
f
368.62 66.67 mo
370.23 66.67 li
370.23 61.11 li
368.48 61.46 li
368.48 60.56 li
370.22 60.21 li
371.21 60.21 li
371.21 66.67 li
372.82 66.67 li
372.82 67.5 li
368.62 67.5 li
368.62 66.67 li
ef
375.66 66.67 mo
379.1 66.67 li
379.1 67.5 li
374.47 67.5 li
374.47 66.67 li
374.84 66.29 375.35 65.77 376 65.11 cv
376.64 64.46 377.05 64.04 377.22 63.85 cv
377.54 63.5 377.76 63.2 377.88 62.95 cv
378 62.71 378.07 62.46 378.07 62.22 cv
378.07 61.84 377.93 61.52 377.66 61.28 cv
377.39 61.04 377.04 60.91 376.6 60.91 cv
376.29 60.91 375.96 60.97 375.62 61.07 cv
375.28 61.18 374.91 61.34 374.52 61.56 cv
374.52 60.56 li
374.92 60.4 375.29 60.28 375.63 60.2 cv
375.97 60.12 376.29 60.08 376.58 60.08 cv
377.33 60.08 377.93 60.27 378.38 60.65 cv
378.83 61.03 379.06 61.53 379.06 62.16 cv
379.06 62.46 379 62.75 378.89 63.01 cv
378.78 63.28 378.58 63.6 378.28 63.96 cv
378.2 64.06 377.94 64.33 377.5 64.78 cv
377.06 65.23 376.45 65.86 375.66 66.67 cv
ef
383.28 64.04 mo
382.81 64.04 382.44 64.17 382.17 64.42 cv
381.9 64.67 381.77 65.01 381.77 65.45 cv
381.77 65.89 381.9 66.24 382.17 66.49 cv
382.44 66.74 382.81 66.86 383.28 66.86 cv
383.74 66.86 384.11 66.74 384.38 66.48 cv
384.65 66.23 384.79 65.89 384.79 65.45 cv
384.79 65.01 384.65 64.67 384.39 64.42 cv
384.12 64.17 383.75 64.04 383.28 64.04 cv
382.29 63.62 mo
381.87 63.52 381.54 63.32 381.3 63.03 cv
381.06 62.74 380.95 62.39 380.95 61.97 cv
380.95 61.39 381.15 60.93 381.57 60.59 cv
381.98 60.25 382.55 60.08 383.28 60.08 cv
384 60.08 384.57 60.25 384.99 60.59 cv
385.4 60.93 385.61 61.39 385.61 61.97 cv
385.61 62.39 385.49 62.74 385.25 63.03 cv
385.01 63.32 384.69 63.52 384.27 63.62 cv
384.74 63.73 385.11 63.95 385.38 64.27 cv
385.64 64.59 385.78 64.99 385.78 65.45 cv
385.78 66.16 385.56 66.7 385.13 67.07 cv
384.69 67.45 384.08 67.63 383.28 67.63 cv
382.47 67.63 381.85 67.45 381.42 67.07 cv
380.99 66.7 380.78 66.16 380.78 65.45 cv
380.78 64.99 380.91 64.59 381.18 64.27 cv
381.44 63.95 381.81 63.73 382.29 63.62 cv
381.93 62.06 mo
381.93 62.44 382.04 62.74 382.28 62.95 cv
382.52 63.16 382.85 63.26 383.28 63.26 cv
383.7 63.26 384.03 63.16 384.27 62.95 cv
384.51 62.74 384.63 62.44 384.63 62.06 cv
384.63 61.68 384.51 61.39 384.27 61.18 cv
384.03 60.97 383.7 60.86 383.28 60.86 cv
382.85 60.86 382.52 60.97 382.28 61.18 cv
382.04 61.39 381.93 61.68 381.93 62.06 cv
ef
387.44 60.21 mo
388.91 60.21 li
390.77 65.17 li
392.64 60.21 li
394.11 60.21 li
394.11 67.5 li
393.15 67.5 li
393.15 61.1 li
391.27 66.1 li
390.28 66.1 li
388.4 61.1 li
388.4 67.5 li
387.44 67.5 li
387.44 60.21 li
ef
397.07 64.02 mo
397.07 66.69 li
398.65 66.69 li
399.18 66.69 399.57 66.58 399.83 66.36 cv
400.08 66.14 400.21 65.81 400.21 65.35 cv
400.21 64.9 400.08 64.57 399.83 64.35 cv
399.57 64.13 399.18 64.02 398.65 64.02 cv
397.07 64.02 li
397.07 61.02 mo
397.07 63.22 li
398.53 63.22 li
399.01 63.22 399.36 63.13 399.6 62.95 cv
399.84 62.77 399.96 62.5 399.96 62.12 cv
399.96 61.76 399.84 61.48 399.6 61.3 cv
399.36 61.12 399.01 61.02 398.53 61.02 cv
397.07 61.02 li
396.08 60.21 mo
398.6 60.21 li
399.35 60.21 399.93 60.37 400.34 60.68 cv
400.74 61 400.95 61.44 400.95 62.01 cv
400.95 62.46 400.84 62.82 400.63 63.08 cv
400.42 63.34 400.12 63.51 399.72 63.57 cv
400.2 63.68 400.58 63.9 400.85 64.23 cv
401.11 64.56 401.25 64.97 401.25 65.46 cv
401.25 66.12 401.02 66.62 400.58 66.97 cv
400.14 67.33 399.51 67.5 398.7 67.5 cv
396.08 67.5 li
396.08 60.21 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
