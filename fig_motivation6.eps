%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPA4.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/14 ÐÇÆÚÈý, ÏÂÎç 9:44:06
%%BoundingBox: 0 0 340 174
%%HiResBoundingBox: 0 0 340 174
%%CropBox: 0 0 340 174
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 959 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-08-14T21:43:49+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-14T21:43:49+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:c95efe88-4a8f-4696-86e5-6ce9e8ca48b1"
   xmpMM:InstanceID="uuid:46a1f80e-aebd-4638-8276-d79369212f45">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivation5.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -174 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 174 li
340 174 li
340 0 li
cp
clp
.059998 173.94 mo
340.02 173.94 li
340.02 -.0599976 li
.059998 -.0599976 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
53.907 128.937 mo
332.907 128.937 li
332.907 6.96899 li
53.907 6.96899 li
cp
f
66.588 128.937 mo
66.588 132.437 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
66.588 128.937 mo
66.588 132.437 li
@
63.836 145.418 mo
66.09 145.418 li
66.09 137.634 li
63.64 138.124 li
63.64 136.864 li
66.076 136.374 li
67.462 136.374 li
67.462 145.418 li
69.716 145.418 li
69.716 146.58 li
63.836 146.58 li
63.836 145.418 li
ef
94.77 128.937 mo
94.77 132.437 li
f
94.77 128.937 mo
94.77 132.437 li
@
92.988 145.418 mo
97.804 145.418 li
97.804 146.58 li
91.322 146.58 li
91.322 145.418 li
91.84 144.886 92.554 144.158 93.464 143.234 cv
94.36 142.324 94.934 141.736 95.172 141.47 cv
95.62 140.98 95.928 140.56 96.096 140.21 cv
96.264 139.874 96.362 139.524 96.362 139.188 cv
96.362 138.656 96.166 138.208 95.788 137.872 cv
95.41 137.536 94.92 137.354 94.304 137.354 cv
93.87 137.354 93.408 137.438 92.932 137.578 cv
92.456 137.732 91.938 137.956 91.392 138.264 cv
91.392 136.864 li
91.952 136.64 92.47 136.472 92.946 136.36 cv
93.422 136.248 93.87 136.192 94.276 136.192 cv
95.326 136.192 96.166 136.458 96.796 136.99 cv
97.426 137.522 97.748 138.222 97.748 139.104 cv
97.748 139.524 97.664 139.93 97.51 140.294 cv
97.356 140.672 97.076 141.12 96.656 141.624 cv
96.544 141.764 96.18 142.142 95.564 142.772 cv
94.948 143.402 94.094 144.284 92.988 145.418 cv
ef
122.952 128.937 mo
122.952 132.437 li
f
122.952 128.937 mo
122.952 132.437 li
@
124.184 141.078 mo
124.842 141.218 125.36 141.512 125.724 141.96 cv
126.088 142.408 126.284 142.968 126.284 143.612 cv
126.284 144.62 125.934 145.404 125.248 145.95 cv
124.548 146.496 123.568 146.762 122.294 146.762 cv
121.86 146.762 121.412 146.72 120.964 146.636 cv
120.516 146.566 120.04 146.44 119.564 146.272 cv
119.564 144.942 li
119.942 145.166 120.362 145.334 120.824 145.446 cv
121.272 145.558 121.748 145.614 122.252 145.614 cv
123.12 145.614 123.778 145.446 124.226 145.11 cv
124.674 144.774 124.912 144.27 124.912 143.612 cv
124.912 143.024 124.702 142.548 124.282 142.212 cv
123.862 141.876 123.274 141.694 122.518 141.694 cv
121.328 141.694 li
121.328 140.56 li
122.574 140.56 li
123.246 140.56 123.764 140.434 124.128 140.154 cv
124.492 139.888 124.674 139.496 124.674 138.978 cv
124.674 138.46 124.478 138.054 124.114 137.774 cv
123.736 137.494 123.204 137.354 122.518 137.354 cv
122.14 137.354 121.734 137.396 121.3 137.48 cv
120.866 137.564 120.39 137.69 119.872 137.858 cv
119.872 136.626 li
120.39 136.486 120.88 136.374 121.342 136.304 cv
121.79 136.234 122.224 136.192 122.644 136.192 cv
123.68 136.192 124.506 136.43 125.122 136.906 cv
125.738 137.382 126.046 138.026 126.046 138.838 cv
126.046 139.398 125.878 139.874 125.556 140.266 cv
125.234 140.658 124.772 140.938 124.184 141.078 cv
ef
151.134 128.937 mo
151.134 132.437 li
f
151.134 128.937 mo
151.134 132.437 li
@
151.992 137.578 mo
148.506 143.024 li
151.992 143.024 li
151.992 137.578 li
151.628 136.374 mo
153.364 136.374 li
153.364 143.024 li
154.82 143.024 li
154.82 144.172 li
153.364 144.172 li
153.364 146.58 li
151.992 146.58 li
151.992 144.172 li
147.386 144.172 li
147.386 142.842 li
151.628 136.374 li
ef
179.316 128.937 mo
179.316 132.437 li
f
179.316 128.937 mo
179.316 132.437 li
@
176.412 136.374 mo
181.83 136.374 li
181.83 137.536 li
177.672 137.536 li
177.672 140.042 li
177.868 139.972 178.078 139.916 178.274 139.888 cv
178.47 139.86 178.68 139.832 178.876 139.832 cv
180.01 139.832 180.906 140.154 181.578 140.77 cv
182.25 141.4 182.586 142.24 182.586 143.304 cv
182.586 144.41 182.236 145.264 181.55 145.866 cv
180.864 146.468 179.898 146.762 178.666 146.762 cv
178.232 146.762 177.798 146.72 177.35 146.664 cv
176.902 146.594 176.454 146.496 175.978 146.342 cv
175.978 144.956 li
176.384 145.18 176.804 145.348 177.252 145.46 cv
177.686 145.572 178.148 145.614 178.638 145.614 cv
179.422 145.614 180.052 145.418 180.514 144.998 cv
180.962 144.578 181.2 144.018 181.2 143.304 cv
181.2 142.604 180.962 142.044 180.514 141.624 cv
180.052 141.204 179.422 140.994 178.638 140.994 cv
178.274 140.994 177.896 141.036 177.532 141.12 cv
177.168 141.204 176.79 141.33 176.412 141.498 cv
176.412 136.374 li
ef
207.497 128.937 mo
207.497 132.437 li
f
207.497 128.937 mo
207.497 132.437 li
@
207.72 140.924 mo
207.104 140.924 206.614 141.148 206.25 141.568 cv
205.886 141.988 205.704 142.576 205.704 143.304 cv
205.704 144.046 205.886 144.634 206.25 145.054 cv
206.614 145.474 207.104 145.684 207.72 145.684 cv
208.336 145.684 208.826 145.474 209.19 145.054 cv
209.554 144.634 209.736 144.046 209.736 143.304 cv
209.736 142.576 209.554 141.988 209.19 141.568 cv
208.826 141.148 208.336 140.924 207.72 140.924 cv
210.464 136.598 mo
210.464 137.858 li
210.114 137.69 209.764 137.564 209.414 137.48 cv
209.05 137.396 208.7 137.354 208.364 137.354 cv
207.44 137.354 206.74 137.662 206.264 138.278 cv
205.788 138.894 205.508 139.832 205.452 141.064 cv
205.718 140.672 206.054 140.364 206.46 140.154 cv
206.866 139.944 207.314 139.832 207.804 139.832 cv
208.826 139.832 209.638 140.154 210.226 140.77 cv
210.814 141.386 211.122 142.24 211.122 143.304 cv
211.122 144.354 210.8 145.194 210.184 145.824 cv
209.568 146.454 208.742 146.762 207.72 146.762 cv
206.544 146.762 205.634 146.314 205.018 145.418 cv
204.388 144.522 204.08 143.206 204.08 141.484 cv
204.08 139.874 204.458 138.586 205.228 137.634 cv
205.984 136.682 207.02 136.192 208.308 136.192 cv
208.644 136.192 208.994 136.234 209.358 136.29 cv
209.708 136.36 210.072 136.458 210.464 136.598 cv
ef
235.679 128.937 mo
235.679 132.437 li
f
235.679 128.937 mo
235.679 132.437 li
@
232.328 136.374 mo
238.894 136.374 li
238.894 136.962 li
235.184 146.58 li
233.742 146.58 li
237.228 137.536 li
232.328 137.536 li
232.328 136.374 li
ef
263.861 128.937 mo
263.861 132.437 li
f
263.861 128.937 mo
263.861 132.437 li
@
263.832 141.736 mo
263.174 141.736 262.656 141.918 262.278 142.268 cv
261.9 142.618 261.718 143.094 261.718 143.71 cv
261.718 144.326 261.9 144.816 262.278 145.166 cv
262.656 145.516 263.174 145.684 263.832 145.684 cv
264.476 145.684 264.994 145.516 265.372 145.152 cv
265.75 144.802 265.946 144.326 265.946 143.71 cv
265.946 143.094 265.75 142.618 265.386 142.268 cv
265.008 141.918 264.49 141.736 263.832 141.736 cv
262.446 141.148 mo
261.858 141.008 261.396 140.728 261.06 140.322 cv
260.724 139.916 260.57 139.426 260.57 138.838 cv
260.57 138.026 260.85 137.382 261.438 136.906 cv
262.012 136.43 262.81 136.192 263.832 136.192 cv
264.84 136.192 265.638 136.43 266.226 136.906 cv
266.8 137.382 267.094 138.026 267.094 138.838 cv
267.094 139.426 266.926 139.916 266.59 140.322 cv
266.254 140.728 265.806 141.008 265.218 141.148 cv
265.876 141.302 266.394 141.61 266.772 142.058 cv
267.136 142.506 267.332 143.066 267.332 143.71 cv
267.332 144.704 267.024 145.46 266.422 145.978 cv
265.806 146.51 264.952 146.762 263.832 146.762 cv
262.698 146.762 261.83 146.51 261.228 145.978 cv
260.626 145.46 260.332 144.704 260.332 143.71 cv
260.332 143.066 260.514 142.506 260.892 142.058 cv
261.256 141.61 261.774 141.302 262.446 141.148 cv
261.942 138.964 mo
261.942 139.496 262.096 139.916 262.432 140.21 cv
262.768 140.504 263.23 140.644 263.832 140.644 cv
264.42 140.644 264.882 140.504 265.218 140.21 cv
265.554 139.916 265.722 139.496 265.722 138.964 cv
265.722 138.432 265.554 138.026 265.218 137.732 cv
264.882 137.438 264.42 137.284 263.832 137.284 cv
263.23 137.284 262.768 137.438 262.432 137.732 cv
262.096 138.026 261.942 138.432 261.942 138.964 cv
ef
292.043 128.937 mo
292.043 132.437 li
f
292.043 128.937 mo
292.043 132.437 li
@
289.12 146.37 mo
289.12 145.11 li
289.456 145.278 289.806 145.404 290.17 145.488 cv
290.52 145.572 290.87 145.614 291.22 145.614 cv
292.116 145.614 292.816 145.32 293.292 144.704 cv
293.768 144.088 294.048 143.164 294.132 141.904 cv
293.852 142.296 293.516 142.604 293.124 142.814 cv
292.718 143.024 292.27 143.122 291.78 143.122 cv
290.744 143.122 289.932 142.814 289.344 142.198 cv
288.756 141.582 288.462 140.742 288.462 139.664 cv
288.462 138.628 288.77 137.788 289.386 137.144 cv
290.002 136.514 290.828 136.192 291.864 136.192 cv
293.04 136.192 293.95 136.654 294.566 137.55 cv
295.182 138.46 295.504 139.776 295.504 141.484 cv
295.504 143.108 295.112 144.382 294.356 145.334 cv
293.586 146.286 292.564 146.762 291.276 146.762 cv
290.926 146.762 290.576 146.72 290.226 146.664 cv
289.862 146.608 289.498 146.51 289.12 146.37 cv
291.864 142.044 mo
292.48 142.044 292.97 141.834 293.334 141.414 cv
293.698 140.994 293.88 140.406 293.88 139.664 cv
293.88 138.936 293.698 138.348 293.334 137.928 cv
292.97 137.508 292.48 137.284 291.864 137.284 cv
291.248 137.284 290.758 137.508 290.394 137.928 cv
290.03 138.348 289.848 138.936 289.848 139.664 cv
289.848 140.406 290.03 140.994 290.394 141.414 cv
290.758 141.834 291.248 142.044 291.864 142.044 cv
ef
320.225 128.937 mo
320.225 132.437 li
f
320.225 128.937 mo
320.225 132.437 li
@
313.076 145.418 mo
315.33 145.418 li
315.33 137.634 li
312.88 138.124 li
312.88 136.864 li
315.316 136.374 li
316.702 136.374 li
316.702 145.418 li
318.956 145.418 li
318.956 146.58 li
313.076 146.58 li
313.076 145.418 li
ef
324.672 137.284 mo
323.958 137.284 323.426 137.634 323.062 138.334 cv
322.698 139.034 322.53 140.084 322.53 141.484 cv
322.53 142.884 322.698 143.934 323.062 144.634 cv
323.426 145.334 323.958 145.684 324.672 145.684 cv
325.386 145.684 325.918 145.334 326.282 144.634 cv
326.632 143.934 326.814 142.884 326.814 141.484 cv
326.814 140.084 326.632 139.034 326.282 138.334 cv
325.918 137.634 325.386 137.284 324.672 137.284 cv
324.672 136.192 mo
325.806 136.192 326.674 136.654 327.29 137.55 cv
327.892 138.46 328.2 139.776 328.2 141.484 cv
328.2 143.206 327.892 144.522 327.29 145.418 cv
326.674 146.314 325.806 146.762 324.672 146.762 cv
323.524 146.762 322.642 146.314 322.04 145.418 cv
321.438 144.522 321.144 143.206 321.144 141.484 cv
321.144 139.776 321.438 138.46 322.04 137.55 cv
322.642 136.654 323.524 136.192 324.672 136.192 cv
ef
135.952 153.894 mo
137.814 153.894 li
142.336 162.434 li
142.336 153.894 li
143.68 153.894 li
143.68 164.1 li
141.818 164.1 li
137.296 155.56 li
137.296 164.1 li
135.952 164.1 li
135.952 153.894 li
ef
146.33 161.076 mo
146.33 156.442 li
147.59 156.442 li
147.59 161.034 li
147.59 161.762 147.73 162.294 148.01 162.658 cv
148.29 163.022 148.71 163.204 149.284 163.204 cv
149.956 163.204 150.502 162.994 150.894 162.56 cv
151.286 162.126 151.482 161.538 151.482 160.782 cv
151.482 156.442 li
152.742 156.442 li
152.742 164.1 li
151.482 164.1 li
151.482 162.924 li
151.174 163.4 150.81 163.736 150.418 163.96 cv
150.012 164.17 149.55 164.282 149.018 164.282 cv
148.136 164.282 147.464 164.016 147.016 163.47 cv
146.554 162.938 146.33 162.14 146.33 161.076 cv
149.494 156.26 mo
149.494 156.26 li
ef
161.3 157.912 mo
161.608 157.352 161.986 156.946 162.42 156.666 cv
162.854 156.4 163.372 156.26 163.974 156.26 cv
164.758 156.26 165.374 156.54 165.808 157.1 cv
166.242 157.66 166.466 158.458 166.466 159.48 cv
166.466 164.1 li
165.206 164.1 li
165.206 159.522 li
165.206 158.794 165.066 158.248 164.814 157.884 cv
164.548 157.534 164.156 157.352 163.624 157.352 cv
162.966 157.352 162.448 157.576 162.07 158.01 cv
161.692 158.444 161.51 159.032 161.51 159.774 cv
161.51 164.1 li
160.25 164.1 li
160.25 159.522 li
160.25 158.794 160.11 158.248 159.858 157.884 cv
159.592 157.534 159.186 157.352 158.654 157.352 cv
158.01 157.352 157.492 157.576 157.114 158.01 cv
156.736 158.444 156.554 159.032 156.554 159.774 cv
156.554 164.1 li
155.294 164.1 li
155.294 156.442 li
156.554 156.442 li
156.554 157.632 li
156.834 157.17 157.184 156.82 157.59 156.596 cv
157.982 156.372 158.458 156.26 159.018 156.26 cv
159.578 156.26 160.04 156.4 160.432 156.68 cv
160.824 156.96 161.104 157.38 161.3 157.912 cv
ef
174.398 160.278 mo
174.398 159.354 174.202 158.64 173.824 158.108 cv
173.432 157.576 172.914 157.31 172.256 157.31 cv
171.584 157.31 171.066 157.576 170.688 158.108 cv
170.296 158.64 170.114 159.354 170.114 160.278 cv
170.114 161.202 170.296 161.93 170.688 162.462 cv
171.066 162.994 171.584 163.246 172.256 163.246 cv
172.914 163.246 173.432 162.994 173.824 162.462 cv
174.202 161.93 174.398 161.202 174.398 160.278 cv
170.114 157.604 mo
170.366 157.156 170.702 156.82 171.108 156.596 cv
171.514 156.372 172.004 156.26 172.564 156.26 cv
173.488 156.26 174.244 156.638 174.832 157.366 cv
175.406 158.108 175.7 159.074 175.7 160.278 cv
175.7 161.482 175.406 162.462 174.832 163.19 cv
174.244 163.918 173.488 164.282 172.564 164.282 cv
172.004 164.282 171.514 164.17 171.108 163.96 cv
170.702 163.75 170.366 163.414 170.114 162.952 cv
170.114 164.1 li
168.854 164.1 li
168.854 153.46 li
170.114 153.46 li
170.114 157.604 li
ef
184.328 159.956 mo
184.328 160.572 li
178.546 160.572 li
178.602 161.44 178.854 162.112 179.33 162.56 cv
179.792 163.008 180.436 163.232 181.276 163.232 cv
181.752 163.232 182.228 163.176 182.676 163.064 cv
183.124 162.952 183.586 162.77 184.034 162.518 cv
184.034 163.708 li
183.586 163.904 183.124 164.058 182.648 164.142 cv
182.172 164.226 181.682 164.282 181.206 164.282 cv
179.974 164.282 179.008 163.932 178.294 163.232 cv
177.58 162.532 177.23 161.566 177.23 160.348 cv
177.23 159.102 177.566 158.108 178.238 157.366 cv
178.91 156.638 179.834 156.26 180.982 156.26 cv
182.018 156.26 182.83 156.596 183.432 157.254 cv
184.02 157.926 184.328 158.822 184.328 159.956 cv
183.068 159.592 mo
183.054 158.906 182.858 158.36 182.494 157.94 cv
182.116 157.534 181.612 157.324 180.996 157.324 cv
180.296 157.324 179.736 157.534 179.316 157.926 cv
178.896 158.318 178.644 158.878 178.588 159.592 cv
183.068 159.592 li
ef
190.854 157.618 mo
190.714 157.534 190.56 157.478 190.392 157.436 cv
190.224 157.408 190.042 157.38 189.846 157.38 cv
189.132 157.38 188.586 157.618 188.208 158.08 cv
187.816 158.542 187.634 159.2 187.634 160.068 cv
187.634 164.1 li
186.374 164.1 li
186.374 156.442 li
187.634 156.442 li
187.634 157.632 li
187.886 157.17 188.236 156.82 188.656 156.596 cv
189.076 156.372 189.594 156.26 190.21 156.26 cv
190.294 156.26 190.392 156.274 190.504 156.274 cv
190.602 156.288 190.714 156.302 190.854 156.33 cv
190.854 157.618 li
ef
199.584 157.324 mo
198.912 157.324 198.38 157.59 197.988 158.122 cv
197.596 158.654 197.4 159.368 197.4 160.278 cv
197.4 161.202 197.582 161.916 197.974 162.448 cv
198.366 162.98 198.898 163.232 199.584 163.232 cv
200.256 163.232 200.788 162.98 201.18 162.448 cv
201.572 161.916 201.768 161.202 201.768 160.278 cv
201.768 159.382 201.572 158.654 201.18 158.122 cv
200.788 157.59 200.256 157.324 199.584 157.324 cv
199.584 156.26 mo
200.676 156.26 201.53 156.624 202.16 157.324 cv
202.776 158.038 203.098 159.018 203.098 160.278 cv
203.098 161.538 202.776 162.518 202.16 163.218 cv
201.53 163.932 200.676 164.282 199.584 164.282 cv
198.478 164.282 197.61 163.932 196.994 163.218 cv
196.378 162.518 196.07 161.538 196.07 160.278 cv
196.07 159.018 196.378 158.038 196.994 157.324 cv
197.61 156.624 198.478 156.26 199.584 156.26 cv
ef
209.134 153.46 mo
209.134 154.51 li
207.93 154.51 li
207.482 154.51 207.16 154.608 206.992 154.79 cv
206.81 154.972 206.726 155.294 206.726 155.77 cv
206.726 156.442 li
208.798 156.442 li
208.798 157.422 li
206.726 157.422 li
206.726 164.1 li
205.466 164.1 li
205.466 157.422 li
204.262 157.422 li
204.262 156.442 li
205.466 156.442 li
205.466 155.91 li
205.466 155.07 205.662 154.44 206.054 154.048 cv
206.446 153.656 207.076 153.46 207.944 153.46 cv
209.134 153.46 li
ef
215.862 154.272 mo
215.862 156.442 li
218.452 156.442 li
218.452 157.422 li
215.862 157.422 li
215.862 161.58 li
215.862 162.21 215.946 162.616 216.114 162.784 cv
216.282 162.966 216.632 163.05 217.164 163.05 cv
218.452 163.05 li
218.452 164.1 li
217.164 164.1 li
216.184 164.1 215.512 163.918 215.148 163.554 cv
214.784 163.19 214.602 162.532 214.602 161.58 cv
214.602 157.422 li
213.678 157.422 li
213.678 156.442 li
214.602 156.442 li
214.602 154.272 li
215.862 154.272 li
ef
220.016 156.442 mo
221.276 156.442 li
221.276 164.1 li
220.016 164.1 li
220.016 156.442 li
220.016 153.46 mo
220.016 153.46 mo
221.276 153.46 li
221.276 155.056 li
220.016 155.056 li
cp
ef
229.94 157.912 mo
230.248 157.352 230.626 156.946 231.06 156.666 cv
231.494 156.4 232.012 156.26 232.614 156.26 cv
233.398 156.26 234.014 156.54 234.448 157.1 cv
234.882 157.66 235.106 158.458 235.106 159.48 cv
235.106 164.1 li
233.846 164.1 li
233.846 159.522 li
233.846 158.794 233.706 158.248 233.454 157.884 cv
233.188 157.534 232.796 157.352 232.264 157.352 cv
231.606 157.352 231.088 157.576 230.71 158.01 cv
230.332 158.444 230.15 159.032 230.15 159.774 cv
230.15 164.1 li
228.89 164.1 li
228.89 159.522 li
228.89 158.794 228.75 158.248 228.498 157.884 cv
228.232 157.534 227.826 157.352 227.294 157.352 cv
226.65 157.352 226.132 157.576 225.754 158.01 cv
225.376 158.444 225.194 159.032 225.194 159.774 cv
225.194 164.1 li
223.934 164.1 li
223.934 156.442 li
225.194 156.442 li
225.194 157.632 li
225.474 157.17 225.824 156.82 226.23 156.596 cv
226.622 156.372 227.098 156.26 227.658 156.26 cv
228.218 156.26 228.68 156.4 229.072 156.68 cv
229.464 156.96 229.744 157.38 229.94 157.912 cv
ef
244.088 159.956 mo
244.088 160.572 li
238.306 160.572 li
238.362 161.44 238.614 162.112 239.09 162.56 cv
239.552 163.008 240.196 163.232 241.036 163.232 cv
241.512 163.232 241.988 163.176 242.436 163.064 cv
242.884 162.952 243.346 162.77 243.794 162.518 cv
243.794 163.708 li
243.346 163.904 242.884 164.058 242.408 164.142 cv
241.932 164.226 241.442 164.282 240.966 164.282 cv
239.734 164.282 238.768 163.932 238.054 163.232 cv
237.34 162.532 236.99 161.566 236.99 160.348 cv
236.99 159.102 237.326 158.108 237.998 157.366 cv
238.67 156.638 239.594 156.26 240.742 156.26 cv
241.778 156.26 242.59 156.596 243.192 157.254 cv
243.78 157.926 244.088 158.822 244.088 159.956 cv
242.828 159.592 mo
242.814 158.906 242.618 158.36 242.254 157.94 cv
241.876 157.534 241.372 157.324 240.756 157.324 cv
240.056 157.324 239.496 157.534 239.076 157.926 cv
238.656 158.318 238.404 158.878 238.348 159.592 cv
242.828 159.592 li
ef
251.062 156.666 mo
251.062 157.856 li
250.698 157.688 250.334 157.548 249.956 157.45 cv
249.564 157.366 249.172 157.31 248.766 157.31 cv
248.136 157.31 247.66 157.408 247.352 157.604 cv
247.044 157.8 246.89 158.08 246.89 158.458 cv
246.89 158.752 247.002 158.976 247.226 159.144 cv
247.45 159.312 247.898 159.48 248.57 159.62 cv
249.004 159.718 li
249.9 159.914 250.53 160.194 250.908 160.53 cv
251.272 160.88 251.468 161.37 251.468 161.986 cv
251.468 162.7 251.188 163.26 250.628 163.666 cv
250.068 164.086 249.284 164.282 248.304 164.282 cv
247.884 164.282 247.464 164.24 247.016 164.17 cv
246.568 164.1 246.106 163.988 245.616 163.82 cv
245.616 162.518 li
246.078 162.77 246.54 162.952 246.988 163.064 cv
247.436 163.19 247.884 163.246 248.332 163.246 cv
248.92 163.246 249.382 163.148 249.704 162.952 cv
250.012 162.756 250.18 162.462 250.18 162.084 cv
250.18 161.748 250.054 161.482 249.83 161.3 cv
249.606 161.118 249.102 160.936 248.318 160.768 cv
247.884 160.67 li
247.1 160.502 246.526 160.25 246.19 159.914 cv
245.84 159.578 245.672 159.116 245.672 158.514 cv
245.672 157.8 245.924 157.24 246.428 156.848 cv
246.932 156.456 247.66 156.26 248.612 156.26 cv
249.074 156.26 249.508 156.302 249.928 156.372 cv
250.334 156.442 250.712 156.54 251.062 156.666 cv
ef
53.907 117.431 mo
50.407 117.431 li
f
53.907 117.431 mo
50.407 117.431 li
@
29.112 113.404 mo
28.398 113.404 27.866 113.754 27.502 114.454 cv
27.138 115.154 26.97 116.204 26.97 117.604 cv
26.97 119.004 27.138 120.054 27.502 120.754 cv
27.866 121.454 28.398 121.804 29.112 121.804 cv
29.826 121.804 30.358 121.454 30.722 120.754 cv
31.072 120.054 31.254 119.004 31.254 117.604 cv
31.254 116.204 31.072 115.154 30.722 114.454 cv
30.358 113.754 29.826 113.404 29.112 113.404 cv
29.112 112.312 mo
30.246 112.312 31.114 112.774 31.73 113.67 cv
32.332 114.58 32.64 115.896 32.64 117.604 cv
32.64 119.326 32.332 120.642 31.73 121.538 cv
31.114 122.434 30.246 122.882 29.112 122.882 cv
27.964 122.882 27.082 122.434 26.48 121.538 cv
25.878 120.642 25.584 119.326 25.584 117.604 cv
25.584 115.896 25.878 114.58 26.48 113.67 cv
27.082 112.774 27.964 112.312 29.112 112.312 cv
ef
35.038 122.7 mo
36.48 122.7 li
36.48 120.964 li
35.038 120.964 li
cp
f
39.716 121.538 mo
41.97 121.538 li
41.97 113.754 li
39.52 114.244 li
39.52 112.984 li
41.956 112.494 li
43.342 112.494 li
43.342 121.538 li
45.596 121.538 li
45.596 122.7 li
39.716 122.7 li
39.716 121.538 li
ef
53.907 94.418 mo
50.407 94.418 li
f
53.907 94.418 mo
50.407 94.418 li
@
29.112 90.484 mo
28.398 90.484 27.866 90.834 27.502 91.534 cv
27.138 92.234 26.97 93.284 26.97 94.684 cv
26.97 96.084 27.138 97.134 27.502 97.834 cv
27.866 98.534 28.398 98.884 29.112 98.884 cv
29.826 98.884 30.358 98.534 30.722 97.834 cv
31.072 97.134 31.254 96.084 31.254 94.684 cv
31.254 93.284 31.072 92.234 30.722 91.534 cv
30.358 90.834 29.826 90.484 29.112 90.484 cv
29.112 89.392 mo
30.246 89.392 31.114 89.854 31.73 90.75 cv
32.332 91.66 32.64 92.976 32.64 94.684 cv
32.64 96.406 32.332 97.722 31.73 98.618 cv
31.114 99.514 30.246 99.962 29.112 99.962 cv
27.964 99.962 27.082 99.514 26.48 98.618 cv
25.878 97.722 25.584 96.406 25.584 94.684 cv
25.584 92.976 25.878 91.66 26.48 90.75 cv
27.082 89.854 27.964 89.392 29.112 89.392 cv
ef
35.038 99.78 mo
36.48 99.78 li
36.48 98.044 li
35.038 98.044 li
cp
f
40.668 98.618 mo
45.484 98.618 li
45.484 99.78 li
39.002 99.78 li
39.002 98.618 li
39.52 98.086 40.234 97.358 41.144 96.434 cv
42.04 95.524 42.614 94.936 42.852 94.67 cv
43.3 94.18 43.608 93.76 43.776 93.41 cv
43.944 93.074 44.042 92.724 44.042 92.388 cv
44.042 91.856 43.846 91.408 43.468 91.072 cv
43.09 90.736 42.6 90.554 41.984 90.554 cv
41.55 90.554 41.088 90.638 40.612 90.778 cv
40.136 90.932 39.618 91.156 39.072 91.464 cv
39.072 90.064 li
39.632 89.84 40.15 89.672 40.626 89.56 cv
41.102 89.448 41.55 89.392 41.956 89.392 cv
43.006 89.392 43.846 89.658 44.476 90.19 cv
45.106 90.722 45.428 91.422 45.428 92.304 cv
45.428 92.724 45.344 93.13 45.19 93.494 cv
45.036 93.872 44.756 94.32 44.336 94.824 cv
44.224 94.964 43.86 95.342 43.244 95.972 cv
42.628 96.602 41.774 97.484 40.668 98.618 cv
ef
53.907 71.405 mo
50.407 71.405 li
f
53.907 71.405 mo
50.407 71.405 li
@
29.112 67.444 mo
28.398 67.444 27.866 67.794 27.502 68.494 cv
27.138 69.194 26.97 70.244 26.97 71.644 cv
26.97 73.044 27.138 74.094 27.502 74.794 cv
27.866 75.494 28.398 75.844 29.112 75.844 cv
29.826 75.844 30.358 75.494 30.722 74.794 cv
31.072 74.094 31.254 73.044 31.254 71.644 cv
31.254 70.244 31.072 69.194 30.722 68.494 cv
30.358 67.794 29.826 67.444 29.112 67.444 cv
29.112 66.352 mo
30.246 66.352 31.114 66.814 31.73 67.71 cv
32.332 68.62 32.64 69.936 32.64 71.644 cv
32.64 73.366 32.332 74.682 31.73 75.578 cv
31.114 76.474 30.246 76.922 29.112 76.922 cv
27.964 76.922 27.082 76.474 26.48 75.578 cv
25.878 74.682 25.584 73.366 25.584 71.644 cv
25.584 69.936 25.878 68.62 26.48 67.71 cv
27.082 66.814 27.964 66.352 29.112 66.352 cv
ef
35.038 76.74 mo
36.48 76.74 li
36.48 75.004 li
35.038 75.004 li
cp
f
43.664 71.238 mo
44.322 71.378 44.84 71.672 45.204 72.12 cv
45.568 72.568 45.764 73.128 45.764 73.772 cv
45.764 74.78 45.414 75.564 44.728 76.11 cv
44.028 76.656 43.048 76.922 41.774 76.922 cv
41.34 76.922 40.892 76.88 40.444 76.796 cv
39.996 76.726 39.52 76.6 39.044 76.432 cv
39.044 75.102 li
39.422 75.326 39.842 75.494 40.304 75.606 cv
40.752 75.718 41.228 75.774 41.732 75.774 cv
42.6 75.774 43.258 75.606 43.706 75.27 cv
44.154 74.934 44.392 74.43 44.392 73.772 cv
44.392 73.184 44.182 72.708 43.762 72.372 cv
43.342 72.036 42.754 71.854 41.998 71.854 cv
40.808 71.854 li
40.808 70.72 li
42.054 70.72 li
42.726 70.72 43.244 70.594 43.608 70.314 cv
43.972 70.048 44.154 69.656 44.154 69.138 cv
44.154 68.62 43.958 68.214 43.594 67.934 cv
43.216 67.654 42.684 67.514 41.998 67.514 cv
41.62 67.514 41.214 67.556 40.78 67.64 cv
40.346 67.724 39.87 67.85 39.352 68.018 cv
39.352 66.786 li
39.87 66.646 40.36 66.534 40.822 66.464 cv
41.27 66.394 41.704 66.352 42.124 66.352 cv
43.16 66.352 43.986 66.59 44.602 67.066 cv
45.218 67.542 45.526 68.186 45.526 68.998 cv
45.526 69.558 45.358 70.034 45.036 70.426 cv
44.714 70.818 44.252 71.098 43.664 71.238 cv
ef
53.907 48.392 mo
50.407 48.392 li
f
53.907 48.392 mo
50.407 48.392 li
@
29.112 44.404 mo
28.398 44.404 27.866 44.754 27.502 45.454 cv
27.138 46.154 26.97 47.204 26.97 48.604 cv
26.97 50.004 27.138 51.054 27.502 51.754 cv
27.866 52.454 28.398 52.804 29.112 52.804 cv
29.826 52.804 30.358 52.454 30.722 51.754 cv
31.072 51.054 31.254 50.004 31.254 48.604 cv
31.254 47.204 31.072 46.154 30.722 45.454 cv
30.358 44.754 29.826 44.404 29.112 44.404 cv
29.112 43.312 mo
30.246 43.312 31.114 43.774 31.73 44.67 cv
32.332 45.58 32.64 46.896 32.64 48.604 cv
32.64 50.326 32.332 51.642 31.73 52.538 cv
31.114 53.434 30.246 53.882 29.112 53.882 cv
27.964 53.882 27.082 53.434 26.48 52.538 cv
25.878 51.642 25.584 50.326 25.584 48.604 cv
25.584 46.896 25.878 45.58 26.48 44.67 cv
27.082 43.774 27.964 43.312 29.112 43.312 cv
ef
35.038 53.7 mo
36.48 53.7 li
36.48 51.964 li
35.038 51.964 li
cp
f
43.272 44.698 mo
39.786 50.144 li
43.272 50.144 li
43.272 44.698 li
42.908 43.494 mo
44.644 43.494 li
44.644 50.144 li
46.1 50.144 li
46.1 51.292 li
44.644 51.292 li
44.644 53.7 li
43.272 53.7 li
43.272 51.292 li
38.666 51.292 li
38.666 49.962 li
42.908 43.494 li
ef
53.907 25.38 mo
50.407 25.38 li
f
53.907 25.38 mo
50.407 25.38 li
@
29.112 21.364 mo
28.398 21.364 27.866 21.714 27.502 22.414 cv
27.138 23.114 26.97 24.164 26.97 25.564 cv
26.97 26.964 27.138 28.014 27.502 28.714 cv
27.866 29.414 28.398 29.764 29.112 29.764 cv
29.826 29.764 30.358 29.414 30.722 28.714 cv
31.072 28.014 31.254 26.964 31.254 25.564 cv
31.254 24.164 31.072 23.114 30.722 22.414 cv
30.358 21.714 29.826 21.364 29.112 21.364 cv
29.112 20.272 mo
30.246 20.272 31.114 20.734 31.73 21.63 cv
32.332 22.54 32.64 23.856 32.64 25.564 cv
32.64 27.286 32.332 28.602 31.73 29.498 cv
31.114 30.394 30.246 30.842 29.112 30.842 cv
27.964 30.842 27.082 30.394 26.48 29.498 cv
25.878 28.602 25.584 27.286 25.584 25.564 cv
25.584 23.856 25.878 22.54 26.48 21.63 cv
27.082 20.734 27.964 20.272 29.112 20.272 cv
ef
35.038 30.66 mo
36.48 30.66 li
36.48 28.924 li
35.038 28.924 li
cp
f
39.492 20.454 mo
44.91 20.454 li
44.91 21.616 li
40.752 21.616 li
40.752 24.122 li
40.948 24.052 41.158 23.996 41.354 23.968 cv
41.55 23.94 41.76 23.912 41.956 23.912 cv
43.09 23.912 43.986 24.234 44.658 24.85 cv
45.33 25.48 45.666 26.32 45.666 27.384 cv
45.666 28.49 45.316 29.344 44.63 29.946 cv
43.944 30.548 42.978 30.842 41.746 30.842 cv
41.312 30.842 40.878 30.8 40.43 30.744 cv
39.982 30.674 39.534 30.576 39.058 30.422 cv
39.058 29.036 li
39.464 29.26 39.884 29.428 40.332 29.54 cv
40.766 29.652 41.228 29.694 41.718 29.694 cv
42.502 29.694 43.132 29.498 43.594 29.078 cv
44.042 28.658 44.28 28.098 44.28 27.384 cv
44.28 26.684 44.042 26.124 43.594 25.704 cv
43.132 25.284 42.502 25.074 41.718 25.074 cv
41.354 25.074 40.976 25.116 40.612 25.2 cv
40.248 25.284 39.87 25.41 39.492 25.578 cv
39.492 20.454 li
ef
7.494 96.688 mo
7.494 88.064 li
8.656 88.064 li
8.656 91.69 li
17.7 91.69 li
17.7 93.076 li
8.656 93.076 li
8.656 96.688 li
7.494 96.688 li
ef
10.042 86.824 mo
10.042 85.564 li
17.7 85.564 li
17.7 86.824 li
10.042 86.824 li
7.06 86.824 mo
8.656 86.824 mo
7.06 86.824 li
7.06 85.564 li
8.656 85.564 li
cp
ef
11.512 76.9 mo
10.952 76.592 10.546 76.214 10.266 75.78 cv
10 75.346 9.86 74.828 9.86 74.226 cv
9.86 73.442 10.14 72.826 10.7 72.392 cv
11.26 71.958 12.058 71.734 13.08 71.734 cv
17.7 71.734 li
17.7 72.994 li
13.122 72.994 li
12.394 72.994 11.848 73.134 11.484 73.386 cv
11.134 73.652 10.952 74.044 10.952 74.576 cv
10.952 75.234 11.176 75.752 11.61 76.13 cv
12.044 76.508 12.632 76.69 13.374 76.69 cv
17.7 76.69 li
17.7 77.95 li
13.122 77.95 li
12.394 77.95 11.848 78.09 11.484 78.342 cv
11.134 78.608 10.952 79.014 10.952 79.546 cv
10.952 80.19 11.176 80.708 11.61 81.086 cv
12.044 81.464 12.632 81.646 13.374 81.646 cv
17.7 81.646 li
17.7 82.906 li
10.042 82.906 li
10.042 81.646 li
11.232 81.646 li
10.77 81.366 10.42 81.016 10.196 80.61 cv
9.972 80.218 9.86 79.742 9.86 79.182 cv
9.86 78.622 10 78.16 10.28 77.768 cv
10.56 77.376 10.98 77.096 11.512 76.9 cv
ef
13.556 62.752 mo
14.172 62.752 li
14.172 68.534 li
15.04 68.478 15.712 68.226 16.16 67.75 cv
16.608 67.288 16.832 66.644 16.832 65.804 cv
16.832 65.328 16.776 64.852 16.664 64.404 cv
16.552 63.956 16.37 63.494 16.118 63.046 cv
17.308 63.046 li
17.504 63.494 17.658 63.956 17.742 64.432 cv
17.826 64.908 17.882 65.398 17.882 65.874 cv
17.882 67.106 17.532 68.072 16.832 68.786 cv
16.132 69.5 15.166 69.85 13.948 69.85 cv
12.702 69.85 11.708 69.514 10.966 68.842 cv
10.238 68.17 9.86 67.246 9.86 66.098 cv
9.86 65.062 10.196 64.25 10.854 63.648 cv
11.526 63.06 12.422 62.752 13.556 62.752 cv
13.192 64.012 mo
12.506 64.026 11.96 64.222 11.54 64.586 cv
11.134 64.964 10.924 65.468 10.924 66.084 cv
10.924 66.784 11.134 67.344 11.526 67.764 cv
11.918 68.184 12.478 68.436 13.192 68.492 cv
13.192 64.012 li
ef
7.074 53.2 mo
8.138 53.816 9.174 54.264 10.196 54.558 cv
11.218 54.866 12.254 55.006 13.304 55.006 cv
14.368 55.006 15.404 54.866 16.426 54.558 cv
17.462 54.264 18.484 53.816 19.534 53.2 cv
19.534 54.292 li
18.456 54.978 17.42 55.496 16.384 55.832 cv
15.348 56.168 14.326 56.336 13.304 56.336 cv
12.296 56.336 11.274 56.168 10.238 55.832 cv
9.202 55.496 8.152 54.992 7.074 54.292 cv
7.074 53.2 li
ef
10.266 45.818 mo
11.456 45.818 li
11.288 46.182 11.148 46.546 11.05 46.924 cv
10.966 47.316 10.91 47.708 10.91 48.114 cv
10.91 48.744 11.008 49.22 11.204 49.528 cv
11.4 49.836 11.68 49.99 12.058 49.99 cv
12.352 49.99 12.576 49.878 12.744 49.654 cv
12.912 49.43 13.08 48.982 13.22 48.31 cv
13.318 47.876 li
13.514 46.98 13.794 46.35 14.13 45.972 cv
14.48 45.608 14.97 45.412 15.586 45.412 cv
16.3 45.412 16.86 45.692 17.266 46.252 cv
17.686 46.812 17.882 47.596 17.882 48.576 cv
17.882 48.996 17.84 49.416 17.77 49.864 cv
17.7 50.312 17.588 50.774 17.42 51.264 cv
16.118 51.264 li
16.37 50.802 16.552 50.34 16.664 49.892 cv
16.79 49.444 16.846 48.996 16.846 48.548 cv
16.846 47.96 16.748 47.498 16.552 47.176 cv
16.356 46.868 16.062 46.7 15.684 46.7 cv
15.348 46.7 15.082 46.826 14.9 47.05 cv
14.718 47.274 14.536 47.778 14.368 48.562 cv
14.27 48.996 li
14.102 49.78 13.85 50.354 13.514 50.69 cv
13.178 51.04 12.716 51.208 12.114 51.208 cv
11.4 51.208 10.84 50.956 10.448 50.452 cv
10.056 49.948 9.86 49.22 9.86 48.268 cv
9.86 47.806 9.902 47.372 9.972 46.952 cv
10.042 46.546 10.14 46.168 10.266 45.818 cv
ef
7.074 43.58 mo
7.074 42.488 li
8.152 41.816 9.202 41.298 10.238 40.962 cv
11.274 40.626 12.296 40.444 13.304 40.444 cv
14.326 40.444 15.348 40.626 16.384 40.962 cv
17.42 41.298 18.456 41.816 19.534 42.488 cv
19.534 43.58 li
18.484 42.978 17.462 42.53 16.426 42.222 cv
15.404 41.928 14.368 41.774 13.304 41.774 cv
12.254 41.774 11.218 41.928 10.196 42.222 cv
9.174 42.53 8.138 42.978 7.074 43.58 cv
ef
1.5 lw
2 lc
66.588 111.758 mo
94.77 107.446 li
122.952 110.561 li
151.133 106.774 li
179.315 104.076 li
207.497 104.019 li
235.679 104.173 li
263.861 112.845 li
292.043 111.586 li
320.224 104.605 li
.905547 .71957 0 0 cmyk
@
63.588 114.758 mo
69.588 114.758 li
69.588 108.758 li
63.588 108.758 li
cp
f
1 lw
0 lc
0 lj
63.588 114.758 mo
69.588 114.758 li
69.588 108.758 li
63.588 108.758 li
cp
@
91.77 110.446 mo
97.77 110.446 li
97.77 104.446 li
91.77 104.446 li
cp
f
91.77 110.446 mo
97.77 110.446 li
97.77 104.446 li
91.77 104.446 li
cp
@
119.952 113.561 mo
125.952 113.561 li
125.952 107.561 li
119.952 107.561 li
cp
f
119.952 113.561 mo
125.952 113.561 li
125.952 107.561 li
119.952 107.561 li
cp
@
148.134 109.774 mo
154.134 109.774 li
154.134 103.774 li
148.134 103.774 li
cp
f
148.134 109.774 mo
154.134 109.774 li
154.134 103.774 li
148.134 103.774 li
cp
@
176.316 107.076 mo
182.316 107.076 li
182.316 101.076 li
176.316 101.076 li
cp
f
176.316 107.076 mo
182.316 107.076 li
182.316 101.076 li
176.316 101.076 li
cp
@
204.497 107.019 mo
210.497 107.019 li
210.497 101.019 li
204.497 101.019 li
cp
f
204.497 107.019 mo
210.497 107.019 li
210.497 101.019 li
204.497 101.019 li
cp
@
232.679 107.173 mo
238.679 107.173 li
238.679 101.173 li
232.679 101.173 li
cp
f
232.679 107.173 mo
238.679 107.173 li
238.679 101.173 li
232.679 101.173 li
cp
@
260.861 115.845 mo
266.861 115.845 li
266.861 109.845 li
260.861 109.845 li
cp
f
260.861 115.845 mo
266.861 115.845 li
266.861 109.845 li
260.861 109.845 li
cp
@
289.043 114.586 mo
295.043 114.586 li
295.043 108.586 li
289.043 108.586 li
cp
f
289.043 114.586 mo
295.043 114.586 li
295.043 108.586 li
289.043 108.586 li
cp
@
317.225 107.605 mo
323.225 107.605 li
323.225 101.605 li
317.225 101.605 li
cp
f
317.225 107.605 mo
323.225 107.605 li
323.225 101.605 li
317.225 101.605 li
cp
@
1.5 lw
2 lc
1 lj
66.588 77.752 mo
94.77 81.808 li
122.952 73.794 li
151.133 77.988 li
179.315 83.853 li
207.497 81.428 li
235.679 83.859 li
263.861 82.529 li
292.043 83.866 li
320.224 77.988 li
@
66.588 80.752 mo
67.384 80.752 68.147 80.436 68.709 79.873 cv
69.272 79.311 69.588 78.548 69.588 77.752 cv
69.588 76.956 69.272 76.193 68.709 75.631 cv
68.147 75.068 67.384 74.752 66.588 74.752 cv
65.792 74.752 65.029 75.068 64.467 75.631 cv
63.904 76.193 63.588 76.956 63.588 77.752 cv
63.588 78.548 63.904 79.311 64.467 79.873 cv
65.029 80.436 65.792 80.752 66.588 80.752 cv
cp
f
1 lw
0 lc
66.588 80.752 mo
67.384 80.752 68.147 80.436 68.709 79.873 cv
69.272 79.311 69.588 78.548 69.588 77.752 cv
69.588 76.956 69.272 76.193 68.709 75.631 cv
68.147 75.068 67.384 74.752 66.588 74.752 cv
65.792 74.752 65.029 75.068 64.467 75.631 cv
63.904 76.193 63.588 76.956 63.588 77.752 cv
63.588 78.548 63.904 79.311 64.467 79.873 cv
65.029 80.436 65.792 80.752 66.588 80.752 cv
cp
@
94.77 84.808 mo
95.566 84.808 96.329 84.492 96.891 83.929 cv
97.454 83.367 97.77 82.604 97.77 81.808 cv
97.77 81.012 97.454 80.249 96.891 79.687 cv
96.329 79.124 95.566 78.808 94.77 78.808 cv
93.974 78.808 93.211 79.124 92.649 79.687 cv
92.086 80.249 91.77 81.012 91.77 81.808 cv
91.77 82.604 92.086 83.367 92.649 83.929 cv
93.211 84.492 93.974 84.808 94.77 84.808 cv
cp
f
94.77 84.808 mo
95.566 84.808 96.329 84.492 96.891 83.929 cv
97.454 83.367 97.77 82.604 97.77 81.808 cv
97.77 81.012 97.454 80.249 96.891 79.687 cv
96.329 79.124 95.566 78.808 94.77 78.808 cv
93.974 78.808 93.211 79.124 92.649 79.687 cv
92.086 80.249 91.77 81.012 91.77 81.808 cv
91.77 82.604 92.086 83.367 92.649 83.929 cv
93.211 84.492 93.974 84.808 94.77 84.808 cv
cp
@
122.952 76.793 mo
123.748 76.793 124.511 76.477 125.073 75.914 cv
125.636 75.352 125.952 74.589 125.952 73.793 cv
125.952 72.997 125.636 72.234 125.073 71.672 cv
124.511 71.109 123.748 70.793 122.952 70.793 cv
122.156 70.793 121.393 71.109 120.831 71.672 cv
120.268 72.234 119.952 72.997 119.952 73.793 cv
119.952 74.589 120.268 75.352 120.831 75.914 cv
121.393 76.477 122.156 76.793 122.952 76.793 cv
cp
f
122.952 76.793 mo
123.748 76.793 124.511 76.477 125.073 75.914 cv
125.636 75.352 125.952 74.589 125.952 73.793 cv
125.952 72.997 125.636 72.234 125.073 71.672 cv
124.511 71.109 123.748 70.793 122.952 70.793 cv
122.156 70.793 121.393 71.109 120.831 71.672 cv
120.268 72.234 119.952 72.997 119.952 73.793 cv
119.952 74.589 120.268 75.352 120.831 75.914 cv
121.393 76.477 122.156 76.793 122.952 76.793 cv
cp
@
151.134 80.988 mo
151.93 80.988 152.693 80.672 153.255 80.109 cv
153.818 79.547 154.134 78.784 154.134 77.988 cv
154.134 77.192 153.818 76.429 153.255 75.867 cv
152.693 75.304 151.93 74.988 151.134 74.988 cv
150.338 74.988 149.575 75.304 149.013 75.867 cv
148.45 76.429 148.134 77.192 148.134 77.988 cv
148.134 78.784 148.45 79.547 149.013 80.109 cv
149.575 80.672 150.338 80.988 151.134 80.988 cv
cp
f
151.134 80.988 mo
151.93 80.988 152.693 80.672 153.255 80.109 cv
153.818 79.547 154.134 78.784 154.134 77.988 cv
154.134 77.192 153.818 76.429 153.255 75.867 cv
152.693 75.304 151.93 74.988 151.134 74.988 cv
150.338 74.988 149.575 75.304 149.013 75.867 cv
148.45 76.429 148.134 77.192 148.134 77.988 cv
148.134 78.784 148.45 79.547 149.013 80.109 cv
149.575 80.672 150.338 80.988 151.134 80.988 cv
cp
@
179.316 86.853 mo
180.112 86.853 180.875 86.537 181.437 85.974 cv
182 85.412 182.316 84.649 182.316 83.853 cv
182.316 83.057 182 82.294 181.437 81.732 cv
180.875 81.169 180.112 80.853 179.316 80.853 cv
178.52 80.853 177.757 81.169 177.195 81.732 cv
176.632 82.294 176.316 83.057 176.316 83.853 cv
176.316 84.649 176.632 85.412 177.195 85.974 cv
177.757 86.537 178.52 86.853 179.316 86.853 cv
cp
f
179.316 86.853 mo
180.112 86.853 180.875 86.537 181.437 85.974 cv
182 85.412 182.316 84.649 182.316 83.853 cv
182.316 83.057 182 82.294 181.437 81.732 cv
180.875 81.169 180.112 80.853 179.316 80.853 cv
178.52 80.853 177.757 81.169 177.195 81.732 cv
176.632 82.294 176.316 83.057 176.316 83.853 cv
176.316 84.649 176.632 85.412 177.195 85.974 cv
177.757 86.537 178.52 86.853 179.316 86.853 cv
cp
@
207.497 84.428 mo
208.293 84.428 209.056 84.112 209.618 83.549 cv
210.181 82.987 210.497 82.224 210.497 81.428 cv
210.497 80.632 210.181 79.869 209.618 79.307 cv
209.056 78.744 208.293 78.428 207.497 78.428 cv
206.701 78.428 205.938 78.744 205.376 79.307 cv
204.813 79.869 204.497 80.632 204.497 81.428 cv
204.497 82.224 204.813 82.987 205.376 83.549 cv
205.938 84.112 206.701 84.428 207.497 84.428 cv
cp
f
207.497 84.428 mo
208.293 84.428 209.056 84.112 209.618 83.549 cv
210.181 82.987 210.497 82.224 210.497 81.428 cv
210.497 80.632 210.181 79.869 209.618 79.307 cv
209.056 78.744 208.293 78.428 207.497 78.428 cv
206.701 78.428 205.938 78.744 205.376 79.307 cv
204.813 79.869 204.497 80.632 204.497 81.428 cv
204.497 82.224 204.813 82.987 205.376 83.549 cv
205.938 84.112 206.701 84.428 207.497 84.428 cv
cp
@
235.679 86.859 mo
236.475 86.859 237.238 86.543 237.8 85.98 cv
238.363 85.418 238.679 84.655 238.679 83.859 cv
238.679 83.063 238.363 82.3 237.8 81.738 cv
237.238 81.175 236.475 80.859 235.679 80.859 cv
234.883 80.859 234.12 81.175 233.558 81.738 cv
232.995 82.3 232.679 83.063 232.679 83.859 cv
232.679 84.655 232.995 85.418 233.558 85.98 cv
234.12 86.543 234.883 86.859 235.679 86.859 cv
cp
f
235.679 86.859 mo
236.475 86.859 237.238 86.543 237.8 85.98 cv
238.363 85.418 238.679 84.655 238.679 83.859 cv
238.679 83.063 238.363 82.3 237.8 81.738 cv
237.238 81.175 236.475 80.859 235.679 80.859 cv
234.883 80.859 234.12 81.175 233.558 81.738 cv
232.995 82.3 232.679 83.063 232.679 83.859 cv
232.679 84.655 232.995 85.418 233.558 85.98 cv
234.12 86.543 234.883 86.859 235.679 86.859 cv
cp
@
263.861 85.529 mo
264.657 85.529 265.42 85.213 265.982 84.65 cv
266.545 84.088 266.861 83.325 266.861 82.529 cv
266.861 81.733 266.545 80.97 265.982 80.408 cv
265.42 79.845 264.657 79.529 263.861 79.529 cv
263.065 79.529 262.302 79.845 261.74 80.408 cv
261.177 80.97 260.861 81.733 260.861 82.529 cv
260.861 83.325 261.177 84.088 261.74 84.65 cv
262.302 85.213 263.065 85.529 263.861 85.529 cv
cp
f
263.861 85.529 mo
264.657 85.529 265.42 85.213 265.982 84.65 cv
266.545 84.088 266.861 83.325 266.861 82.529 cv
266.861 81.733 266.545 80.97 265.982 80.408 cv
265.42 79.845 264.657 79.529 263.861 79.529 cv
263.065 79.529 262.302 79.845 261.74 80.408 cv
261.177 80.97 260.861 81.733 260.861 82.529 cv
260.861 83.325 261.177 84.088 261.74 84.65 cv
262.302 85.213 263.065 85.529 263.861 85.529 cv
cp
@
292.043 86.866 mo
292.839 86.866 293.602 86.55 294.164 85.987 cv
294.727 85.425 295.043 84.662 295.043 83.866 cv
295.043 83.07 294.727 82.307 294.164 81.745 cv
293.602 81.182 292.839 80.866 292.043 80.866 cv
291.247 80.866 290.484 81.182 289.922 81.745 cv
289.359 82.307 289.043 83.07 289.043 83.866 cv
289.043 84.662 289.359 85.425 289.922 85.987 cv
290.484 86.55 291.247 86.866 292.043 86.866 cv
cp
f
292.043 86.866 mo
292.839 86.866 293.602 86.55 294.164 85.987 cv
294.727 85.425 295.043 84.662 295.043 83.866 cv
295.043 83.07 294.727 82.307 294.164 81.745 cv
293.602 81.182 292.839 80.866 292.043 80.866 cv
291.247 80.866 290.484 81.182 289.922 81.745 cv
289.359 82.307 289.043 83.07 289.043 83.866 cv
289.043 84.662 289.359 85.425 289.922 85.987 cv
290.484 86.55 291.247 86.866 292.043 86.866 cv
cp
@
320.225 80.988 mo
321.021 80.988 321.784 80.672 322.346 80.109 cv
322.909 79.547 323.225 78.784 323.225 77.988 cv
323.225 77.192 322.909 76.429 322.346 75.867 cv
321.784 75.304 321.021 74.988 320.225 74.988 cv
319.429 74.988 318.666 75.304 318.104 75.867 cv
317.541 76.429 317.225 77.192 317.225 77.988 cv
317.225 78.784 317.541 79.547 318.104 80.109 cv
318.666 80.672 319.429 80.988 320.225 80.988 cv
cp
f
320.225 80.988 mo
321.021 80.988 321.784 80.672 322.346 80.109 cv
322.909 79.547 323.225 78.784 323.225 77.988 cv
323.225 77.192 322.909 76.429 322.346 75.867 cv
321.784 75.304 321.021 74.988 320.225 74.988 cv
319.429 74.988 318.666 75.304 318.104 75.867 cv
317.541 76.429 317.225 77.192 317.225 77.988 cv
317.225 78.784 317.541 79.547 318.104 80.109 cv
318.666 80.672 319.429 80.988 320.225 80.988 cv
cp
@
1.5 lw
2 lc
66.588 93.926 mo
94.77 89.451 li
122.952 91.348 li
151.133 92.568 li
179.315 95.977 li
207.497 90.117 li
235.679 91.427 li
263.861 97.68 li
292.043 92.568 li
320.224 91.348 li
0 .9617 .904814 0 cmyk
@
63.588 96.926 mo
69.588 96.926 li
69.588 90.926 li
63.588 90.926 li
cp
f
1 lw
0 lc
0 lj
63.588 96.926 mo
69.588 96.926 li
69.588 90.926 li
63.588 90.926 li
cp
@
91.77 92.451 mo
97.77 92.451 li
97.77 86.451 li
91.77 86.451 li
cp
f
91.77 92.451 mo
97.77 92.451 li
97.77 86.451 li
91.77 86.451 li
cp
@
119.952 94.348 mo
125.952 94.348 li
125.952 88.348 li
119.952 88.348 li
cp
f
119.952 94.348 mo
125.952 94.348 li
125.952 88.348 li
119.952 88.348 li
cp
@
148.134 95.567 mo
154.134 95.567 li
154.134 89.567 li
148.134 89.567 li
cp
f
148.134 95.567 mo
154.134 95.567 li
154.134 89.567 li
148.134 89.567 li
cp
@
176.316 98.976 mo
182.316 98.976 li
182.316 92.976 li
176.316 92.976 li
cp
f
176.316 98.976 mo
182.316 98.976 li
182.316 92.976 li
176.316 92.976 li
cp
@
204.497 93.116 mo
210.497 93.116 li
210.497 87.116 li
204.497 87.116 li
cp
f
204.497 93.116 mo
210.497 93.116 li
210.497 87.116 li
204.497 87.116 li
cp
@
232.679 94.426 mo
238.679 94.426 li
238.679 88.426 li
232.679 88.426 li
cp
f
232.679 94.426 mo
238.679 94.426 li
238.679 88.426 li
232.679 88.426 li
cp
@
260.861 100.68 mo
266.861 100.68 li
266.861 94.68 li
260.861 94.68 li
cp
f
260.861 100.68 mo
266.861 100.68 li
266.861 94.68 li
260.861 94.68 li
cp
@
289.043 95.567 mo
295.043 95.567 li
295.043 89.567 li
289.043 89.567 li
cp
f
289.043 95.567 mo
295.043 95.567 li
295.043 89.567 li
289.043 89.567 li
cp
@
317.225 94.348 mo
323.225 94.348 li
323.225 88.348 li
317.225 88.348 li
cp
f
317.225 94.348 mo
323.225 94.348 li
323.225 88.348 li
317.225 88.348 li
cp
@
1.5 lw
2 lc
1 lj
66.588 30.665 mo
94.77 44.643 li
122.952 46.111 li
151.133 47.878 li
179.315 48.52 li
207.497 42.699 li
235.679 39.197 li
263.861 45.833 li
292.043 41.736 li
320.224 40.587 li
@
66.588 33.665 mo
67.384 33.665 68.147 33.349 68.709 32.786 cv
69.272 32.224 69.588 31.461 69.588 30.665 cv
69.588 29.869 69.272 29.106 68.709 28.544 cv
68.147 27.981 67.384 27.665 66.588 27.665 cv
65.792 27.665 65.029 27.981 64.467 28.544 cv
63.904 29.106 63.588 29.869 63.588 30.665 cv
63.588 31.461 63.904 32.224 64.467 32.786 cv
65.029 33.349 65.792 33.665 66.588 33.665 cv
cp
f
1 lw
0 lc
66.588 33.665 mo
67.384 33.665 68.147 33.349 68.709 32.786 cv
69.272 32.224 69.588 31.461 69.588 30.665 cv
69.588 29.869 69.272 29.106 68.709 28.544 cv
68.147 27.981 67.384 27.665 66.588 27.665 cv
65.792 27.665 65.029 27.981 64.467 28.544 cv
63.904 29.106 63.588 29.869 63.588 30.665 cv
63.588 31.461 63.904 32.224 64.467 32.786 cv
65.029 33.349 65.792 33.665 66.588 33.665 cv
cp
@
94.77 47.643 mo
95.566 47.643 96.329 47.327 96.891 46.764 cv
97.454 46.202 97.77 45.439 97.77 44.643 cv
97.77 43.847 97.454 43.084 96.891 42.522 cv
96.329 41.959 95.566 41.643 94.77 41.643 cv
93.974 41.643 93.211 41.959 92.649 42.522 cv
92.086 43.084 91.77 43.847 91.77 44.643 cv
91.77 45.439 92.086 46.202 92.649 46.764 cv
93.211 47.327 93.974 47.643 94.77 47.643 cv
cp
f
94.77 47.643 mo
95.566 47.643 96.329 47.327 96.891 46.764 cv
97.454 46.202 97.77 45.439 97.77 44.643 cv
97.77 43.847 97.454 43.084 96.891 42.522 cv
96.329 41.959 95.566 41.643 94.77 41.643 cv
93.974 41.643 93.211 41.959 92.649 42.522 cv
92.086 43.084 91.77 43.847 91.77 44.643 cv
91.77 45.439 92.086 46.202 92.649 46.764 cv
93.211 47.327 93.974 47.643 94.77 47.643 cv
cp
@
122.952 49.11 mo
123.748 49.11 124.511 48.794 125.073 48.231 cv
125.636 47.669 125.952 46.906 125.952 46.11 cv
125.952 45.314 125.636 44.551 125.073 43.989 cv
124.511 43.426 123.748 43.11 122.952 43.11 cv
122.156 43.11 121.393 43.426 120.831 43.989 cv
120.268 44.551 119.952 45.314 119.952 46.11 cv
119.952 46.906 120.268 47.669 120.831 48.231 cv
121.393 48.794 122.156 49.11 122.952 49.11 cv
cp
f
122.952 49.11 mo
123.748 49.11 124.511 48.794 125.073 48.231 cv
125.636 47.669 125.952 46.906 125.952 46.11 cv
125.952 45.314 125.636 44.551 125.073 43.989 cv
124.511 43.426 123.748 43.11 122.952 43.11 cv
122.156 43.11 121.393 43.426 120.831 43.989 cv
120.268 44.551 119.952 45.314 119.952 46.11 cv
119.952 46.906 120.268 47.669 120.831 48.231 cv
121.393 48.794 122.156 49.11 122.952 49.11 cv
cp
@
151.134 50.878 mo
151.93 50.878 152.693 50.562 153.255 49.999 cv
153.818 49.437 154.134 48.674 154.134 47.878 cv
154.134 47.082 153.818 46.319 153.255 45.757 cv
152.693 45.194 151.93 44.878 151.134 44.878 cv
150.338 44.878 149.575 45.194 149.013 45.757 cv
148.45 46.319 148.134 47.082 148.134 47.878 cv
148.134 48.674 148.45 49.437 149.013 49.999 cv
149.575 50.562 150.338 50.878 151.134 50.878 cv
cp
f
151.134 50.878 mo
151.93 50.878 152.693 50.562 153.255 49.999 cv
153.818 49.437 154.134 48.674 154.134 47.878 cv
154.134 47.082 153.818 46.319 153.255 45.757 cv
152.693 45.194 151.93 44.878 151.134 44.878 cv
150.338 44.878 149.575 45.194 149.013 45.757 cv
148.45 46.319 148.134 47.082 148.134 47.878 cv
148.134 48.674 148.45 49.437 149.013 49.999 cv
149.575 50.562 150.338 50.878 151.134 50.878 cv
cp
@
179.316 51.52 mo
180.112 51.52 180.875 51.204 181.437 50.641 cv
182 50.079 182.316 49.316 182.316 48.52 cv
182.316 47.724 182 46.961 181.437 46.399 cv
180.875 45.836 180.112 45.52 179.316 45.52 cv
178.52 45.52 177.757 45.836 177.195 46.399 cv
176.632 46.961 176.316 47.724 176.316 48.52 cv
176.316 49.316 176.632 50.079 177.195 50.641 cv
177.757 51.204 178.52 51.52 179.316 51.52 cv
cp
f
179.316 51.52 mo
180.112 51.52 180.875 51.204 181.437 50.641 cv
182 50.079 182.316 49.316 182.316 48.52 cv
182.316 47.724 182 46.961 181.437 46.399 cv
180.875 45.836 180.112 45.52 179.316 45.52 cv
178.52 45.52 177.757 45.836 177.195 46.399 cv
176.632 46.961 176.316 47.724 176.316 48.52 cv
176.316 49.316 176.632 50.079 177.195 50.641 cv
177.757 51.204 178.52 51.52 179.316 51.52 cv
cp
@
207.497 45.699 mo
208.293 45.699 209.056 45.383 209.618 44.82 cv
210.181 44.258 210.497 43.495 210.497 42.699 cv
210.497 41.903 210.181 41.14 209.618 40.578 cv
209.056 40.015 208.293 39.699 207.497 39.699 cv
206.701 39.699 205.938 40.015 205.376 40.578 cv
204.813 41.14 204.497 41.903 204.497 42.699 cv
204.497 43.495 204.813 44.258 205.376 44.82 cv
205.938 45.383 206.701 45.699 207.497 45.699 cv
cp
f
207.497 45.699 mo
208.293 45.699 209.056 45.383 209.618 44.82 cv
210.181 44.258 210.497 43.495 210.497 42.699 cv
210.497 41.903 210.181 41.14 209.618 40.578 cv
209.056 40.015 208.293 39.699 207.497 39.699 cv
206.701 39.699 205.938 40.015 205.376 40.578 cv
204.813 41.14 204.497 41.903 204.497 42.699 cv
204.497 43.495 204.813 44.258 205.376 44.82 cv
205.938 45.383 206.701 45.699 207.497 45.699 cv
cp
@
235.679 42.197 mo
236.475 42.197 237.238 41.881 237.8 41.318 cv
238.363 40.756 238.679 39.993 238.679 39.197 cv
238.679 38.401 238.363 37.638 237.8 37.076 cv
237.238 36.513 236.475 36.197 235.679 36.197 cv
234.883 36.197 234.12 36.513 233.558 37.076 cv
232.995 37.638 232.679 38.401 232.679 39.197 cv
232.679 39.993 232.995 40.756 233.558 41.318 cv
234.12 41.881 234.883 42.197 235.679 42.197 cv
cp
f
235.679 42.197 mo
236.475 42.197 237.238 41.881 237.8 41.318 cv
238.363 40.756 238.679 39.993 238.679 39.197 cv
238.679 38.401 238.363 37.638 237.8 37.076 cv
237.238 36.513 236.475 36.197 235.679 36.197 cv
234.883 36.197 234.12 36.513 233.558 37.076 cv
232.995 37.638 232.679 38.401 232.679 39.197 cv
232.679 39.993 232.995 40.756 233.558 41.318 cv
234.12 41.881 234.883 42.197 235.679 42.197 cv
cp
@
263.861 48.833 mo
264.657 48.833 265.42 48.517 265.982 47.954 cv
266.545 47.392 266.861 46.629 266.861 45.833 cv
266.861 45.037 266.545 44.274 265.982 43.712 cv
265.42 43.149 264.657 42.833 263.861 42.833 cv
263.065 42.833 262.302 43.149 261.74 43.712 cv
261.177 44.274 260.861 45.037 260.861 45.833 cv
260.861 46.629 261.177 47.392 261.74 47.954 cv
262.302 48.517 263.065 48.833 263.861 48.833 cv
cp
f
263.861 48.833 mo
264.657 48.833 265.42 48.517 265.982 47.954 cv
266.545 47.392 266.861 46.629 266.861 45.833 cv
266.861 45.037 266.545 44.274 265.982 43.712 cv
265.42 43.149 264.657 42.833 263.861 42.833 cv
263.065 42.833 262.302 43.149 261.74 43.712 cv
261.177 44.274 260.861 45.037 260.861 45.833 cv
260.861 46.629 261.177 47.392 261.74 47.954 cv
262.302 48.517 263.065 48.833 263.861 48.833 cv
cp
@
292.043 44.735 mo
292.839 44.735 293.602 44.419 294.164 43.856 cv
294.727 43.294 295.043 42.531 295.043 41.735 cv
295.043 40.939 294.727 40.176 294.164 39.614 cv
293.602 39.051 292.839 38.735 292.043 38.735 cv
291.247 38.735 290.484 39.051 289.922 39.614 cv
289.359 40.176 289.043 40.939 289.043 41.735 cv
289.043 42.531 289.359 43.294 289.922 43.856 cv
290.484 44.419 291.247 44.735 292.043 44.735 cv
cp
f
292.043 44.735 mo
292.839 44.735 293.602 44.419 294.164 43.856 cv
294.727 43.294 295.043 42.531 295.043 41.735 cv
295.043 40.939 294.727 40.176 294.164 39.614 cv
293.602 39.051 292.839 38.735 292.043 38.735 cv
291.247 38.735 290.484 39.051 289.922 39.614 cv
289.359 40.176 289.043 40.939 289.043 41.735 cv
289.043 42.531 289.359 43.294 289.922 43.856 cv
290.484 44.419 291.247 44.735 292.043 44.735 cv
cp
@
320.225 43.586 mo
321.021 43.586 321.784 43.27 322.346 42.707 cv
322.909 42.145 323.225 41.382 323.225 40.586 cv
323.225 39.79 322.909 39.027 322.346 38.465 cv
321.784 37.902 321.021 37.586 320.225 37.586 cv
319.429 37.586 318.666 37.902 318.104 38.465 cv
317.541 39.027 317.225 39.79 317.225 40.586 cv
317.225 41.382 317.541 42.145 318.104 42.707 cv
318.666 43.27 319.429 43.586 320.225 43.586 cv
cp
f
320.225 43.586 mo
321.021 43.586 321.784 43.27 322.346 42.707 cv
322.909 42.145 323.225 41.382 323.225 40.586 cv
323.225 39.79 322.909 39.027 322.346 38.465 cv
321.784 37.902 321.021 37.586 320.225 37.586 cv
319.429 37.586 318.666 37.902 318.104 38.465 cv
317.541 39.027 317.225 39.79 317.225 40.586 cv
317.225 41.382 317.541 42.145 318.104 42.707 cv
318.666 43.27 319.429 43.586 320.225 43.586 cv
cp
@
.8 lw
2 lc
0 lj
53.907 128.937 mo
53.907 6.96899 li
1 /0 /CSD get_res sepcs
1 sep
@
332.907 128.937 mo
332.907 6.96899 li
@
53.907 128.937 mo
332.907 128.937 li
@
53.907 6.96899 mo
332.907 6.96899 li
@
188.225 33.101 mo
328.006 33.101 li
328.94 33.101 329.406 32.634 329.406 31.701 cv
329.406 11.87 li
329.406 10.936 328.94 10.47 328.006 10.47 cv
188.225 10.47 li
187.292 10.47 186.825 10.936 186.825 11.87 cv
186.825 31.701 li
186.825 32.634 187.292 33.101 188.225 33.101 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
188.225 33.101 mo
328.006 33.101 li
328.94 33.101 329.406 32.634 329.406 31.701 cv
329.406 11.87 li
329.406 10.936 328.94 10.47 328.006 10.47 cv
188.225 10.47 li
187.292 10.47 186.825 10.936 186.825 11.87 cv
186.825 31.701 li
186.825 32.634 187.292 33.101 188.225 33.101 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
189.625 16.132 mo
203.625 16.132 li
.905547 .71957 0 0 cmyk
@
193.625 19.132 mo
199.625 19.132 li
199.625 13.132 li
193.625 13.132 li
cp
f
1 lw
0 lc
0 lj
193.625 19.132 mo
199.625 19.132 li
199.625 13.132 li
193.625 13.132 li
cp
@
212.965 13.605 mo
212.965 14.277 li
212.699 14.151 212.454 14.06 212.223 13.997 cv
211.985 13.941 211.761 13.906 211.551 13.906 cv
211.173 13.906 210.879 13.983 210.676 14.123 cv
210.473 14.27 210.375 14.48 210.375 14.746 cv
210.375 14.97 210.438 15.145 210.578 15.257 cv
210.711 15.376 210.97 15.467 211.348 15.537 cv
211.768 15.621 li
212.279 15.719 212.657 15.894 212.902 16.139 cv
213.147 16.391 213.273 16.72 213.273 17.133 cv
213.273 17.63 213.105 18.001 212.776 18.253 cv
212.44 18.505 211.957 18.631 211.32 18.631 cv
211.075 18.631 210.816 18.603 210.543 18.554 cv
210.27 18.505 209.99 18.428 209.703 18.316 cv
209.703 17.602 li
209.983 17.763 210.256 17.882 210.522 17.959 cv
210.788 18.043 211.054 18.078 211.32 18.078 cv
211.712 18.078 212.013 18.001 212.23 17.847 cv
212.44 17.693 212.552 17.476 212.552 17.182 cv
212.552 16.93 212.475 16.734 212.321 16.594 cv
212.167 16.454 211.915 16.349 211.565 16.279 cv
211.145 16.195 li
210.627 16.097 210.256 15.936 210.025 15.712 cv
209.794 15.495 209.682 15.194 209.682 14.802 cv
209.682 14.354 209.836 13.997 210.158 13.738 cv
210.473 13.479 210.914 13.346 211.474 13.346 cv
211.712 13.346 211.95 13.367 212.202 13.409 cv
212.447 13.451 212.699 13.521 212.965 13.605 cv
1 /0 /CSD get_res sepcs
1 sep
ef
217.405 13.605 mo
217.405 14.277 li
217.139 14.151 216.894 14.06 216.663 13.997 cv
216.425 13.941 216.201 13.906 215.991 13.906 cv
215.613 13.906 215.319 13.983 215.116 14.123 cv
214.913 14.27 214.815 14.48 214.815 14.746 cv
214.815 14.97 214.878 15.145 215.018 15.257 cv
215.151 15.376 215.41 15.467 215.788 15.537 cv
216.208 15.621 li
216.719 15.719 217.097 15.894 217.342 16.139 cv
217.587 16.391 217.713 16.72 217.713 17.133 cv
217.713 17.63 217.545 18.001 217.216 18.253 cv
216.88 18.505 216.397 18.631 215.76 18.631 cv
215.515 18.631 215.256 18.603 214.983 18.554 cv
214.71 18.505 214.43 18.428 214.143 18.316 cv
214.143 17.602 li
214.423 17.763 214.696 17.882 214.962 17.959 cv
215.228 18.043 215.494 18.078 215.76 18.078 cv
216.152 18.078 216.453 18.001 216.67 17.847 cv
216.88 17.693 216.992 17.476 216.992 17.182 cv
216.992 16.93 216.915 16.734 216.761 16.594 cv
216.607 16.454 216.355 16.349 216.005 16.279 cv
215.585 16.195 li
215.067 16.097 214.696 15.936 214.465 15.712 cv
214.234 15.495 214.122 15.194 214.122 14.802 cv
214.122 14.354 214.276 13.997 214.598 13.738 cv
214.913 13.479 215.354 13.346 215.914 13.346 cv
216.152 13.346 216.39 13.367 216.642 13.409 cv
216.887 13.451 217.139 13.521 217.405 13.605 cv
ef
219.479 14.004 mo
219.479 17.973 li
220.312 17.973 li
221.012 17.973 221.53 17.819 221.859 17.497 cv
222.181 17.175 222.349 16.671 222.349 15.985 cv
222.349 15.299 222.181 14.802 221.859 14.48 cv
221.53 14.165 221.012 14.004 220.312 14.004 cv
219.479 14.004 li
218.786 13.437 mo
220.207 13.437 li
221.194 13.437 221.922 13.647 222.384 14.053 cv
222.846 14.466 223.077 15.11 223.077 15.985 cv
223.077 16.867 222.839 17.511 222.377 17.924 cv
221.915 18.337 221.187 18.54 220.207 18.54 cv
218.786 18.54 li
218.786 13.437 li
ef
223.843 16.902 mo
225.684 16.902 li
225.684 16.342 li
223.843 16.342 li
cp
f
228.33 15.712 mo
228.022 15.712 227.777 15.824 227.595 16.034 cv
227.413 16.244 227.322 16.538 227.322 16.902 cv
227.322 17.273 227.413 17.567 227.595 17.777 cv
227.777 17.987 228.022 18.092 228.33 18.092 cv
228.638 18.092 228.883 17.987 229.065 17.777 cv
229.247 17.567 229.338 17.273 229.338 16.902 cv
229.338 16.538 229.247 16.244 229.065 16.034 cv
228.883 15.824 228.638 15.712 228.33 15.712 cv
229.702 13.549 mo
229.702 14.179 li
229.527 14.095 229.352 14.032 229.177 13.99 cv
228.995 13.948 228.82 13.927 228.652 13.927 cv
228.19 13.927 227.84 14.081 227.602 14.389 cv
227.364 14.697 227.224 15.166 227.196 15.782 cv
227.329 15.586 227.497 15.432 227.7 15.327 cv
227.903 15.222 228.127 15.166 228.372 15.166 cv
228.883 15.166 229.289 15.327 229.583 15.635 cv
229.877 15.943 230.031 16.37 230.031 16.902 cv
230.031 17.427 229.87 17.847 229.562 18.162 cv
229.254 18.477 228.841 18.631 228.33 18.631 cv
227.742 18.631 227.287 18.407 226.979 17.959 cv
226.664 17.511 226.51 16.853 226.51 15.992 cv
226.51 15.187 226.699 14.543 227.084 14.067 cv
227.462 13.591 227.98 13.346 228.624 13.346 cv
228.792 13.346 228.967 13.367 229.149 13.395 cv
229.324 13.43 229.506 13.479 229.702 13.549 cv
ef
233.106 14.039 mo
231.363 16.762 li
233.106 16.762 li
233.106 14.039 li
232.924 13.437 mo
233.792 13.437 li
233.792 16.762 li
234.52 16.762 li
234.52 17.336 li
233.792 17.336 li
233.792 18.54 li
233.106 18.54 li
233.106 17.336 li
230.803 17.336 li
230.803 16.671 li
232.924 13.437 li
ef
235.586 13.437 mo
236.615 13.437 li
237.917 16.909 li
239.226 13.437 li
240.255 13.437 li
240.255 18.54 li
239.583 18.54 li
239.583 14.06 li
238.267 17.56 li
237.574 17.56 li
236.258 14.06 li
236.258 18.54 li
235.586 18.54 li
235.586 13.437 li
ef
242.399 16.104 mo
242.399 17.973 li
243.505 17.973 li
243.876 17.973 244.149 17.896 244.331 17.742 cv
244.506 17.588 244.597 17.357 244.597 17.035 cv
244.597 16.72 244.506 16.489 244.331 16.335 cv
244.149 16.181 243.876 16.104 243.505 16.104 cv
242.399 16.104 li
242.399 14.004 mo
242.399 15.544 li
243.421 15.544 li
243.757 15.544 244.002 15.481 244.17 15.355 cv
244.338 15.229 244.422 15.04 244.422 14.774 cv
244.422 14.522 244.338 14.326 244.17 14.2 cv
244.002 14.074 243.757 14.004 243.421 14.004 cv
242.399 14.004 li
241.706 13.437 mo
243.47 13.437 li
243.995 13.437 244.401 13.549 244.688 13.766 cv
244.968 13.99 245.115 14.298 245.115 14.697 cv
245.115 15.012 245.038 15.264 244.891 15.446 cv
244.744 15.628 244.534 15.747 244.254 15.789 cv
244.59 15.866 244.856 16.02 245.045 16.251 cv
245.227 16.482 245.325 16.769 245.325 17.112 cv
245.325 17.574 245.164 17.924 244.856 18.169 cv
244.548 18.421 244.107 18.54 243.54 18.54 cv
241.706 18.54 li
241.706 13.437 li
ef
1.5 lw
2 lc
1 lj
189.625 26.397 mo
203.625 26.397 li
.905547 .71957 0 0 cmyk
@
196.625 29.397 mo
197.421 29.397 198.184 29.081 198.746 28.518 cv
199.309 27.956 199.625 27.193 199.625 26.397 cv
199.625 25.601 199.309 24.838 198.746 24.276 cv
198.184 23.713 197.421 23.397 196.625 23.397 cv
195.829 23.397 195.066 23.713 194.504 24.276 cv
193.941 24.838 193.625 25.601 193.625 26.397 cv
193.625 27.193 193.941 27.956 194.504 28.518 cv
195.066 29.081 195.829 29.397 196.625 29.397 cv
cp
f
1 lw
0 lc
196.625 29.397 mo
197.421 29.397 198.184 29.081 198.746 28.518 cv
199.309 27.956 199.625 27.193 199.625 26.397 cv
199.625 25.601 199.309 24.838 198.746 24.276 cv
198.184 23.713 197.421 23.397 196.625 23.397 cv
195.829 23.397 195.066 23.713 194.504 24.276 cv
193.941 24.838 193.625 25.601 193.625 26.397 cv
193.625 27.193 193.941 27.956 194.504 28.518 cv
195.066 29.081 195.829 29.397 196.625 29.397 cv
cp
@
212.965 23.925 mo
212.965 24.597 li
212.699 24.471 212.454 24.38 212.223 24.317 cv
211.985 24.261 211.761 24.226 211.551 24.226 cv
211.173 24.226 210.879 24.303 210.676 24.443 cv
210.473 24.59 210.375 24.8 210.375 25.066 cv
210.375 25.29 210.438 25.465 210.578 25.577 cv
210.711 25.696 210.97 25.787 211.348 25.857 cv
211.768 25.941 li
212.279 26.039 212.657 26.214 212.902 26.459 cv
213.147 26.711 213.273 27.04 213.273 27.453 cv
213.273 27.95 213.105 28.321 212.776 28.573 cv
212.44 28.825 211.957 28.951 211.32 28.951 cv
211.075 28.951 210.816 28.923 210.543 28.874 cv
210.27 28.825 209.99 28.748 209.703 28.636 cv
209.703 27.922 li
209.983 28.083 210.256 28.202 210.522 28.279 cv
210.788 28.363 211.054 28.398 211.32 28.398 cv
211.712 28.398 212.013 28.321 212.23 28.167 cv
212.44 28.013 212.552 27.796 212.552 27.502 cv
212.552 27.25 212.475 27.054 212.321 26.914 cv
212.167 26.774 211.915 26.669 211.565 26.599 cv
211.145 26.515 li
210.627 26.417 210.256 26.256 210.025 26.032 cv
209.794 25.815 209.682 25.514 209.682 25.122 cv
209.682 24.674 209.836 24.317 210.158 24.058 cv
210.473 23.799 210.914 23.666 211.474 23.666 cv
211.712 23.666 211.95 23.687 212.202 23.729 cv
212.447 23.771 212.699 23.841 212.965 23.925 cv
1 /0 /CSD get_res sepcs
1 sep
ef
217.405 23.925 mo
217.405 24.597 li
217.139 24.471 216.894 24.38 216.663 24.317 cv
216.425 24.261 216.201 24.226 215.991 24.226 cv
215.613 24.226 215.319 24.303 215.116 24.443 cv
214.913 24.59 214.815 24.8 214.815 25.066 cv
214.815 25.29 214.878 25.465 215.018 25.577 cv
215.151 25.696 215.41 25.787 215.788 25.857 cv
216.208 25.941 li
216.719 26.039 217.097 26.214 217.342 26.459 cv
217.587 26.711 217.713 27.04 217.713 27.453 cv
217.713 27.95 217.545 28.321 217.216 28.573 cv
216.88 28.825 216.397 28.951 215.76 28.951 cv
215.515 28.951 215.256 28.923 214.983 28.874 cv
214.71 28.825 214.43 28.748 214.143 28.636 cv
214.143 27.922 li
214.423 28.083 214.696 28.202 214.962 28.279 cv
215.228 28.363 215.494 28.398 215.76 28.398 cv
216.152 28.398 216.453 28.321 216.67 28.167 cv
216.88 28.013 216.992 27.796 216.992 27.502 cv
216.992 27.25 216.915 27.054 216.761 26.914 cv
216.607 26.774 216.355 26.669 216.005 26.599 cv
215.585 26.515 li
215.067 26.417 214.696 26.256 214.465 26.032 cv
214.234 25.815 214.122 25.514 214.122 25.122 cv
214.122 24.674 214.276 24.317 214.598 24.058 cv
214.913 23.799 215.354 23.666 215.914 23.666 cv
216.152 23.666 216.39 23.687 216.642 23.729 cv
216.887 23.771 217.139 23.841 217.405 23.925 cv
ef
219.479 24.324 mo
219.479 28.293 li
220.312 28.293 li
221.012 28.293 221.53 28.139 221.859 27.817 cv
222.181 27.495 222.349 26.991 222.349 26.305 cv
222.349 25.619 222.181 25.122 221.859 24.8 cv
221.53 24.485 221.012 24.324 220.312 24.324 cv
219.479 24.324 li
218.786 23.757 mo
220.207 23.757 li
221.194 23.757 221.922 23.967 222.384 24.373 cv
222.846 24.786 223.077 25.43 223.077 26.305 cv
223.077 27.187 222.839 27.831 222.377 28.244 cv
221.915 28.657 221.187 28.86 220.207 28.86 cv
218.786 28.86 li
218.786 23.757 li
ef
223.843 27.222 mo
225.684 27.222 li
225.684 26.662 li
223.843 26.662 li
cp
f
226.888 28.279 mo
228.015 28.279 li
228.015 24.387 li
226.79 24.632 li
226.79 24.002 li
228.008 23.757 li
228.701 23.757 li
228.701 28.279 li
229.828 28.279 li
229.828 28.86 li
226.888 28.86 li
226.888 28.279 li
ef
231.804 28.279 mo
234.212 28.279 li
234.212 28.86 li
230.971 28.86 li
230.971 28.279 li
231.23 28.013 231.587 27.649 232.042 27.187 cv
232.49 26.732 232.777 26.438 232.896 26.305 cv
233.12 26.06 233.274 25.85 233.358 25.675 cv
233.442 25.507 233.491 25.332 233.491 25.164 cv
233.491 24.898 233.393 24.674 233.204 24.506 cv
233.015 24.338 232.77 24.247 232.462 24.247 cv
232.245 24.247 232.014 24.289 231.776 24.359 cv
231.538 24.436 231.279 24.548 231.006 24.702 cv
231.006 24.002 li
231.286 23.89 231.545 23.806 231.783 23.75 cv
232.021 23.694 232.245 23.666 232.448 23.666 cv
232.973 23.666 233.393 23.799 233.708 24.065 cv
234.023 24.331 234.184 24.681 234.184 25.122 cv
234.184 25.332 234.142 25.535 234.065 25.717 cv
233.988 25.906 233.848 26.13 233.638 26.382 cv
233.582 26.452 233.4 26.641 233.092 26.956 cv
232.784 27.271 232.357 27.712 231.804 28.279 cv
ef
237.126 26.438 mo
236.797 26.438 236.538 26.529 236.349 26.704 cv
236.16 26.879 236.069 27.117 236.069 27.425 cv
236.069 27.733 236.16 27.978 236.349 28.153 cv
236.538 28.328 236.797 28.412 237.126 28.412 cv
237.448 28.412 237.707 28.328 237.896 28.146 cv
238.085 27.971 238.183 27.733 238.183 27.425 cv
238.183 27.117 238.085 26.879 237.903 26.704 cv
237.714 26.529 237.455 26.438 237.126 26.438 cv
236.433 26.144 mo
236.139 26.074 235.908 25.934 235.74 25.731 cv
235.572 25.528 235.495 25.283 235.495 24.989 cv
235.495 24.583 235.635 24.261 235.929 24.023 cv
236.216 23.785 236.615 23.666 237.126 23.666 cv
237.63 23.666 238.029 23.785 238.323 24.023 cv
238.61 24.261 238.757 24.583 238.757 24.989 cv
238.757 25.283 238.673 25.528 238.505 25.731 cv
238.337 25.934 238.113 26.074 237.819 26.144 cv
238.148 26.221 238.407 26.375 238.596 26.599 cv
238.778 26.823 238.876 27.103 238.876 27.425 cv
238.876 27.922 238.722 28.3 238.421 28.559 cv
238.113 28.825 237.686 28.951 237.126 28.951 cv
236.559 28.951 236.125 28.825 235.824 28.559 cv
235.523 28.3 235.376 27.922 235.376 27.425 cv
235.376 27.103 235.467 26.823 235.656 26.599 cv
235.838 26.375 236.097 26.221 236.433 26.144 cv
236.181 25.052 mo
236.181 25.318 236.258 25.528 236.426 25.675 cv
236.594 25.822 236.825 25.892 237.126 25.892 cv
237.42 25.892 237.651 25.822 237.819 25.675 cv
237.987 25.528 238.071 25.318 238.071 25.052 cv
238.071 24.786 237.987 24.583 237.819 24.436 cv
237.651 24.289 237.42 24.212 237.126 24.212 cv
236.825 24.212 236.594 24.289 236.426 24.436 cv
236.258 24.583 236.181 24.786 236.181 25.052 cv
ef
240.026 23.757 mo
241.055 23.757 li
242.357 27.229 li
243.666 23.757 li
244.695 23.757 li
244.695 28.86 li
244.023 28.86 li
244.023 24.38 li
242.707 27.88 li
242.014 27.88 li
240.698 24.38 li
240.698 28.86 li
240.026 28.86 li
240.026 23.757 li
ef
246.839 26.424 mo
246.839 28.293 li
247.945 28.293 li
248.316 28.293 248.589 28.216 248.771 28.062 cv
248.946 27.908 249.037 27.677 249.037 27.355 cv
249.037 27.04 248.946 26.809 248.771 26.655 cv
248.589 26.501 248.316 26.424 247.945 26.424 cv
246.839 26.424 li
246.839 24.324 mo
246.839 25.864 li
247.861 25.864 li
248.197 25.864 248.442 25.801 248.61 25.675 cv
248.778 25.549 248.862 25.36 248.862 25.094 cv
248.862 24.842 248.778 24.646 248.61 24.52 cv
248.442 24.394 248.197 24.324 247.861 24.324 cv
246.839 24.324 li
246.146 23.757 mo
247.91 23.757 li
248.435 23.757 248.841 23.869 249.128 24.086 cv
249.408 24.31 249.555 24.618 249.555 25.017 cv
249.555 25.332 249.478 25.584 249.331 25.766 cv
249.184 25.948 248.974 26.067 248.694 26.109 cv
249.03 26.186 249.296 26.34 249.485 26.571 cv
249.667 26.802 249.765 27.089 249.765 27.432 cv
249.765 27.894 249.604 28.244 249.296 28.489 cv
248.988 28.741 248.547 28.86 247.98 28.86 cv
246.146 28.86 li
246.146 23.757 li
ef
1.5 lw
2 lc
264.225 16.132 mo
278.225 16.132 li
0 .9617 .904814 0 cmyk
@
268.225 19.132 mo
274.225 19.132 li
274.225 13.132 li
268.225 13.132 li
cp
f
1 lw
0 lc
0 lj
268.225 19.132 mo
274.225 19.132 li
274.225 13.132 li
268.225 13.132 li
cp
@
284.546 13.437 mo
285.239 13.437 li
285.239 15.53 li
287.745 15.53 li
287.745 13.437 li
288.438 13.437 li
288.438 18.54 li
287.745 18.54 li
287.745 16.111 li
285.239 16.111 li
285.239 18.54 li
284.546 18.54 li
284.546 13.437 li
1 /0 /CSD get_res sepcs
1 sep
ef
290.519 14.004 mo
290.519 17.973 li
291.352 17.973 li
292.052 17.973 292.57 17.819 292.899 17.497 cv
293.221 17.175 293.389 16.671 293.389 15.985 cv
293.389 15.299 293.221 14.802 292.899 14.48 cv
292.57 14.165 292.052 14.004 291.352 14.004 cv
290.519 14.004 li
289.826 13.437 mo
291.247 13.437 li
292.234 13.437 292.962 13.647 293.424 14.053 cv
293.886 14.466 294.117 15.11 294.117 15.985 cv
294.117 16.867 293.879 17.511 293.417 17.924 cv
292.955 18.337 292.227 18.54 291.247 18.54 cv
289.826 18.54 li
289.826 13.437 li
ef
295.799 14.004 mo
295.799 17.973 li
296.632 17.973 li
297.332 17.973 297.85 17.819 298.179 17.497 cv
298.501 17.175 298.669 16.671 298.669 15.985 cv
298.669 15.299 298.501 14.802 298.179 14.48 cv
297.85 14.165 297.332 14.004 296.632 14.004 cv
295.799 14.004 li
295.106 13.437 mo
296.527 13.437 li
297.514 13.437 298.242 13.647 298.704 14.053 cv
299.166 14.466 299.397 15.11 299.397 15.985 cv
299.397 16.867 299.159 17.511 298.697 17.924 cv
298.235 18.337 297.507 18.54 296.527 18.54 cv
295.106 18.54 li
295.106 13.437 li
ef
300.163 16.902 mo
302.004 16.902 li
302.004 16.342 li
300.163 16.342 li
cp
f
304.65 15.712 mo
304.342 15.712 304.097 15.824 303.915 16.034 cv
303.733 16.244 303.642 16.538 303.642 16.902 cv
303.642 17.273 303.733 17.567 303.915 17.777 cv
304.097 17.987 304.342 18.092 304.65 18.092 cv
304.958 18.092 305.203 17.987 305.385 17.777 cv
305.567 17.567 305.658 17.273 305.658 16.902 cv
305.658 16.538 305.567 16.244 305.385 16.034 cv
305.203 15.824 304.958 15.712 304.65 15.712 cv
306.022 13.549 mo
306.022 14.179 li
305.847 14.095 305.672 14.032 305.497 13.99 cv
305.315 13.948 305.14 13.927 304.972 13.927 cv
304.51 13.927 304.16 14.081 303.922 14.389 cv
303.684 14.697 303.544 15.166 303.516 15.782 cv
303.649 15.586 303.817 15.432 304.02 15.327 cv
304.223 15.222 304.447 15.166 304.692 15.166 cv
305.203 15.166 305.609 15.327 305.903 15.635 cv
306.197 15.943 306.351 16.37 306.351 16.902 cv
306.351 17.427 306.19 17.847 305.882 18.162 cv
305.574 18.477 305.161 18.631 304.65 18.631 cv
304.062 18.631 303.607 18.407 303.299 17.959 cv
302.984 17.511 302.83 16.853 302.83 15.992 cv
302.83 15.187 303.019 14.543 303.404 14.067 cv
303.782 13.591 304.3 13.346 304.944 13.346 cv
305.112 13.346 305.287 13.367 305.469 13.395 cv
305.644 13.43 305.826 13.479 306.022 13.549 cv
ef
309.546 14.039 mo
307.803 16.762 li
309.546 16.762 li
309.546 14.039 li
309.364 13.437 mo
310.232 13.437 li
310.232 16.762 li
310.96 16.762 li
310.96 17.336 li
310.232 17.336 li
310.232 18.54 li
309.546 18.54 li
309.546 17.336 li
307.243 17.336 li
307.243 16.671 li
309.364 13.437 li
ef
312.026 13.437 mo
313.055 13.437 li
314.357 16.909 li
315.666 13.437 li
316.695 13.437 li
316.695 18.54 li
316.023 18.54 li
316.023 14.06 li
314.707 17.56 li
314.014 17.56 li
312.698 14.06 li
312.698 18.54 li
312.026 18.54 li
312.026 13.437 li
ef
318.719 16.104 mo
318.719 17.973 li
319.825 17.973 li
320.196 17.973 320.469 17.896 320.651 17.742 cv
320.826 17.588 320.917 17.357 320.917 17.035 cv
320.917 16.72 320.826 16.489 320.651 16.335 cv
320.469 16.181 320.196 16.104 319.825 16.104 cv
318.719 16.104 li
318.719 14.004 mo
318.719 15.544 li
319.741 15.544 li
320.077 15.544 320.322 15.481 320.49 15.355 cv
320.658 15.229 320.742 15.04 320.742 14.774 cv
320.742 14.522 320.658 14.326 320.49 14.2 cv
320.322 14.074 320.077 14.004 319.741 14.004 cv
318.719 14.004 li
318.026 13.437 mo
319.79 13.437 li
320.315 13.437 320.721 13.549 321.008 13.766 cv
321.288 13.99 321.435 14.298 321.435 14.697 cv
321.435 15.012 321.358 15.264 321.211 15.446 cv
321.064 15.628 320.854 15.747 320.574 15.789 cv
320.91 15.866 321.176 16.02 321.365 16.251 cv
321.547 16.482 321.645 16.769 321.645 17.112 cv
321.645 17.574 321.484 17.924 321.176 18.169 cv
320.868 18.421 320.427 18.54 319.86 18.54 cv
318.026 18.54 li
318.026 13.437 li
ef
1.5 lw
2 lc
1 lj
264.225 26.397 mo
278.225 26.397 li
0 .9617 .904814 0 cmyk
@
271.225 29.397 mo
272.021 29.397 272.784 29.081 273.346 28.518 cv
273.909 27.956 274.225 27.193 274.225 26.397 cv
274.225 25.601 273.909 24.838 273.346 24.276 cv
272.784 23.713 272.021 23.397 271.225 23.397 cv
270.429 23.397 269.666 23.713 269.104 24.276 cv
268.541 24.838 268.225 25.601 268.225 26.397 cv
268.225 27.193 268.541 27.956 269.104 28.518 cv
269.666 29.081 270.429 29.397 271.225 29.397 cv
cp
f
1 lw
0 lc
271.225 29.397 mo
272.021 29.397 272.784 29.081 273.346 28.518 cv
273.909 27.956 274.225 27.193 274.225 26.397 cv
274.225 25.601 273.909 24.838 273.346 24.276 cv
272.784 23.713 272.021 23.397 271.225 23.397 cv
270.429 23.397 269.666 23.713 269.104 24.276 cv
268.541 24.838 268.225 25.601 268.225 26.397 cv
268.225 27.193 268.541 27.956 269.104 28.518 cv
269.666 29.081 270.429 29.397 271.225 29.397 cv
cp
@
284.546 23.757 mo
285.239 23.757 li
285.239 25.85 li
287.745 25.85 li
287.745 23.757 li
288.438 23.757 li
288.438 28.86 li
287.745 28.86 li
287.745 26.431 li
285.239 26.431 li
285.239 28.86 li
284.546 28.86 li
284.546 23.757 li
1 /0 /CSD get_res sepcs
1 sep
ef
290.519 24.324 mo
290.519 28.293 li
291.352 28.293 li
292.052 28.293 292.57 28.139 292.899 27.817 cv
293.221 27.495 293.389 26.991 293.389 26.305 cv
293.389 25.619 293.221 25.122 292.899 24.8 cv
292.57 24.485 292.052 24.324 291.352 24.324 cv
290.519 24.324 li
289.826 23.757 mo
291.247 23.757 li
292.234 23.757 292.962 23.967 293.424 24.373 cv
293.886 24.786 294.117 25.43 294.117 26.305 cv
294.117 27.187 293.879 27.831 293.417 28.244 cv
292.955 28.657 292.227 28.86 291.247 28.86 cv
289.826 28.86 li
289.826 23.757 li
ef
295.799 24.324 mo
295.799 28.293 li
296.632 28.293 li
297.332 28.293 297.85 28.139 298.179 27.817 cv
298.501 27.495 298.669 26.991 298.669 26.305 cv
298.669 25.619 298.501 25.122 298.179 24.8 cv
297.85 24.485 297.332 24.324 296.632 24.324 cv
295.799 24.324 li
295.106 23.757 mo
296.527 23.757 li
297.514 23.757 298.242 23.967 298.704 24.373 cv
299.166 24.786 299.397 25.43 299.397 26.305 cv
299.397 27.187 299.159 27.831 298.697 28.244 cv
298.235 28.657 297.507 28.86 296.527 28.86 cv
295.106 28.86 li
295.106 23.757 li
ef
300.163 27.222 mo
302.004 27.222 li
302.004 26.662 li
300.163 26.662 li
cp
f
303.208 28.279 mo
304.335 28.279 li
304.335 24.387 li
303.11 24.632 li
303.11 24.002 li
304.328 23.757 li
305.021 23.757 li
305.021 28.279 li
306.148 28.279 li
306.148 28.86 li
303.208 28.86 li
303.208 28.279 li
ef
308.244 28.279 mo
310.652 28.279 li
310.652 28.86 li
307.411 28.86 li
307.411 28.279 li
307.67 28.013 308.027 27.649 308.482 27.187 cv
308.93 26.732 309.217 26.438 309.336 26.305 cv
309.56 26.06 309.714 25.85 309.798 25.675 cv
309.882 25.507 309.931 25.332 309.931 25.164 cv
309.931 24.898 309.833 24.674 309.644 24.506 cv
309.455 24.338 309.21 24.247 308.902 24.247 cv
308.685 24.247 308.454 24.289 308.216 24.359 cv
307.978 24.436 307.719 24.548 307.446 24.702 cv
307.446 24.002 li
307.726 23.89 307.985 23.806 308.223 23.75 cv
308.461 23.694 308.685 23.666 308.888 23.666 cv
309.413 23.666 309.833 23.799 310.148 24.065 cv
310.463 24.331 310.624 24.681 310.624 25.122 cv
310.624 25.332 310.582 25.535 310.505 25.717 cv
310.428 25.906 310.288 26.13 310.078 26.382 cv
310.022 26.452 309.84 26.641 309.532 26.956 cv
309.224 27.271 308.797 27.712 308.244 28.279 cv
ef
313.566 26.438 mo
313.237 26.438 312.978 26.529 312.789 26.704 cv
312.6 26.879 312.509 27.117 312.509 27.425 cv
312.509 27.733 312.6 27.978 312.789 28.153 cv
312.978 28.328 313.237 28.412 313.566 28.412 cv
313.888 28.412 314.147 28.328 314.336 28.146 cv
314.525 27.971 314.623 27.733 314.623 27.425 cv
314.623 27.117 314.525 26.879 314.343 26.704 cv
314.154 26.529 313.895 26.438 313.566 26.438 cv
312.873 26.144 mo
312.579 26.074 312.348 25.934 312.18 25.731 cv
312.012 25.528 311.935 25.283 311.935 24.989 cv
311.935 24.583 312.075 24.261 312.369 24.023 cv
312.656 23.785 313.055 23.666 313.566 23.666 cv
314.07 23.666 314.469 23.785 314.763 24.023 cv
315.05 24.261 315.197 24.583 315.197 24.989 cv
315.197 25.283 315.113 25.528 314.945 25.731 cv
314.777 25.934 314.553 26.074 314.259 26.144 cv
314.588 26.221 314.847 26.375 315.036 26.599 cv
315.218 26.823 315.316 27.103 315.316 27.425 cv
315.316 27.922 315.162 28.3 314.861 28.559 cv
314.553 28.825 314.126 28.951 313.566 28.951 cv
312.999 28.951 312.565 28.825 312.264 28.559 cv
311.963 28.3 311.816 27.922 311.816 27.425 cv
311.816 27.103 311.907 26.823 312.096 26.599 cv
312.278 26.375 312.537 26.221 312.873 26.144 cv
312.621 25.052 mo
312.621 25.318 312.698 25.528 312.866 25.675 cv
313.034 25.822 313.265 25.892 313.566 25.892 cv
313.86 25.892 314.091 25.822 314.259 25.675 cv
314.427 25.528 314.511 25.318 314.511 25.052 cv
314.511 24.786 314.427 24.583 314.259 24.436 cv
314.091 24.289 313.86 24.212 313.566 24.212 cv
313.265 24.212 313.034 24.289 312.866 24.436 cv
312.698 24.583 312.621 24.786 312.621 25.052 cv
ef
316.466 23.757 mo
317.495 23.757 li
318.797 27.229 li
320.106 23.757 li
321.135 23.757 li
321.135 28.86 li
320.463 28.86 li
320.463 24.38 li
319.147 27.88 li
318.454 27.88 li
317.138 24.38 li
317.138 28.86 li
316.466 28.86 li
316.466 23.757 li
ef
323.159 26.424 mo
323.159 28.293 li
324.265 28.293 li
324.636 28.293 324.909 28.216 325.091 28.062 cv
325.266 27.908 325.357 27.677 325.357 27.355 cv
325.357 27.04 325.266 26.809 325.091 26.655 cv
324.909 26.501 324.636 26.424 324.265 26.424 cv
323.159 26.424 li
323.159 24.324 mo
323.159 25.864 li
324.181 25.864 li
324.517 25.864 324.762 25.801 324.93 25.675 cv
325.098 25.549 325.182 25.36 325.182 25.094 cv
325.182 24.842 325.098 24.646 324.93 24.52 cv
324.762 24.394 324.517 24.324 324.181 24.324 cv
323.159 24.324 li
322.466 23.757 mo
324.23 23.757 li
324.755 23.757 325.161 23.869 325.448 24.086 cv
325.728 24.31 325.875 24.618 325.875 25.017 cv
325.875 25.332 325.798 25.584 325.651 25.766 cv
325.504 25.948 325.294 26.067 325.014 26.109 cv
325.35 26.186 325.616 26.34 325.805 26.571 cv
325.987 26.802 326.085 27.089 326.085 27.432 cv
326.085 27.894 325.924 28.244 325.616 28.489 cv
325.308 28.741 324.867 28.86 324.3 28.86 cv
322.466 28.86 li
322.466 23.757 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
